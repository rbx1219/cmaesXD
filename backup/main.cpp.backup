#include <stdio.h>
#include "myrand.h"
#include <math.h>
#include "cmaes.h"
#include "Eigen/Dense"
#include "group.h"
#include <utility>

#define dimension 10
#define PopSize 400
#define upperbound 100
#define lowerbound -100

const int num_groups = 20;
int fe = 0;

typedef Eigen::VectorXd Node;

bool shouldTerminate(int n)
{
    return (fe == 100000);	
}

double square_of_distance(Node a , Node b)
{
    double result = 0.0;
    for(int i = 0 ; i < dimension ; i++)
	result += (a(i)-b(i)) * (a(i)-b(i));	
    return result;
}

double calculateDistance(Node a , Node b)
{
    return square_of_distance(a,b);
}

void pull(GROUP *groups , int stage )
{

    int minX ;
    double min ;

    /* 1. calculate UCB */
    minX = 0;
    min=groups[0].calculateUCB(fe);
    printf("groups[ 0] : %lf\n" , min);
    int i;
    for(i = 1; i < num_groups ; i++)
    {
	
	double tmp = groups[i].calculateUCB(fe);
	printf("groups[%2d] : %lf\n" , i , tmp);
	if(tmp <min)
	{
	    minX = i;
	    min = tmp;
	}
    }
    /*end of 1*/
    /*2. CMAES in highest UCB group and update*/
    Node *temp_pop = new Node[ groups[minX].nodes.size() ];
    list< pair<Node , double> >::iterator iter = groups[minX].nodes.begin();
    for(i = 0 ; i < groups[minX].nodes.size() ; i++)
    {
	temp_pop[i] = (*iter).first;
	iter++;
    }
    CMAES es(groups[minX].nodes.size() , 1 , dimension , temp_pop);
    es.run();
    Node temp_node = es.generate();
    
    if(stage == 1)
    {
    	printf("choose %d \n",minX);
    }
    if(stage == 0)
	for(iter = groups[minX].nodes.begin() ; iter != groups[minX].nodes.end() ; ++iter)
	    if( (*iter).second == groups[minX].getmax() )
	    {
		groups[minX].nodes.erase(iter++);
	    	break;
	    }

    groups[minX].push(temp_node , fe++);
    /*end of 2*/

    delete[] temp_pop;
}

void updateGroups(GROUP *groups)
{

    int max , min;
    int maxX , minX;
    max = min = groups[0].AllUsedNumber;
    maxX = minX = 0;

    for(int i = 1 ; i < num_groups ; i++)
    {
	int tmp = groups[i].AllUsedNumber;
	if(tmp > max)
	{
	    maxX = i;
	    max = tmp;
	}
	else if(tmp < min)
	{
	    minX = i;
	    min = tmp;
	}
    }

    if(max > min *3 )
    {

	cout << "=====================================" << endl ;
	Node *temp_pop = new Node[ num_groups -1 ];
	int count = 0;
	for(int i = 0 ; i < num_groups  ; i++)
	{
	    if(i == minX)
		continue;
	    temp_pop[count++] = groups[i].get_mean_vector();
			
	}
	CMAES es(num_groups -1, 1 , dimension , temp_pop);
	es.run();
	Node temp_node = es.generate();
	delete[] temp_pop;
	int remain = groups[minX].nodes.size() -1;
	groups[minX].clear();
	groups[minX].push(temp_node , fe++);

	printf("from %d remain = %d\n" , minX , remain);
	for(int i = 0 ; i < remain ; i++)
	    pull(groups , 1); //stage 1 doesn't erase Nodes
    }
}


int main()
{
    Node *central = new Node[num_groups];
    Node *population = new Node[PopSize];
    int clusteringCategory[PopSize] = {0};
    MyRand rand;
    int *uniarray = new int[PopSize];
    bool SwapFlag = true;
    GROUP groups[num_groups];
	int generation = 0;

    for(int i = 0 ; i < num_groups ; i++)
	groups[i].length = dimension;

    /*initial pop */
    for(int i = 0 ; i < PopSize ; i++)
    {
	population[i].setZero(dimension);
	for(int j = 0 ; j < dimension ; j++)
	    population[i](j) = rand.uniform(lowerbound , upperbound);
    }
    /*K-MEANS below*/
    rand.uniformArray(uniarray , PopSize-1 , 0 , PopSize-1);

    for(int i = 0 ; i < num_groups ; i++)
	central[i] = population[uniarray[i]];
    delete[] uniarray;


    while(SwapFlag)
    {
	SwapFlag = false;
	for(int i = 0 ; i < PopSize ; i++)
	{	
	    double minDistance = 99999999.999999;
	    int closet = clusteringCategory[i];
	    for(int j = 0 ; j < num_groups ; j++)
	    {
		if( calculateDistance(population[i] , central[j]) < minDistance)
		{
		    minDistance = calculateDistance(population[i] , central[j]);
		    closet = j;
		}
	    }
	    if(closet != clusteringCategory[i])
	    {
		SwapFlag = true;
		clusteringCategory[i] = closet;
	    }
	}		
	/*updating central*/
	for(int j = 0 ; j < num_groups ; j++)
	{
	    Node tmp;
	    tmp.setZero(dimension);
	    int count = 0;
	    for(int i = 0 ; i < PopSize ; i++)
		if(clusteringCategory[i] == j)
		{
		    count++;
		    tmp = tmp + population[i];
		}
	    central[j] = tmp / count;
	}


    }

    for(int i = 0 ; i < PopSize ; i++)
	groups[ clusteringCategory[i] ].push(population[i] , fe++);

    while(!shouldTerminate(generation ++))
    {
	pull(groups , 0);
	updateGroups(groups);
    
    }
    return 0;
}


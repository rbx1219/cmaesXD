!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALLELE_CONVERGENCE	parameter.hpp	/^const int ALLELE_CONVERGENCE          = 60;$/;"	v
Allele	gene.hpp	/^		double Allele;$/;"	m	class:gene	access:public
AvgFit	population.hpp	/^		double     AvgFit;              \/\/ average fitness    $/;"	m	class:population	access:private
Ax	benchmark.cpp	/^void Ax(double *result, double **A, double *x,int length) {$/;"	f	signature:(double *result, double **A, double *x,int length)
Ax	benchmark.h	/^	void Ax(double *result, double **A, double *x,int length);$/;"	p	signature:(double *result, double **A, double *x,int length)
Best	population.hpp	/^		int        Best;                \/\/ index of best individual$/;"	m	class:population	access:private
C	HCJob.h	/^	double C;$/;"	m	class:HCJob	access:public
CC	Makefile	/^CC = g++$/;"	m
CC	mpm.hpp	/^		double CC() { return mc + cpc; }$/;"	f	class:mpm	access:public	signature:()
CC	subset.hpp	/^		double CC() { return mc + cpc; }$/;"	f	class:subset	access:public	signature:()
CPC	mpm.hpp	/^		double CPC() { return cpc; }$/;"	f	class:mpm	access:public	signature:()
CPC	subset.hpp	/^		double CPC() { return cpc; }$/;"	f	class:subset	access:public	signature:()
Chromosomes	population.hpp	/^		chromosome *Chromosomes;        \/\/ individuals$/;"	m	class:population	access:private
Ctable	population.hpp	/^		code_table *Ctable;$/;"	m	class:population	access:public
DEFAULT_FILE_BIAS	benchmark.h	/^const string DEFAULT_FILE_BIAS = "supportData\/fbias_data.txt";$/;"	v
DEFAULT_FILE_DATA1	F01_shifted_sphere.h	/^const string DEFAULT_FILE_DATA1="supportData\/sphere_func_data.txt";$/;"	v
DEFAULT_FILE_DATA10	F10_shifted_rotated_rastrigin.h	/^const string DEFAULT_FILE_DATA10 = "supportData\/rastrigin_func_data.txt";$/;"	v
DEFAULT_FILE_DATA11	F11_shifted_rotated_weierstrass.h	/^const string DEFAULT_FILE_DATA11 = "supportData\/weierstrass_data.txt";$/;"	v
DEFAULT_FILE_DATA12	F12_schwefel.h	/^const string DEFAULT_FILE_DATA12 = "supportData\/schwefel_213_data.txt";$/;"	v
DEFAULT_FILE_DATA13	F13_shifted_expanded_griewank_rosenbrock.h	/^const string DEFAULT_FILE_DATA13 = "supportData\/EF8F2_func_data.txt";$/;"	v
DEFAULT_FILE_DATA14	F14_shifted_rotated_expanded_scaffer.h	/^const string DEFAULT_FILE_DATA14 = "supportData\/E_ScafferF6_func_data.txt";$/;"	v
DEFAULT_FILE_DATA15	F15_hybrid_composition_1.h	/^const string DEFAULT_FILE_DATA15 = "supportData\/hybrid_func1_data.txt";$/;"	v
DEFAULT_FILE_DATA16	F16_rotated_hybrid_composition_1.h	/^const string DEFAULT_FILE_DATA16 = "supportData\/hybrid_func1_data.txt";$/;"	v
DEFAULT_FILE_DATA17	F17_rotated_hybrid_composition_1_noise.h	/^const string DEFAULT_FILE_DATA17 = "supportData\/hybrid_func1_data.txt";$/;"	v
DEFAULT_FILE_DATA18	F18_rotated_hybrid_composition_2.h	/^const string DEFAULT_FILE_DATA18 = "supportData\/hybrid_func2_data.txt";$/;"	v
DEFAULT_FILE_DATA19	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^const string DEFAULT_FILE_DATA19 = "supportData\/hybrid_func2_data.txt";$/;"	v
DEFAULT_FILE_DATA2	F02_shifted_schwefel.h	/^const string DEFAULT_FILE_DATA2="supportData\/schwefel_102_data.txt";$/;"	v
DEFAULT_FILE_DATA20	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^const string DEFAULT_FILE_DATA20 = "supportData\/hybrid_func2_data.txt";$/;"	v
DEFAULT_FILE_DATA21	F21_rotated_hybrid_composition_3.h	/^const string DEFAULT_FILE_DATA21 = "supportData\/hybrid_func3_data.txt";$/;"	v
DEFAULT_FILE_DATA22	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^const string DEFAULT_FILE_DATA22 = "supportData\/hybrid_func3_data.txt";$/;"	v
DEFAULT_FILE_DATA23	F23_noncontinuous_rotated_hybrid_composition_3.h	/^const string DEFAULT_FILE_DATA23 = "supportData\/hybrid_func3_data.txt";$/;"	v
DEFAULT_FILE_DATA24	F24_rotated_hybrid_composition_4.h	/^const string DEFAULT_FILE_DATA24 = "supportData\/hybrid_func4_data.txt";$/;"	v
DEFAULT_FILE_DATA25	F25_rotated_hybrid_composition_4_bound.h	/^const string DEFAULT_FILE_DATA25 = "supportData\/hybrid_func4_data.txt";$/;"	v
DEFAULT_FILE_DATA3	F03_shifted_rotated_high_cond_elliptic.h	/^const string DEFAULT_FILE_DATA3 = "supportData\/high_cond_elliptic_rot_data.txt";$/;"	v
DEFAULT_FILE_DATA4	F04_shifted_schwefel_noise.h	/^const string DEFAULT_FILE_DATA4 = "supportData\/schwefel_102_data.txt";$/;"	v
DEFAULT_FILE_DATA5	F05_schwefel_global_opt_bound.h	/^const string DEFAULT_FILE_DATA5 = "supportData\/schwefel_206_data.txt";$/;"	v
DEFAULT_FILE_DATA6	F06_shifted_rosenbrock.h	/^const string DEFAULT_FILE_DATA6 = "supportData\/rosenbrock_func_data.txt";$/;"	v
DEFAULT_FILE_DATA7	F07_shifted_rotated_griewank.h	/^const string DEFAULT_FILE_DATA7 = "supportData\/griewank_func_data.txt";$/;"	v
DEFAULT_FILE_DATA8	F08_shifted_rotated_ackley_global_opt_bound.h	/^const string DEFAULT_FILE_DATA8 = "supportData\/ackley_func_data.txt";$/;"	v
DEFAULT_FILE_DATA9	F09_shifted_rastrigin.h	/^const string DEFAULT_FILE_DATA9 = "supportData\/rastrigin_func_data.txt";$/;"	v
DEFAULT_FILE_MX_PREFIX10	F10_shifted_rotated_rastrigin.h	/^const string DEFAULT_FILE_MX_PREFIX10 = "supportData\/rastrigin_M_D";$/;"	v
DEFAULT_FILE_MX_PREFIX11	F11_shifted_rotated_weierstrass.h	/^const string DEFAULT_FILE_MX_PREFIX11 = "supportData\/weierstrass_M_D";$/;"	v
DEFAULT_FILE_MX_PREFIX14	F14_shifted_rotated_expanded_scaffer.h	/^const string DEFAULT_FILE_MX_PREFIX14 = "supportData\/E_ScafferF6_M_D";$/;"	v
DEFAULT_FILE_MX_PREFIX16	F16_rotated_hybrid_composition_1.h	/^const string DEFAULT_FILE_MX_PREFIX16 = "supportData\/hybrid_func1_M_D";$/;"	v
DEFAULT_FILE_MX_PREFIX17	F17_rotated_hybrid_composition_1_noise.h	/^const string DEFAULT_FILE_MX_PREFIX17 = "supportData\/hybrid_func1_M_D";$/;"	v
DEFAULT_FILE_MX_PREFIX18	F18_rotated_hybrid_composition_2.h	/^const string DEFAULT_FILE_MX_PREFIX18 = "supportData\/hybrid_func2_M_D";$/;"	v
DEFAULT_FILE_MX_PREFIX19	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^const string DEFAULT_FILE_MX_PREFIX19 = "supportData\/hybrid_func2_M_D";$/;"	v
DEFAULT_FILE_MX_PREFIX20	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^const string DEFAULT_FILE_MX_PREFIX20 = "supportData\/hybrid_func2_M_D";$/;"	v
DEFAULT_FILE_MX_PREFIX21	F21_rotated_hybrid_composition_3.h	/^const string DEFAULT_FILE_MX_PREFIX21 = "supportData\/hybrid_func3_M_D";$/;"	v
DEFAULT_FILE_MX_PREFIX22	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^const string DEFAULT_FILE_MX_PREFIX22 = "supportData\/hybrid_func3_HM_D";$/;"	v
DEFAULT_FILE_MX_PREFIX23	F23_noncontinuous_rotated_hybrid_composition_3.h	/^const string DEFAULT_FILE_MX_PREFIX23 = "supportData\/hybrid_func3_M_D";$/;"	v
DEFAULT_FILE_MX_PREFIX24	F24_rotated_hybrid_composition_4.h	/^const string DEFAULT_FILE_MX_PREFIX24 = "supportData\/hybrid_func4_M_D";$/;"	v
DEFAULT_FILE_MX_PREFIX25	F25_rotated_hybrid_composition_4_bound.h	/^const string DEFAULT_FILE_MX_PREFIX25 = "supportData\/hybrid_func4_M_D";$/;"	v
DEFAULT_FILE_MX_PREFIX3	F03_shifted_rotated_high_cond_elliptic.h	/^const string DEFAULT_FILE_MX_PREFIX3 = "supportData\/elliptic_M_D";$/;"	v
DEFAULT_FILE_MX_PREFIX7	F07_shifted_rotated_griewank.h	/^const string DEFAULT_FILE_MX_PREFIX7 = "supportData\/griewank_M_D";$/;"	v
DEFAULT_FILE_MX_PREFIX8	F08_shifted_rotated_ackley_global_opt_bound.h	/^const string DEFAULT_FILE_MX_PREFIX8 = "supportData\/ackley_M_D";$/;"	v
DEFAULT_FILE_MX_SUFFIX10	F10_shifted_rotated_rastrigin.h	/^const string DEFAULT_FILE_MX_SUFFIX10 = ".txt";$/;"	v
DEFAULT_FILE_MX_SUFFIX11	F11_shifted_rotated_weierstrass.h	/^const string DEFAULT_FILE_MX_SUFFIX11 = ".txt";$/;"	v
DEFAULT_FILE_MX_SUFFIX14	F14_shifted_rotated_expanded_scaffer.h	/^const string DEFAULT_FILE_MX_SUFFIX14 = ".txt";$/;"	v
DEFAULT_FILE_MX_SUFFIX16	F16_rotated_hybrid_composition_1.h	/^const string DEFAULT_FILE_MX_SUFFIX16 = ".txt";$/;"	v
DEFAULT_FILE_MX_SUFFIX17	F17_rotated_hybrid_composition_1_noise.h	/^const string DEFAULT_FILE_MX_SUFFIX17 = ".txt";$/;"	v
DEFAULT_FILE_MX_SUFFIX18	F18_rotated_hybrid_composition_2.h	/^const string DEFAULT_FILE_MX_SUFFIX18 = ".txt";$/;"	v
DEFAULT_FILE_MX_SUFFIX19	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^const string DEFAULT_FILE_MX_SUFFIX19 = ".txt";$/;"	v
DEFAULT_FILE_MX_SUFFIX20	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^const string DEFAULT_FILE_MX_SUFFIX20 = ".txt";$/;"	v
DEFAULT_FILE_MX_SUFFIX21	F21_rotated_hybrid_composition_3.h	/^const string DEFAULT_FILE_MX_SUFFIX21 = ".txt";$/;"	v
DEFAULT_FILE_MX_SUFFIX22	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^const string DEFAULT_FILE_MX_SUFFIX22 = ".txt";$/;"	v
DEFAULT_FILE_MX_SUFFIX23	F23_noncontinuous_rotated_hybrid_composition_3.h	/^const string DEFAULT_FILE_MX_SUFFIX23 = ".txt";$/;"	v
DEFAULT_FILE_MX_SUFFIX24	F24_rotated_hybrid_composition_4.h	/^const string DEFAULT_FILE_MX_SUFFIX24 = ".txt";$/;"	v
DEFAULT_FILE_MX_SUFFIX25	F25_rotated_hybrid_composition_4_bound.h	/^const string DEFAULT_FILE_MX_SUFFIX25 = ".txt";$/;"	v
DEFAULT_FILE_MX_SUFFIX3	F03_shifted_rotated_high_cond_elliptic.h	/^const string DEFAULT_FILE_MX_SUFFIX3 = ".txt";$/;"	v
DEFAULT_FILE_MX_SUFFIX7	F07_shifted_rotated_griewank.h	/^const string DEFAULT_FILE_MX_SUFFIX7 = ".txt";$/;"	v
DEFAULT_FILE_MX_SUFFIX8	F08_shifted_rotated_ackley_global_opt_bound.h	/^const string DEFAULT_FILE_MX_SUFFIX8 = ".txt";$/;"	v
E	cache.hpp	/^		int *E;           \/\/ a collection of empty cache entries$/;"	m	class:cache	access:private
EMPTY	cache.cpp	/^int const EMPTY = -1;$/;"	v
EScafferF6	benchmark.cpp	/^double EScafferF6(double *x,int length) {$/;"	f	signature:(double *x,int length)
EScafferF6	benchmark.h	/^	double EScafferF6(double *x,int length);$/;"	p	signature:(double *x,int length)
EScafferF6NonCont	benchmark.cpp	/^double EScafferF6NonCont(double *x,int length) {$/;"	f	signature:(double *x,int length)
EScafferF6NonCont	benchmark.h	/^	double EScafferF6NonCont(double *x,int length);$/;"	p	signature:(double *x,int length)
Esize	cache.hpp	/^		int Esize;        \/\/ number of elements of E$/;"	m	class:cache	access:private
F01_shifted_sphere	F01_shifted_sphere.cpp	/^F01_shifted_sphere::F01_shifted_sphere(int dimension, double bias)$/;"	f	class:F01_shifted_sphere	signature:(int dimension, double bias)
F01_shifted_sphere	F01_shifted_sphere.cpp	/^F01_shifted_sphere::F01_shifted_sphere(int dimension, double bias, string file_data)$/;"	f	class:F01_shifted_sphere	signature:(int dimension, double bias, string file_data)
F01_shifted_sphere	F01_shifted_sphere.h	/^		F01_shifted_sphere (int dimension, double bias);$/;"	p	class:F01_shifted_sphere	access:public	signature:(int dimension, double bias)
F01_shifted_sphere	F01_shifted_sphere.h	/^		F01_shifted_sphere (int dimension, double bias, string file_data);$/;"	p	class:F01_shifted_sphere	access:public	signature:(int dimension, double bias, string file_data)
F01_shifted_sphere	F01_shifted_sphere.h	/^class F01_shifted_sphere:public test_func{$/;"	c	inherits:test_func
F01_shifted_sphere::F01_shifted_sphere	F01_shifted_sphere.cpp	/^F01_shifted_sphere::F01_shifted_sphere(int dimension, double bias)$/;"	f	class:F01_shifted_sphere	signature:(int dimension, double bias)
F01_shifted_sphere::F01_shifted_sphere	F01_shifted_sphere.cpp	/^F01_shifted_sphere::F01_shifted_sphere(int dimension, double bias, string file_data)$/;"	f	class:F01_shifted_sphere	signature:(int dimension, double bias, string file_data)
F01_shifted_sphere::F01_shifted_sphere	F01_shifted_sphere.h	/^		F01_shifted_sphere (int dimension, double bias);$/;"	p	class:F01_shifted_sphere	access:public	signature:(int dimension, double bias)
F01_shifted_sphere::F01_shifted_sphere	F01_shifted_sphere.h	/^		F01_shifted_sphere (int dimension, double bias, string file_data);$/;"	p	class:F01_shifted_sphere	access:public	signature:(int dimension, double bias, string file_data)
F01_shifted_sphere::f	F01_shifted_sphere.cpp	/^double F01_shifted_sphere::f(double *x,int length)$/;"	f	class:F01_shifted_sphere	signature:(double *x,int length)
F01_shifted_sphere::f	F01_shifted_sphere.h	/^		double f(double *x,int length);$/;"	p	class:F01_shifted_sphere	access:public	signature:(double *x,int length)
F01_shifted_sphere::m_biases	F01_shifted_sphere.h	/^		double *m_biases;$/;"	m	class:F01_shifted_sphere	access:public
F01_shifted_sphere::m_iSqrt	F01_shifted_sphere.h	/^		double *m_iSqrt;$/;"	m	class:F01_shifted_sphere	access:public
F01_shifted_sphere::m_o	F01_shifted_sphere.h	/^		double *m_o;$/;"	m	class:F01_shifted_sphere	access:private
F01_shifted_sphere::m_z	F01_shifted_sphere.h	/^		double *m_z;$/;"	m	class:F01_shifted_sphere	access:private
F02_shifted_schwefel	F02_shifted_schwefel.cpp	/^F02_shifted_schwefel::F02_shifted_schwefel(int dimension, double bias) {$/;"	f	class:F02_shifted_schwefel	signature:(int dimension, double bias)
F02_shifted_schwefel	F02_shifted_schwefel.cpp	/^F02_shifted_schwefel::F02_shifted_schwefel(int dimension, double bias, string file_data) {$/;"	f	class:F02_shifted_schwefel	signature:(int dimension, double bias, string file_data)
F02_shifted_schwefel	F02_shifted_schwefel.h	/^	F02_shifted_schwefel (int dimension, double bias);$/;"	p	class:F02_shifted_schwefel	access:public	signature:(int dimension, double bias)
F02_shifted_schwefel	F02_shifted_schwefel.h	/^	F02_shifted_schwefel (int dimension, double bias, string file_data);$/;"	p	class:F02_shifted_schwefel	access:public	signature:(int dimension, double bias, string file_data)
F02_shifted_schwefel	F02_shifted_schwefel.h	/^class F02_shifted_schwefel:public test_func{$/;"	c	inherits:test_func
F02_shifted_schwefel::F02_shifted_schwefel	F02_shifted_schwefel.cpp	/^F02_shifted_schwefel::F02_shifted_schwefel(int dimension, double bias) {$/;"	f	class:F02_shifted_schwefel	signature:(int dimension, double bias)
F02_shifted_schwefel::F02_shifted_schwefel	F02_shifted_schwefel.cpp	/^F02_shifted_schwefel::F02_shifted_schwefel(int dimension, double bias, string file_data) {$/;"	f	class:F02_shifted_schwefel	signature:(int dimension, double bias, string file_data)
F02_shifted_schwefel::F02_shifted_schwefel	F02_shifted_schwefel.h	/^	F02_shifted_schwefel (int dimension, double bias);$/;"	p	class:F02_shifted_schwefel	access:public	signature:(int dimension, double bias)
F02_shifted_schwefel::F02_shifted_schwefel	F02_shifted_schwefel.h	/^	F02_shifted_schwefel (int dimension, double bias, string file_data);$/;"	p	class:F02_shifted_schwefel	access:public	signature:(int dimension, double bias, string file_data)
F02_shifted_schwefel::f	F02_shifted_schwefel.cpp	/^double F02_shifted_schwefel::f(double *x,int length) {$/;"	f	class:F02_shifted_schwefel	signature:(double *x,int length)
F02_shifted_schwefel::f	F02_shifted_schwefel.h	/^	double f(double *x,int length);$/;"	p	class:F02_shifted_schwefel	access:public	signature:(double *x,int length)
F02_shifted_schwefel::m_o	F02_shifted_schwefel.h	/^	double *m_o;$/;"	m	class:F02_shifted_schwefel	access:private
F02_shifted_schwefel::m_z	F02_shifted_schwefel.h	/^	double *m_z;$/;"	m	class:F02_shifted_schwefel	access:private
F03_shifted_rotated_high_cond_elliptic	F03_shifted_rotated_high_cond_elliptic.cpp	/^F03_shifted_rotated_high_cond_elliptic::F03_shifted_rotated_high_cond_elliptic (int dimension, double bias) {$/;"	f	class:F03_shifted_rotated_high_cond_elliptic	signature:(int dimension, double bias)
F03_shifted_rotated_high_cond_elliptic	F03_shifted_rotated_high_cond_elliptic.cpp	/^F03_shifted_rotated_high_cond_elliptic::F03_shifted_rotated_high_cond_elliptic (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F03_shifted_rotated_high_cond_elliptic	signature:(int dimension, double bias, string file_data, string file_m)
F03_shifted_rotated_high_cond_elliptic	F03_shifted_rotated_high_cond_elliptic.h	/^	F03_shifted_rotated_high_cond_elliptic (int dimension, double bias);$/;"	p	class:F03_shifted_rotated_high_cond_elliptic	access:public	signature:(int dimension, double bias)
F03_shifted_rotated_high_cond_elliptic	F03_shifted_rotated_high_cond_elliptic.h	/^	F03_shifted_rotated_high_cond_elliptic (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F03_shifted_rotated_high_cond_elliptic	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F03_shifted_rotated_high_cond_elliptic	F03_shifted_rotated_high_cond_elliptic.h	/^class F03_shifted_rotated_high_cond_elliptic:public test_func {$/;"	c	inherits:test_func
F03_shifted_rotated_high_cond_elliptic::F03_shifted_rotated_high_cond_elliptic	F03_shifted_rotated_high_cond_elliptic.cpp	/^F03_shifted_rotated_high_cond_elliptic::F03_shifted_rotated_high_cond_elliptic (int dimension, double bias) {$/;"	f	class:F03_shifted_rotated_high_cond_elliptic	signature:(int dimension, double bias)
F03_shifted_rotated_high_cond_elliptic::F03_shifted_rotated_high_cond_elliptic	F03_shifted_rotated_high_cond_elliptic.cpp	/^F03_shifted_rotated_high_cond_elliptic::F03_shifted_rotated_high_cond_elliptic (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F03_shifted_rotated_high_cond_elliptic	signature:(int dimension, double bias, string file_data, string file_m)
F03_shifted_rotated_high_cond_elliptic::F03_shifted_rotated_high_cond_elliptic	F03_shifted_rotated_high_cond_elliptic.h	/^	F03_shifted_rotated_high_cond_elliptic (int dimension, double bias);$/;"	p	class:F03_shifted_rotated_high_cond_elliptic	access:public	signature:(int dimension, double bias)
F03_shifted_rotated_high_cond_elliptic::F03_shifted_rotated_high_cond_elliptic	F03_shifted_rotated_high_cond_elliptic.h	/^	F03_shifted_rotated_high_cond_elliptic (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F03_shifted_rotated_high_cond_elliptic	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F03_shifted_rotated_high_cond_elliptic::constant	F03_shifted_rotated_high_cond_elliptic.h	/^	double constant;$/;"	m	class:F03_shifted_rotated_high_cond_elliptic	access:private
F03_shifted_rotated_high_cond_elliptic::f	F03_shifted_rotated_high_cond_elliptic.cpp	/^double F03_shifted_rotated_high_cond_elliptic::f(double *x,int length) {$/;"	f	class:F03_shifted_rotated_high_cond_elliptic	signature:(double *x,int length)
F03_shifted_rotated_high_cond_elliptic::f	F03_shifted_rotated_high_cond_elliptic.h	/^	double f(double *x,int length);$/;"	p	class:F03_shifted_rotated_high_cond_elliptic	access:public	signature:(double *x,int length)
F03_shifted_rotated_high_cond_elliptic::m_matrix	F03_shifted_rotated_high_cond_elliptic.h	/^	double **m_matrix;$/;"	m	class:F03_shifted_rotated_high_cond_elliptic	access:private
F03_shifted_rotated_high_cond_elliptic::m_o	F03_shifted_rotated_high_cond_elliptic.h	/^	double *m_o;$/;"	m	class:F03_shifted_rotated_high_cond_elliptic	access:private
F03_shifted_rotated_high_cond_elliptic::m_z	F03_shifted_rotated_high_cond_elliptic.h	/^	double *m_z;$/;"	m	class:F03_shifted_rotated_high_cond_elliptic	access:private
F03_shifted_rotated_high_cond_elliptic::m_zM	F03_shifted_rotated_high_cond_elliptic.h	/^	double *m_zM;$/;"	m	class:F03_shifted_rotated_high_cond_elliptic	access:private
F04_shifted_schwefel_noise	F04_shifted_schwefel_noise.cpp	/^F04_shifted_schwefel_noise::F04_shifted_schwefel_noise (int dimension, double bias) {$/;"	f	class:F04_shifted_schwefel_noise	signature:(int dimension, double bias)
F04_shifted_schwefel_noise	F04_shifted_schwefel_noise.cpp	/^F04_shifted_schwefel_noise::F04_shifted_schwefel_noise (int dimension, double bias, string file_data) {$/;"	f	class:F04_shifted_schwefel_noise	signature:(int dimension, double bias, string file_data)
F04_shifted_schwefel_noise	F04_shifted_schwefel_noise.h	/^	F04_shifted_schwefel_noise (int dimension, double bias);$/;"	p	class:F04_shifted_schwefel_noise	access:public	signature:(int dimension, double bias)
F04_shifted_schwefel_noise	F04_shifted_schwefel_noise.h	/^	F04_shifted_schwefel_noise (int dimension, double bias, string file_data);$/;"	p	class:F04_shifted_schwefel_noise	access:public	signature:(int dimension, double bias, string file_data)
F04_shifted_schwefel_noise	F04_shifted_schwefel_noise.h	/^class F04_shifted_schwefel_noise:public test_func {$/;"	c	inherits:test_func
F04_shifted_schwefel_noise::F04_shifted_schwefel_noise	F04_shifted_schwefel_noise.cpp	/^F04_shifted_schwefel_noise::F04_shifted_schwefel_noise (int dimension, double bias) {$/;"	f	class:F04_shifted_schwefel_noise	signature:(int dimension, double bias)
F04_shifted_schwefel_noise::F04_shifted_schwefel_noise	F04_shifted_schwefel_noise.cpp	/^F04_shifted_schwefel_noise::F04_shifted_schwefel_noise (int dimension, double bias, string file_data) {$/;"	f	class:F04_shifted_schwefel_noise	signature:(int dimension, double bias, string file_data)
F04_shifted_schwefel_noise::F04_shifted_schwefel_noise	F04_shifted_schwefel_noise.h	/^	F04_shifted_schwefel_noise (int dimension, double bias);$/;"	p	class:F04_shifted_schwefel_noise	access:public	signature:(int dimension, double bias)
F04_shifted_schwefel_noise::F04_shifted_schwefel_noise	F04_shifted_schwefel_noise.h	/^	F04_shifted_schwefel_noise (int dimension, double bias, string file_data);$/;"	p	class:F04_shifted_schwefel_noise	access:public	signature:(int dimension, double bias, string file_data)
F04_shifted_schwefel_noise::f	F04_shifted_schwefel_noise.cpp	/^double F04_shifted_schwefel_noise::f(double *x,int length) {$/;"	f	class:F04_shifted_schwefel_noise	signature:(double *x,int length)
F04_shifted_schwefel_noise::f	F04_shifted_schwefel_noise.h	/^	double f(double *x,int length);$/;"	p	class:F04_shifted_schwefel_noise	access:public	signature:(double *x,int length)
F04_shifted_schwefel_noise::m_o	F04_shifted_schwefel_noise.h	/^	double *m_o;$/;"	m	class:F04_shifted_schwefel_noise	access:private
F04_shifted_schwefel_noise::m_z	F04_shifted_schwefel_noise.h	/^	double *m_z;$/;"	m	class:F04_shifted_schwefel_noise	access:private
F05_schwefel_global_opt_bound	F05_schwefel_global_opt_bound.cpp	/^F05_schwefel_global_opt_bound::F05_schwefel_global_opt_bound (int dimension, double bias) {$/;"	f	class:F05_schwefel_global_opt_bound	signature:(int dimension, double bias)
F05_schwefel_global_opt_bound	F05_schwefel_global_opt_bound.cpp	/^F05_schwefel_global_opt_bound::F05_schwefel_global_opt_bound (int dimension, double bias, string file_data) {$/;"	f	class:F05_schwefel_global_opt_bound	signature:(int dimension, double bias, string file_data)
F05_schwefel_global_opt_bound	F05_schwefel_global_opt_bound.h	/^	F05_schwefel_global_opt_bound (int dimension, double bias);$/;"	p	class:F05_schwefel_global_opt_bound	access:public	signature:(int dimension, double bias)
F05_schwefel_global_opt_bound	F05_schwefel_global_opt_bound.h	/^	F05_schwefel_global_opt_bound (int dimension, double bias, string file_data);$/;"	p	class:F05_schwefel_global_opt_bound	access:public	signature:(int dimension, double bias, string file_data)
F05_schwefel_global_opt_bound	F05_schwefel_global_opt_bound.h	/^class F05_schwefel_global_opt_bound:public test_func {$/;"	c	inherits:test_func
F05_schwefel_global_opt_bound::F05_schwefel_global_opt_bound	F05_schwefel_global_opt_bound.cpp	/^F05_schwefel_global_opt_bound::F05_schwefel_global_opt_bound (int dimension, double bias) {$/;"	f	class:F05_schwefel_global_opt_bound	signature:(int dimension, double bias)
F05_schwefel_global_opt_bound::F05_schwefel_global_opt_bound	F05_schwefel_global_opt_bound.cpp	/^F05_schwefel_global_opt_bound::F05_schwefel_global_opt_bound (int dimension, double bias, string file_data) {$/;"	f	class:F05_schwefel_global_opt_bound	signature:(int dimension, double bias, string file_data)
F05_schwefel_global_opt_bound::F05_schwefel_global_opt_bound	F05_schwefel_global_opt_bound.h	/^	F05_schwefel_global_opt_bound (int dimension, double bias);$/;"	p	class:F05_schwefel_global_opt_bound	access:public	signature:(int dimension, double bias)
F05_schwefel_global_opt_bound::F05_schwefel_global_opt_bound	F05_schwefel_global_opt_bound.h	/^	F05_schwefel_global_opt_bound (int dimension, double bias, string file_data);$/;"	p	class:F05_schwefel_global_opt_bound	access:public	signature:(int dimension, double bias, string file_data)
F05_schwefel_global_opt_bound::f	F05_schwefel_global_opt_bound.cpp	/^double F05_schwefel_global_opt_bound::f(double *x,int length) {$/;"	f	class:F05_schwefel_global_opt_bound	signature:(double *x,int length)
F05_schwefel_global_opt_bound::f	F05_schwefel_global_opt_bound.h	/^	double f(double *x,int length);$/;"	p	class:F05_schwefel_global_opt_bound	access:public	signature:(double *x,int length)
F05_schwefel_global_opt_bound::m_A	F05_schwefel_global_opt_bound.h	/^	double **m_A;$/;"	m	class:F05_schwefel_global_opt_bound	access:private
F05_schwefel_global_opt_bound::m_B	F05_schwefel_global_opt_bound.h	/^	double *m_B;$/;"	m	class:F05_schwefel_global_opt_bound	access:private
F05_schwefel_global_opt_bound::m_o	F05_schwefel_global_opt_bound.h	/^	double *m_o;$/;"	m	class:F05_schwefel_global_opt_bound	access:private
F05_schwefel_global_opt_bound::m_z	F05_schwefel_global_opt_bound.h	/^	double *m_z;$/;"	m	class:F05_schwefel_global_opt_bound	access:private
F06_shifted_rosenbrock	F06_shifted_rosenbrock.cpp	/^F06_shifted_rosenbrock::F06_shifted_rosenbrock (int dimension, double bias) {$/;"	f	class:F06_shifted_rosenbrock	signature:(int dimension, double bias)
F06_shifted_rosenbrock	F06_shifted_rosenbrock.cpp	/^F06_shifted_rosenbrock::F06_shifted_rosenbrock (int dimension, double bias, string file_data) {$/;"	f	class:F06_shifted_rosenbrock	signature:(int dimension, double bias, string file_data)
F06_shifted_rosenbrock	F06_shifted_rosenbrock.h	/^	F06_shifted_rosenbrock (int dimension, double bias);$/;"	p	class:F06_shifted_rosenbrock	access:public	signature:(int dimension, double bias)
F06_shifted_rosenbrock	F06_shifted_rosenbrock.h	/^	F06_shifted_rosenbrock (int dimension, double bias, string file_data);$/;"	p	class:F06_shifted_rosenbrock	access:public	signature:(int dimension, double bias, string file_data)
F06_shifted_rosenbrock	F06_shifted_rosenbrock.h	/^class F06_shifted_rosenbrock:public test_func {$/;"	c	inherits:test_func
F06_shifted_rosenbrock::F06_shifted_rosenbrock	F06_shifted_rosenbrock.cpp	/^F06_shifted_rosenbrock::F06_shifted_rosenbrock (int dimension, double bias) {$/;"	f	class:F06_shifted_rosenbrock	signature:(int dimension, double bias)
F06_shifted_rosenbrock::F06_shifted_rosenbrock	F06_shifted_rosenbrock.cpp	/^F06_shifted_rosenbrock::F06_shifted_rosenbrock (int dimension, double bias, string file_data) {$/;"	f	class:F06_shifted_rosenbrock	signature:(int dimension, double bias, string file_data)
F06_shifted_rosenbrock::F06_shifted_rosenbrock	F06_shifted_rosenbrock.h	/^	F06_shifted_rosenbrock (int dimension, double bias);$/;"	p	class:F06_shifted_rosenbrock	access:public	signature:(int dimension, double bias)
F06_shifted_rosenbrock::F06_shifted_rosenbrock	F06_shifted_rosenbrock.h	/^	F06_shifted_rosenbrock (int dimension, double bias, string file_data);$/;"	p	class:F06_shifted_rosenbrock	access:public	signature:(int dimension, double bias, string file_data)
F06_shifted_rosenbrock::f	F06_shifted_rosenbrock.cpp	/^double F06_shifted_rosenbrock::f(double *x,int length) {$/;"	f	class:F06_shifted_rosenbrock	signature:(double *x,int length)
F06_shifted_rosenbrock::f	F06_shifted_rosenbrock.h	/^	double f(double *x,int length);$/;"	p	class:F06_shifted_rosenbrock	access:public	signature:(double *x,int length)
F06_shifted_rosenbrock::m_o	F06_shifted_rosenbrock.h	/^	double *m_o;$/;"	m	class:F06_shifted_rosenbrock	access:private
F06_shifted_rosenbrock::m_z	F06_shifted_rosenbrock.h	/^	double *m_z;$/;"	m	class:F06_shifted_rosenbrock	access:private
F07_shifted_rotated_griewank	F07_shifted_rotated_griewank.cpp	/^F07_shifted_rotated_griewank::F07_shifted_rotated_griewank (int dimension, double bias) {$/;"	f	class:F07_shifted_rotated_griewank	signature:(int dimension, double bias)
F07_shifted_rotated_griewank	F07_shifted_rotated_griewank.cpp	/^F07_shifted_rotated_griewank::F07_shifted_rotated_griewank (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F07_shifted_rotated_griewank	signature:(int dimension, double bias, string file_data, string file_m)
F07_shifted_rotated_griewank	F07_shifted_rotated_griewank.h	/^	F07_shifted_rotated_griewank (int dimension, double bias);$/;"	p	class:F07_shifted_rotated_griewank	access:public	signature:(int dimension, double bias)
F07_shifted_rotated_griewank	F07_shifted_rotated_griewank.h	/^	F07_shifted_rotated_griewank (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F07_shifted_rotated_griewank	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F07_shifted_rotated_griewank	F07_shifted_rotated_griewank.h	/^class F07_shifted_rotated_griewank:public test_func {$/;"	c	inherits:test_func
F07_shifted_rotated_griewank::F07_shifted_rotated_griewank	F07_shifted_rotated_griewank.cpp	/^F07_shifted_rotated_griewank::F07_shifted_rotated_griewank (int dimension, double bias) {$/;"	f	class:F07_shifted_rotated_griewank	signature:(int dimension, double bias)
F07_shifted_rotated_griewank::F07_shifted_rotated_griewank	F07_shifted_rotated_griewank.cpp	/^F07_shifted_rotated_griewank::F07_shifted_rotated_griewank (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F07_shifted_rotated_griewank	signature:(int dimension, double bias, string file_data, string file_m)
F07_shifted_rotated_griewank::F07_shifted_rotated_griewank	F07_shifted_rotated_griewank.h	/^	F07_shifted_rotated_griewank (int dimension, double bias);$/;"	p	class:F07_shifted_rotated_griewank	access:public	signature:(int dimension, double bias)
F07_shifted_rotated_griewank::F07_shifted_rotated_griewank	F07_shifted_rotated_griewank.h	/^	F07_shifted_rotated_griewank (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F07_shifted_rotated_griewank	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F07_shifted_rotated_griewank::f	F07_shifted_rotated_griewank.cpp	/^double F07_shifted_rotated_griewank::f(double *x,int length) {$/;"	f	class:F07_shifted_rotated_griewank	signature:(double *x,int length)
F07_shifted_rotated_griewank::f	F07_shifted_rotated_griewank.h	/^	double f(double *x,int length);$/;"	p	class:F07_shifted_rotated_griewank	access:public	signature:(double *x,int length)
F07_shifted_rotated_griewank::m_matrix	F07_shifted_rotated_griewank.h	/^	double **m_matrix;$/;"	m	class:F07_shifted_rotated_griewank	access:private
F07_shifted_rotated_griewank::m_o	F07_shifted_rotated_griewank.h	/^	double *m_o;$/;"	m	class:F07_shifted_rotated_griewank	access:private
F07_shifted_rotated_griewank::m_z	F07_shifted_rotated_griewank.h	/^	double *m_z;$/;"	m	class:F07_shifted_rotated_griewank	access:private
F07_shifted_rotated_griewank::m_zM	F07_shifted_rotated_griewank.h	/^	double *m_zM;$/;"	m	class:F07_shifted_rotated_griewank	access:private
F08_shifted_rotated_ackley_global_opt_bound	F08_shifted_rotated_ackley_global_opt_bound.cpp	/^F08_shifted_rotated_ackley_global_opt_bound::F08_shifted_rotated_ackley_global_opt_bound (int dimension, double bias) {$/;"	f	class:F08_shifted_rotated_ackley_global_opt_bound	signature:(int dimension, double bias)
F08_shifted_rotated_ackley_global_opt_bound	F08_shifted_rotated_ackley_global_opt_bound.cpp	/^F08_shifted_rotated_ackley_global_opt_bound::F08_shifted_rotated_ackley_global_opt_bound (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F08_shifted_rotated_ackley_global_opt_bound	signature:(int dimension, double bias, string file_data, string file_m)
F08_shifted_rotated_ackley_global_opt_bound	F08_shifted_rotated_ackley_global_opt_bound.h	/^	F08_shifted_rotated_ackley_global_opt_bound (int dimension, double bias);$/;"	p	class:F08_shifted_rotated_ackley_global_opt_bound	access:public	signature:(int dimension, double bias)
F08_shifted_rotated_ackley_global_opt_bound	F08_shifted_rotated_ackley_global_opt_bound.h	/^	F08_shifted_rotated_ackley_global_opt_bound (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F08_shifted_rotated_ackley_global_opt_bound	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F08_shifted_rotated_ackley_global_opt_bound	F08_shifted_rotated_ackley_global_opt_bound.h	/^class F08_shifted_rotated_ackley_global_opt_bound:public test_func {$/;"	c	inherits:test_func
F08_shifted_rotated_ackley_global_opt_bound::F08_shifted_rotated_ackley_global_opt_bound	F08_shifted_rotated_ackley_global_opt_bound.cpp	/^F08_shifted_rotated_ackley_global_opt_bound::F08_shifted_rotated_ackley_global_opt_bound (int dimension, double bias) {$/;"	f	class:F08_shifted_rotated_ackley_global_opt_bound	signature:(int dimension, double bias)
F08_shifted_rotated_ackley_global_opt_bound::F08_shifted_rotated_ackley_global_opt_bound	F08_shifted_rotated_ackley_global_opt_bound.cpp	/^F08_shifted_rotated_ackley_global_opt_bound::F08_shifted_rotated_ackley_global_opt_bound (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F08_shifted_rotated_ackley_global_opt_bound	signature:(int dimension, double bias, string file_data, string file_m)
F08_shifted_rotated_ackley_global_opt_bound::F08_shifted_rotated_ackley_global_opt_bound	F08_shifted_rotated_ackley_global_opt_bound.h	/^	F08_shifted_rotated_ackley_global_opt_bound (int dimension, double bias);$/;"	p	class:F08_shifted_rotated_ackley_global_opt_bound	access:public	signature:(int dimension, double bias)
F08_shifted_rotated_ackley_global_opt_bound::F08_shifted_rotated_ackley_global_opt_bound	F08_shifted_rotated_ackley_global_opt_bound.h	/^	F08_shifted_rotated_ackley_global_opt_bound (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F08_shifted_rotated_ackley_global_opt_bound	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F08_shifted_rotated_ackley_global_opt_bound::f	F08_shifted_rotated_ackley_global_opt_bound.cpp	/^double F08_shifted_rotated_ackley_global_opt_bound::f(double *x,int length) {$/;"	f	class:F08_shifted_rotated_ackley_global_opt_bound	signature:(double *x,int length)
F08_shifted_rotated_ackley_global_opt_bound::f	F08_shifted_rotated_ackley_global_opt_bound.h	/^	double f(double *x,int length);$/;"	p	class:F08_shifted_rotated_ackley_global_opt_bound	access:public	signature:(double *x,int length)
F08_shifted_rotated_ackley_global_opt_bound::m_matrix	F08_shifted_rotated_ackley_global_opt_bound.h	/^	double **m_matrix;$/;"	m	class:F08_shifted_rotated_ackley_global_opt_bound	access:private
F08_shifted_rotated_ackley_global_opt_bound::m_o	F08_shifted_rotated_ackley_global_opt_bound.h	/^	double *m_o;$/;"	m	class:F08_shifted_rotated_ackley_global_opt_bound	access:private
F08_shifted_rotated_ackley_global_opt_bound::m_z	F08_shifted_rotated_ackley_global_opt_bound.h	/^	double *m_z;$/;"	m	class:F08_shifted_rotated_ackley_global_opt_bound	access:private
F08_shifted_rotated_ackley_global_opt_bound::m_zM	F08_shifted_rotated_ackley_global_opt_bound.h	/^	double *m_zM;$/;"	m	class:F08_shifted_rotated_ackley_global_opt_bound	access:private
F09_shifted_rastrigin	F09_shifted_rastrigin.cpp	/^F09_shifted_rastrigin::F09_shifted_rastrigin (int dimension, double bias) {$/;"	f	class:F09_shifted_rastrigin	signature:(int dimension, double bias)
F09_shifted_rastrigin	F09_shifted_rastrigin.cpp	/^F09_shifted_rastrigin::F09_shifted_rastrigin (int dimension, double bias, string file_data) {$/;"	f	class:F09_shifted_rastrigin	signature:(int dimension, double bias, string file_data)
F09_shifted_rastrigin	F09_shifted_rastrigin.h	/^	F09_shifted_rastrigin (int dimension, double bias);$/;"	p	class:F09_shifted_rastrigin	access:public	signature:(int dimension, double bias)
F09_shifted_rastrigin	F09_shifted_rastrigin.h	/^	F09_shifted_rastrigin (int dimension, double bias, string file_data);$/;"	p	class:F09_shifted_rastrigin	access:public	signature:(int dimension, double bias, string file_data)
F09_shifted_rastrigin	F09_shifted_rastrigin.h	/^class F09_shifted_rastrigin:public test_func {$/;"	c	inherits:test_func
F09_shifted_rastrigin::F09_shifted_rastrigin	F09_shifted_rastrigin.cpp	/^F09_shifted_rastrigin::F09_shifted_rastrigin (int dimension, double bias) {$/;"	f	class:F09_shifted_rastrigin	signature:(int dimension, double bias)
F09_shifted_rastrigin::F09_shifted_rastrigin	F09_shifted_rastrigin.cpp	/^F09_shifted_rastrigin::F09_shifted_rastrigin (int dimension, double bias, string file_data) {$/;"	f	class:F09_shifted_rastrigin	signature:(int dimension, double bias, string file_data)
F09_shifted_rastrigin::F09_shifted_rastrigin	F09_shifted_rastrigin.h	/^	F09_shifted_rastrigin (int dimension, double bias);$/;"	p	class:F09_shifted_rastrigin	access:public	signature:(int dimension, double bias)
F09_shifted_rastrigin::F09_shifted_rastrigin	F09_shifted_rastrigin.h	/^	F09_shifted_rastrigin (int dimension, double bias, string file_data);$/;"	p	class:F09_shifted_rastrigin	access:public	signature:(int dimension, double bias, string file_data)
F09_shifted_rastrigin::f	F09_shifted_rastrigin.cpp	/^double F09_shifted_rastrigin::f(double *x,int length) {$/;"	f	class:F09_shifted_rastrigin	signature:(double *x,int length)
F09_shifted_rastrigin::f	F09_shifted_rastrigin.h	/^	double f(double *x,int length);$/;"	p	class:F09_shifted_rastrigin	access:public	signature:(double *x,int length)
F09_shifted_rastrigin::m_o	F09_shifted_rastrigin.h	/^	double *m_o;$/;"	m	class:F09_shifted_rastrigin	access:private
F09_shifted_rastrigin::m_z	F09_shifted_rastrigin.h	/^	double *m_z;$/;"	m	class:F09_shifted_rastrigin	access:private
F10_shifted_rotated_rastrigin	F10_shifted_rotated_rastrigin.cpp	/^F10_shifted_rotated_rastrigin::F10_shifted_rotated_rastrigin (int dimension, double bias) {$/;"	f	class:F10_shifted_rotated_rastrigin	signature:(int dimension, double bias)
F10_shifted_rotated_rastrigin	F10_shifted_rotated_rastrigin.cpp	/^F10_shifted_rotated_rastrigin::F10_shifted_rotated_rastrigin (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F10_shifted_rotated_rastrigin	signature:(int dimension, double bias, string file_data, string file_m)
F10_shifted_rotated_rastrigin	F10_shifted_rotated_rastrigin.h	/^	F10_shifted_rotated_rastrigin (int dimension, double bias);$/;"	p	class:F10_shifted_rotated_rastrigin	access:public	signature:(int dimension, double bias)
F10_shifted_rotated_rastrigin	F10_shifted_rotated_rastrigin.h	/^	F10_shifted_rotated_rastrigin (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F10_shifted_rotated_rastrigin	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F10_shifted_rotated_rastrigin	F10_shifted_rotated_rastrigin.h	/^class F10_shifted_rotated_rastrigin:public test_func {$/;"	c	inherits:test_func
F10_shifted_rotated_rastrigin::F10_shifted_rotated_rastrigin	F10_shifted_rotated_rastrigin.cpp	/^F10_shifted_rotated_rastrigin::F10_shifted_rotated_rastrigin (int dimension, double bias) {$/;"	f	class:F10_shifted_rotated_rastrigin	signature:(int dimension, double bias)
F10_shifted_rotated_rastrigin::F10_shifted_rotated_rastrigin	F10_shifted_rotated_rastrigin.cpp	/^F10_shifted_rotated_rastrigin::F10_shifted_rotated_rastrigin (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F10_shifted_rotated_rastrigin	signature:(int dimension, double bias, string file_data, string file_m)
F10_shifted_rotated_rastrigin::F10_shifted_rotated_rastrigin	F10_shifted_rotated_rastrigin.h	/^	F10_shifted_rotated_rastrigin (int dimension, double bias);$/;"	p	class:F10_shifted_rotated_rastrigin	access:public	signature:(int dimension, double bias)
F10_shifted_rotated_rastrigin::F10_shifted_rotated_rastrigin	F10_shifted_rotated_rastrigin.h	/^	F10_shifted_rotated_rastrigin (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F10_shifted_rotated_rastrigin	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F10_shifted_rotated_rastrigin::f	F10_shifted_rotated_rastrigin.cpp	/^double F10_shifted_rotated_rastrigin::f(double *x,int length) {$/;"	f	class:F10_shifted_rotated_rastrigin	signature:(double *x,int length)
F10_shifted_rotated_rastrigin::f	F10_shifted_rotated_rastrigin.h	/^	double f(double* x,int length);$/;"	p	class:F10_shifted_rotated_rastrigin	access:public	signature:(double* x,int length)
F10_shifted_rotated_rastrigin::m_matrix	F10_shifted_rotated_rastrigin.h	/^	double **m_matrix;$/;"	m	class:F10_shifted_rotated_rastrigin	access:private
F10_shifted_rotated_rastrigin::m_o	F10_shifted_rotated_rastrigin.h	/^	double *m_o;$/;"	m	class:F10_shifted_rotated_rastrigin	access:private
F10_shifted_rotated_rastrigin::m_z	F10_shifted_rotated_rastrigin.h	/^	double *m_z;$/;"	m	class:F10_shifted_rotated_rastrigin	access:private
F10_shifted_rotated_rastrigin::m_zM	F10_shifted_rotated_rastrigin.h	/^	double *m_zM;$/;"	m	class:F10_shifted_rotated_rastrigin	access:private
F11_shifted_rotated_weierstrass	F11_shifted_rotated_weierstrass.cpp	/^F11_shifted_rotated_weierstrass::F11_shifted_rotated_weierstrass (int dimension, double bias) {$/;"	f	class:F11_shifted_rotated_weierstrass	signature:(int dimension, double bias)
F11_shifted_rotated_weierstrass	F11_shifted_rotated_weierstrass.cpp	/^F11_shifted_rotated_weierstrass::F11_shifted_rotated_weierstrass (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F11_shifted_rotated_weierstrass	signature:(int dimension, double bias, string file_data, string file_m)
F11_shifted_rotated_weierstrass	F11_shifted_rotated_weierstrass.h	/^		F11_shifted_rotated_weierstrass (int dimension, double bias);$/;"	p	class:F11_shifted_rotated_weierstrass	access:public	signature:(int dimension, double bias)
F11_shifted_rotated_weierstrass	F11_shifted_rotated_weierstrass.h	/^		F11_shifted_rotated_weierstrass (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F11_shifted_rotated_weierstrass	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F11_shifted_rotated_weierstrass	F11_shifted_rotated_weierstrass.h	/^class F11_shifted_rotated_weierstrass:public test_func {$/;"	c	inherits:test_func
F11_shifted_rotated_weierstrass::F11_shifted_rotated_weierstrass	F11_shifted_rotated_weierstrass.cpp	/^F11_shifted_rotated_weierstrass::F11_shifted_rotated_weierstrass (int dimension, double bias) {$/;"	f	class:F11_shifted_rotated_weierstrass	signature:(int dimension, double bias)
F11_shifted_rotated_weierstrass::F11_shifted_rotated_weierstrass	F11_shifted_rotated_weierstrass.cpp	/^F11_shifted_rotated_weierstrass::F11_shifted_rotated_weierstrass (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F11_shifted_rotated_weierstrass	signature:(int dimension, double bias, string file_data, string file_m)
F11_shifted_rotated_weierstrass::F11_shifted_rotated_weierstrass	F11_shifted_rotated_weierstrass.h	/^		F11_shifted_rotated_weierstrass (int dimension, double bias);$/;"	p	class:F11_shifted_rotated_weierstrass	access:public	signature:(int dimension, double bias)
F11_shifted_rotated_weierstrass::F11_shifted_rotated_weierstrass	F11_shifted_rotated_weierstrass.h	/^		F11_shifted_rotated_weierstrass (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F11_shifted_rotated_weierstrass	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F11_shifted_rotated_weierstrass::Kmax	F11_shifted_rotated_weierstrass.h	/^		static const int Kmax = 20;$/;"	m	class:F11_shifted_rotated_weierstrass	access:public
F11_shifted_rotated_weierstrass::f	F11_shifted_rotated_weierstrass.cpp	/^double F11_shifted_rotated_weierstrass::f(double *x,int length) {$/;"	f	class:F11_shifted_rotated_weierstrass	signature:(double *x,int length)
F11_shifted_rotated_weierstrass::f	F11_shifted_rotated_weierstrass.h	/^		double f(double *x,int length);$/;"	p	class:F11_shifted_rotated_weierstrass	access:public	signature:(double *x,int length)
F11_shifted_rotated_weierstrass::m_matrix	F11_shifted_rotated_weierstrass.h	/^		double **m_matrix;$/;"	m	class:F11_shifted_rotated_weierstrass	access:private
F11_shifted_rotated_weierstrass::m_o	F11_shifted_rotated_weierstrass.h	/^		double *m_o;$/;"	m	class:F11_shifted_rotated_weierstrass	access:private
F11_shifted_rotated_weierstrass::m_z	F11_shifted_rotated_weierstrass.h	/^		double *m_z;$/;"	m	class:F11_shifted_rotated_weierstrass	access:private
F11_shifted_rotated_weierstrass::m_zM	F11_shifted_rotated_weierstrass.h	/^		double *m_zM;$/;"	m	class:F11_shifted_rotated_weierstrass	access:private
F12_schwefel	F12_schwefel.cpp	/^F12_schwefel::F12_schwefel (int dimension, double bias) {$/;"	f	class:F12_schwefel	signature:(int dimension, double bias)
F12_schwefel	F12_schwefel.cpp	/^F12_schwefel::F12_schwefel (int dimension, double bias, string file_data) {$/;"	f	class:F12_schwefel	signature:(int dimension, double bias, string file_data)
F12_schwefel	F12_schwefel.h	/^	F12_schwefel (int dimension, double bias);$/;"	p	class:F12_schwefel	access:public	signature:(int dimension, double bias)
F12_schwefel	F12_schwefel.h	/^	F12_schwefel (int dimension, double bias, string file_data);$/;"	p	class:F12_schwefel	access:public	signature:(int dimension, double bias, string file_data)
F12_schwefel	F12_schwefel.h	/^class F12_schwefel:public test_func {$/;"	c	inherits:test_func
F12_schwefel::F12_schwefel	F12_schwefel.cpp	/^F12_schwefel::F12_schwefel (int dimension, double bias) {$/;"	f	class:F12_schwefel	signature:(int dimension, double bias)
F12_schwefel::F12_schwefel	F12_schwefel.cpp	/^F12_schwefel::F12_schwefel (int dimension, double bias, string file_data) {$/;"	f	class:F12_schwefel	signature:(int dimension, double bias, string file_data)
F12_schwefel::F12_schwefel	F12_schwefel.h	/^	F12_schwefel (int dimension, double bias);$/;"	p	class:F12_schwefel	access:public	signature:(int dimension, double bias)
F12_schwefel::F12_schwefel	F12_schwefel.h	/^	F12_schwefel (int dimension, double bias, string file_data);$/;"	p	class:F12_schwefel	access:public	signature:(int dimension, double bias, string file_data)
F12_schwefel::f	F12_schwefel.cpp	/^double F12_schwefel::f(double *x,int length) {$/;"	f	class:F12_schwefel	signature:(double *x,int length)
F12_schwefel::f	F12_schwefel.h	/^	double f(double *x,int length);$/;"	p	class:F12_schwefel	access:public	signature:(double *x,int length)
F12_schwefel::m_A	F12_schwefel.h	/^	double *m_A;$/;"	m	class:F12_schwefel	access:private
F12_schwefel::m_B	F12_schwefel.h	/^	double *m_B;$/;"	m	class:F12_schwefel	access:private
F12_schwefel::m_a	F12_schwefel.h	/^	double **m_a;$/;"	m	class:F12_schwefel	access:private
F12_schwefel::m_b	F12_schwefel.h	/^	double **m_b;$/;"	m	class:F12_schwefel	access:private
F12_schwefel::m_o	F12_schwefel.h	/^	double *m_o;$/;"	m	class:F12_schwefel	access:private
F13_shifted_expanded_griewank_rosenbrock	F13_shifted_expanded_griewank_rosenbrock.cpp	/^F13_shifted_expanded_griewank_rosenbrock::F13_shifted_expanded_griewank_rosenbrock (int dimension, double bias) {$/;"	f	class:F13_shifted_expanded_griewank_rosenbrock	signature:(int dimension, double bias)
F13_shifted_expanded_griewank_rosenbrock	F13_shifted_expanded_griewank_rosenbrock.cpp	/^F13_shifted_expanded_griewank_rosenbrock::F13_shifted_expanded_griewank_rosenbrock (int dimension, double bias, string file_data) {$/;"	f	class:F13_shifted_expanded_griewank_rosenbrock	signature:(int dimension, double bias, string file_data)
F13_shifted_expanded_griewank_rosenbrock	F13_shifted_expanded_griewank_rosenbrock.h	/^	F13_shifted_expanded_griewank_rosenbrock (int dimension, double bias);$/;"	p	class:F13_shifted_expanded_griewank_rosenbrock	access:public	signature:(int dimension, double bias)
F13_shifted_expanded_griewank_rosenbrock	F13_shifted_expanded_griewank_rosenbrock.h	/^	F13_shifted_expanded_griewank_rosenbrock (int dimension, double bias, string file_data);$/;"	p	class:F13_shifted_expanded_griewank_rosenbrock	access:public	signature:(int dimension, double bias, string file_data)
F13_shifted_expanded_griewank_rosenbrock	F13_shifted_expanded_griewank_rosenbrock.h	/^class F13_shifted_expanded_griewank_rosenbrock:public test_func {$/;"	c	inherits:test_func
F13_shifted_expanded_griewank_rosenbrock::F13_shifted_expanded_griewank_rosenbrock	F13_shifted_expanded_griewank_rosenbrock.cpp	/^F13_shifted_expanded_griewank_rosenbrock::F13_shifted_expanded_griewank_rosenbrock (int dimension, double bias) {$/;"	f	class:F13_shifted_expanded_griewank_rosenbrock	signature:(int dimension, double bias)
F13_shifted_expanded_griewank_rosenbrock::F13_shifted_expanded_griewank_rosenbrock	F13_shifted_expanded_griewank_rosenbrock.cpp	/^F13_shifted_expanded_griewank_rosenbrock::F13_shifted_expanded_griewank_rosenbrock (int dimension, double bias, string file_data) {$/;"	f	class:F13_shifted_expanded_griewank_rosenbrock	signature:(int dimension, double bias, string file_data)
F13_shifted_expanded_griewank_rosenbrock::F13_shifted_expanded_griewank_rosenbrock	F13_shifted_expanded_griewank_rosenbrock.h	/^	F13_shifted_expanded_griewank_rosenbrock (int dimension, double bias);$/;"	p	class:F13_shifted_expanded_griewank_rosenbrock	access:public	signature:(int dimension, double bias)
F13_shifted_expanded_griewank_rosenbrock::F13_shifted_expanded_griewank_rosenbrock	F13_shifted_expanded_griewank_rosenbrock.h	/^	F13_shifted_expanded_griewank_rosenbrock (int dimension, double bias, string file_data);$/;"	p	class:F13_shifted_expanded_griewank_rosenbrock	access:public	signature:(int dimension, double bias, string file_data)
F13_shifted_expanded_griewank_rosenbrock::f	F13_shifted_expanded_griewank_rosenbrock.cpp	/^double F13_shifted_expanded_griewank_rosenbrock::f(double *x,int length) {$/;"	f	class:F13_shifted_expanded_griewank_rosenbrock	signature:(double *x,int length)
F13_shifted_expanded_griewank_rosenbrock::f	F13_shifted_expanded_griewank_rosenbrock.h	/^	double f(double *x,int length);$/;"	p	class:F13_shifted_expanded_griewank_rosenbrock	access:public	signature:(double *x,int length)
F13_shifted_expanded_griewank_rosenbrock::m_o	F13_shifted_expanded_griewank_rosenbrock.h	/^	double *m_o;$/;"	m	class:F13_shifted_expanded_griewank_rosenbrock	access:private
F13_shifted_expanded_griewank_rosenbrock::m_z	F13_shifted_expanded_griewank_rosenbrock.h	/^	double *m_z;$/;"	m	class:F13_shifted_expanded_griewank_rosenbrock	access:private
F14_shifted_rotated_expanded_scaffer	F14_shifted_rotated_expanded_scaffer.cpp	/^F14_shifted_rotated_expanded_scaffer::F14_shifted_rotated_expanded_scaffer (int dimension, double bias) {$/;"	f	class:F14_shifted_rotated_expanded_scaffer	signature:(int dimension, double bias)
F14_shifted_rotated_expanded_scaffer	F14_shifted_rotated_expanded_scaffer.cpp	/^F14_shifted_rotated_expanded_scaffer::F14_shifted_rotated_expanded_scaffer (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F14_shifted_rotated_expanded_scaffer	signature:(int dimension, double bias, string file_data, string file_m)
F14_shifted_rotated_expanded_scaffer	F14_shifted_rotated_expanded_scaffer.h	/^	F14_shifted_rotated_expanded_scaffer (int dimension, double bias);$/;"	p	class:F14_shifted_rotated_expanded_scaffer	access:public	signature:(int dimension, double bias)
F14_shifted_rotated_expanded_scaffer	F14_shifted_rotated_expanded_scaffer.h	/^	F14_shifted_rotated_expanded_scaffer (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F14_shifted_rotated_expanded_scaffer	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F14_shifted_rotated_expanded_scaffer	F14_shifted_rotated_expanded_scaffer.h	/^class F14_shifted_rotated_expanded_scaffer:public test_func {$/;"	c	inherits:test_func
F14_shifted_rotated_expanded_scaffer::F14_shifted_rotated_expanded_scaffer	F14_shifted_rotated_expanded_scaffer.cpp	/^F14_shifted_rotated_expanded_scaffer::F14_shifted_rotated_expanded_scaffer (int dimension, double bias) {$/;"	f	class:F14_shifted_rotated_expanded_scaffer	signature:(int dimension, double bias)
F14_shifted_rotated_expanded_scaffer::F14_shifted_rotated_expanded_scaffer	F14_shifted_rotated_expanded_scaffer.cpp	/^F14_shifted_rotated_expanded_scaffer::F14_shifted_rotated_expanded_scaffer (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F14_shifted_rotated_expanded_scaffer	signature:(int dimension, double bias, string file_data, string file_m)
F14_shifted_rotated_expanded_scaffer::F14_shifted_rotated_expanded_scaffer	F14_shifted_rotated_expanded_scaffer.h	/^	F14_shifted_rotated_expanded_scaffer (int dimension, double bias);$/;"	p	class:F14_shifted_rotated_expanded_scaffer	access:public	signature:(int dimension, double bias)
F14_shifted_rotated_expanded_scaffer::F14_shifted_rotated_expanded_scaffer	F14_shifted_rotated_expanded_scaffer.h	/^	F14_shifted_rotated_expanded_scaffer (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F14_shifted_rotated_expanded_scaffer	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F14_shifted_rotated_expanded_scaffer::f	F14_shifted_rotated_expanded_scaffer.cpp	/^double F14_shifted_rotated_expanded_scaffer::f(double *x,int length) {$/;"	f	class:F14_shifted_rotated_expanded_scaffer	signature:(double *x,int length)
F14_shifted_rotated_expanded_scaffer::f	F14_shifted_rotated_expanded_scaffer.h	/^	double f(double *x,int length);$/;"	p	class:F14_shifted_rotated_expanded_scaffer	access:public	signature:(double *x,int length)
F14_shifted_rotated_expanded_scaffer::m_matrix	F14_shifted_rotated_expanded_scaffer.h	/^	double **m_matrix;$/;"	m	class:F14_shifted_rotated_expanded_scaffer	access:private
F14_shifted_rotated_expanded_scaffer::m_o	F14_shifted_rotated_expanded_scaffer.h	/^	double *m_o;$/;"	m	class:F14_shifted_rotated_expanded_scaffer	access:private
F14_shifted_rotated_expanded_scaffer::m_z	F14_shifted_rotated_expanded_scaffer.h	/^	double *m_z;$/;"	m	class:F14_shifted_rotated_expanded_scaffer	access:private
F14_shifted_rotated_expanded_scaffer::m_zM	F14_shifted_rotated_expanded_scaffer.h	/^	double *m_zM;$/;"	m	class:F14_shifted_rotated_expanded_scaffer	access:private
F15_hybrid_composition_1	F15_hybrid_composition_1.cpp	/^F15_hybrid_composition_1::F15_hybrid_composition_1 (int dimension, double bias) {$/;"	f	class:F15_hybrid_composition_1	signature:(int dimension, double bias)
F15_hybrid_composition_1	F15_hybrid_composition_1.cpp	/^F15_hybrid_composition_1::F15_hybrid_composition_1 (int dimension, double bias, string file_data) {$/;"	f	class:F15_hybrid_composition_1	signature:(int dimension, double bias, string file_data)
F15_hybrid_composition_1	F15_hybrid_composition_1.h	/^	F15_hybrid_composition_1 (int dimension, double bias);$/;"	p	class:F15_hybrid_composition_1	access:public	signature:(int dimension, double bias)
F15_hybrid_composition_1	F15_hybrid_composition_1.h	/^	F15_hybrid_composition_1 (int dimension, double bias, string file_data);$/;"	p	class:F15_hybrid_composition_1	access:public	signature:(int dimension, double bias, string file_data)
F15_hybrid_composition_1	F15_hybrid_composition_1.h	/^class F15_hybrid_composition_1:public test_func {$/;"	c	inherits:test_func
F15_hybrid_composition_1::F15_hybrid_composition_1	F15_hybrid_composition_1.cpp	/^F15_hybrid_composition_1::F15_hybrid_composition_1 (int dimension, double bias) {$/;"	f	class:F15_hybrid_composition_1	signature:(int dimension, double bias)
F15_hybrid_composition_1::F15_hybrid_composition_1	F15_hybrid_composition_1.cpp	/^F15_hybrid_composition_1::F15_hybrid_composition_1 (int dimension, double bias, string file_data) {$/;"	f	class:F15_hybrid_composition_1	signature:(int dimension, double bias, string file_data)
F15_hybrid_composition_1::F15_hybrid_composition_1	F15_hybrid_composition_1.h	/^	F15_hybrid_composition_1 (int dimension, double bias);$/;"	p	class:F15_hybrid_composition_1	access:public	signature:(int dimension, double bias)
F15_hybrid_composition_1::F15_hybrid_composition_1	F15_hybrid_composition_1.h	/^	F15_hybrid_composition_1 (int dimension, double bias, string file_data);$/;"	p	class:F15_hybrid_composition_1	access:public	signature:(int dimension, double bias, string file_data)
F15_hybrid_composition_1::NUM_FUNC	F15_hybrid_composition_1.h	/^	const static int NUM_FUNC = 10;$/;"	m	class:F15_hybrid_composition_1	access:private
F15_hybrid_composition_1::f	F15_hybrid_composition_1.cpp	/^double F15_hybrid_composition_1::f(double *x,int length) {$/;"	f	class:F15_hybrid_composition_1	signature:(double *x,int length)
F15_hybrid_composition_1::f	F15_hybrid_composition_1.h	/^	double f(double *x,int length);$/;"	p	class:F15_hybrid_composition_1	access:public	signature:(double *x,int length)
F15_hybrid_composition_1::m_M	F15_hybrid_composition_1.h	/^	double ***m_M;$/;"	m	class:F15_hybrid_composition_1	access:private
F15_hybrid_composition_1::m_fmax	F15_hybrid_composition_1.h	/^	double *m_fmax;$/;"	m	class:F15_hybrid_composition_1	access:private
F15_hybrid_composition_1::m_o	F15_hybrid_composition_1.h	/^	double **m_o;$/;"	m	class:F15_hybrid_composition_1	access:private
F15_hybrid_composition_1::m_testPoint	F15_hybrid_composition_1.h	/^	double *m_testPoint;$/;"	m	class:F15_hybrid_composition_1	access:private
F15_hybrid_composition_1::m_testPointM	F15_hybrid_composition_1.h	/^	double *m_testPointM;$/;"	m	class:F15_hybrid_composition_1	access:private
F15_hybrid_composition_1::m_w	F15_hybrid_composition_1.h	/^	double *m_w;$/;"	m	class:F15_hybrid_composition_1	access:private
F15_hybrid_composition_1::m_z	F15_hybrid_composition_1.h	/^	double **m_z;$/;"	m	class:F15_hybrid_composition_1	access:private
F15_hybrid_composition_1::m_zM	F15_hybrid_composition_1.h	/^	double **m_zM;$/;"	m	class:F15_hybrid_composition_1	access:private
F15_hybrid_composition_1::theJob	F15_hybrid_composition_1.h	/^	MyHCJob15 theJob;$/;"	m	class:F15_hybrid_composition_1	access:private
F16_rotated_hybrid_composition_1	F16_rotated_hybrid_composition_1.cpp	/^F16_rotated_hybrid_composition_1::F16_rotated_hybrid_composition_1 (int dimension, double bias) {$/;"	f	class:F16_rotated_hybrid_composition_1	signature:(int dimension, double bias)
F16_rotated_hybrid_composition_1	F16_rotated_hybrid_composition_1.cpp	/^F16_rotated_hybrid_composition_1::F16_rotated_hybrid_composition_1 (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F16_rotated_hybrid_composition_1	signature:(int dimension, double bias, string file_data, string file_m)
F16_rotated_hybrid_composition_1	F16_rotated_hybrid_composition_1.h	/^	F16_rotated_hybrid_composition_1 (int dimension, double bias);$/;"	p	class:F16_rotated_hybrid_composition_1	access:public	signature:(int dimension, double bias)
F16_rotated_hybrid_composition_1	F16_rotated_hybrid_composition_1.h	/^	F16_rotated_hybrid_composition_1 (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F16_rotated_hybrid_composition_1	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F16_rotated_hybrid_composition_1	F16_rotated_hybrid_composition_1.h	/^class F16_rotated_hybrid_composition_1:public test_func {$/;"	c	inherits:test_func
F16_rotated_hybrid_composition_1::F16_rotated_hybrid_composition_1	F16_rotated_hybrid_composition_1.cpp	/^F16_rotated_hybrid_composition_1::F16_rotated_hybrid_composition_1 (int dimension, double bias) {$/;"	f	class:F16_rotated_hybrid_composition_1	signature:(int dimension, double bias)
F16_rotated_hybrid_composition_1::F16_rotated_hybrid_composition_1	F16_rotated_hybrid_composition_1.cpp	/^F16_rotated_hybrid_composition_1::F16_rotated_hybrid_composition_1 (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F16_rotated_hybrid_composition_1	signature:(int dimension, double bias, string file_data, string file_m)
F16_rotated_hybrid_composition_1::F16_rotated_hybrid_composition_1	F16_rotated_hybrid_composition_1.h	/^	F16_rotated_hybrid_composition_1 (int dimension, double bias);$/;"	p	class:F16_rotated_hybrid_composition_1	access:public	signature:(int dimension, double bias)
F16_rotated_hybrid_composition_1::F16_rotated_hybrid_composition_1	F16_rotated_hybrid_composition_1.h	/^	F16_rotated_hybrid_composition_1 (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F16_rotated_hybrid_composition_1	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F16_rotated_hybrid_composition_1::NUM_FUNC	F16_rotated_hybrid_composition_1.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F16_rotated_hybrid_composition_1	access:public
F16_rotated_hybrid_composition_1::f	F16_rotated_hybrid_composition_1.cpp	/^double F16_rotated_hybrid_composition_1::f(double *x,int length) {$/;"	f	class:F16_rotated_hybrid_composition_1	signature:(double *x,int length)
F16_rotated_hybrid_composition_1::f	F16_rotated_hybrid_composition_1.h	/^	double f(double *x,int length);$/;"	p	class:F16_rotated_hybrid_composition_1	access:public	signature:(double *x,int length)
F16_rotated_hybrid_composition_1::m_M	F16_rotated_hybrid_composition_1.h	/^	double ***m_M;$/;"	m	class:F16_rotated_hybrid_composition_1	access:private
F16_rotated_hybrid_composition_1::m_fmax	F16_rotated_hybrid_composition_1.h	/^	double *m_fmax;$/;"	m	class:F16_rotated_hybrid_composition_1	access:private
F16_rotated_hybrid_composition_1::m_o	F16_rotated_hybrid_composition_1.h	/^	double **m_o;$/;"	m	class:F16_rotated_hybrid_composition_1	access:private
F16_rotated_hybrid_composition_1::m_testPoint	F16_rotated_hybrid_composition_1.h	/^	double *m_testPoint;$/;"	m	class:F16_rotated_hybrid_composition_1	access:private
F16_rotated_hybrid_composition_1::m_testPointM	F16_rotated_hybrid_composition_1.h	/^	double *m_testPointM;$/;"	m	class:F16_rotated_hybrid_composition_1	access:private
F16_rotated_hybrid_composition_1::m_w	F16_rotated_hybrid_composition_1.h	/^	double *m_w;$/;"	m	class:F16_rotated_hybrid_composition_1	access:private
F16_rotated_hybrid_composition_1::m_z	F16_rotated_hybrid_composition_1.h	/^	double **m_z;$/;"	m	class:F16_rotated_hybrid_composition_1	access:private
F16_rotated_hybrid_composition_1::m_zM	F16_rotated_hybrid_composition_1.h	/^	double **m_zM;$/;"	m	class:F16_rotated_hybrid_composition_1	access:private
F16_rotated_hybrid_composition_1::theJob	F16_rotated_hybrid_composition_1.h	/^	MyHCJob16 theJob;$/;"	m	class:F16_rotated_hybrid_composition_1	access:private
F17_rotated_hybrid_composition_1_noise	F17_rotated_hybrid_composition_1_noise.cpp	/^F17_rotated_hybrid_composition_1_noise::F17_rotated_hybrid_composition_1_noise (int dimension, double bias) {$/;"	f	class:F17_rotated_hybrid_composition_1_noise	signature:(int dimension, double bias)
F17_rotated_hybrid_composition_1_noise	F17_rotated_hybrid_composition_1_noise.cpp	/^F17_rotated_hybrid_composition_1_noise::F17_rotated_hybrid_composition_1_noise (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F17_rotated_hybrid_composition_1_noise	signature:(int dimension, double bias, string file_data, string file_m)
F17_rotated_hybrid_composition_1_noise	F17_rotated_hybrid_composition_1_noise.h	/^	F17_rotated_hybrid_composition_1_noise (int dimension, double bias);$/;"	p	class:F17_rotated_hybrid_composition_1_noise	access:public	signature:(int dimension, double bias)
F17_rotated_hybrid_composition_1_noise	F17_rotated_hybrid_composition_1_noise.h	/^	F17_rotated_hybrid_composition_1_noise (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F17_rotated_hybrid_composition_1_noise	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F17_rotated_hybrid_composition_1_noise	F17_rotated_hybrid_composition_1_noise.h	/^class F17_rotated_hybrid_composition_1_noise:public test_func {$/;"	c	inherits:test_func
F17_rotated_hybrid_composition_1_noise::F17_rotated_hybrid_composition_1_noise	F17_rotated_hybrid_composition_1_noise.cpp	/^F17_rotated_hybrid_composition_1_noise::F17_rotated_hybrid_composition_1_noise (int dimension, double bias) {$/;"	f	class:F17_rotated_hybrid_composition_1_noise	signature:(int dimension, double bias)
F17_rotated_hybrid_composition_1_noise::F17_rotated_hybrid_composition_1_noise	F17_rotated_hybrid_composition_1_noise.cpp	/^F17_rotated_hybrid_composition_1_noise::F17_rotated_hybrid_composition_1_noise (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F17_rotated_hybrid_composition_1_noise	signature:(int dimension, double bias, string file_data, string file_m)
F17_rotated_hybrid_composition_1_noise::F17_rotated_hybrid_composition_1_noise	F17_rotated_hybrid_composition_1_noise.h	/^	F17_rotated_hybrid_composition_1_noise (int dimension, double bias);$/;"	p	class:F17_rotated_hybrid_composition_1_noise	access:public	signature:(int dimension, double bias)
F17_rotated_hybrid_composition_1_noise::F17_rotated_hybrid_composition_1_noise	F17_rotated_hybrid_composition_1_noise.h	/^	F17_rotated_hybrid_composition_1_noise (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F17_rotated_hybrid_composition_1_noise	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F17_rotated_hybrid_composition_1_noise::NUM_FUNC	F17_rotated_hybrid_composition_1_noise.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:public
F17_rotated_hybrid_composition_1_noise::f	F17_rotated_hybrid_composition_1_noise.cpp	/^double F17_rotated_hybrid_composition_1_noise::f(double *x,int length) {$/;"	f	class:F17_rotated_hybrid_composition_1_noise	signature:(double *x,int length)
F17_rotated_hybrid_composition_1_noise::f	F17_rotated_hybrid_composition_1_noise.h	/^	double f(double *x,int length);$/;"	p	class:F17_rotated_hybrid_composition_1_noise	access:public	signature:(double *x,int length)
F17_rotated_hybrid_composition_1_noise::m_M	F17_rotated_hybrid_composition_1_noise.h	/^	double ***m_M;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:private
F17_rotated_hybrid_composition_1_noise::m_fmax	F17_rotated_hybrid_composition_1_noise.h	/^	double *m_fmax;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:private
F17_rotated_hybrid_composition_1_noise::m_o	F17_rotated_hybrid_composition_1_noise.h	/^	double **m_o;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:private
F17_rotated_hybrid_composition_1_noise::m_testPoint	F17_rotated_hybrid_composition_1_noise.h	/^	double *m_testPoint;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:private
F17_rotated_hybrid_composition_1_noise::m_testPointM	F17_rotated_hybrid_composition_1_noise.h	/^	double *m_testPointM;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:private
F17_rotated_hybrid_composition_1_noise::m_w	F17_rotated_hybrid_composition_1_noise.h	/^	double *m_w;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:private
F17_rotated_hybrid_composition_1_noise::m_z	F17_rotated_hybrid_composition_1_noise.h	/^	double **m_z;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:private
F17_rotated_hybrid_composition_1_noise::m_zM	F17_rotated_hybrid_composition_1_noise.h	/^	double **m_zM;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:private
F17_rotated_hybrid_composition_1_noise::theJob	F17_rotated_hybrid_composition_1_noise.h	/^	MyHCJob17 theJob;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:private
F18_rotated_hybrid_composition_2	F18_rotated_hybrid_composition_2.cpp	/^F18_rotated_hybrid_composition_2::F18_rotated_hybrid_composition_2 (int dimension, double bias) {$/;"	f	class:F18_rotated_hybrid_composition_2	signature:(int dimension, double bias)
F18_rotated_hybrid_composition_2	F18_rotated_hybrid_composition_2.cpp	/^F18_rotated_hybrid_composition_2::F18_rotated_hybrid_composition_2 (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F18_rotated_hybrid_composition_2	signature:(int dimension, double bias, string file_data, string file_m)
F18_rotated_hybrid_composition_2	F18_rotated_hybrid_composition_2.h	/^	F18_rotated_hybrid_composition_2 (int dimension, double bias);$/;"	p	class:F18_rotated_hybrid_composition_2	access:public	signature:(int dimension, double bias)
F18_rotated_hybrid_composition_2	F18_rotated_hybrid_composition_2.h	/^	F18_rotated_hybrid_composition_2 (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F18_rotated_hybrid_composition_2	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F18_rotated_hybrid_composition_2	F18_rotated_hybrid_composition_2.h	/^class F18_rotated_hybrid_composition_2:public test_func {$/;"	c	inherits:test_func
F18_rotated_hybrid_composition_2::F18_rotated_hybrid_composition_2	F18_rotated_hybrid_composition_2.cpp	/^F18_rotated_hybrid_composition_2::F18_rotated_hybrid_composition_2 (int dimension, double bias) {$/;"	f	class:F18_rotated_hybrid_composition_2	signature:(int dimension, double bias)
F18_rotated_hybrid_composition_2::F18_rotated_hybrid_composition_2	F18_rotated_hybrid_composition_2.cpp	/^F18_rotated_hybrid_composition_2::F18_rotated_hybrid_composition_2 (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F18_rotated_hybrid_composition_2	signature:(int dimension, double bias, string file_data, string file_m)
F18_rotated_hybrid_composition_2::F18_rotated_hybrid_composition_2	F18_rotated_hybrid_composition_2.h	/^	F18_rotated_hybrid_composition_2 (int dimension, double bias);$/;"	p	class:F18_rotated_hybrid_composition_2	access:public	signature:(int dimension, double bias)
F18_rotated_hybrid_composition_2::F18_rotated_hybrid_composition_2	F18_rotated_hybrid_composition_2.h	/^	F18_rotated_hybrid_composition_2 (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F18_rotated_hybrid_composition_2	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F18_rotated_hybrid_composition_2::NUM_FUNC	F18_rotated_hybrid_composition_2.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F18_rotated_hybrid_composition_2	access:public
F18_rotated_hybrid_composition_2::f	F18_rotated_hybrid_composition_2.cpp	/^double F18_rotated_hybrid_composition_2::f(double *x,int length) {$/;"	f	class:F18_rotated_hybrid_composition_2	signature:(double *x,int length)
F18_rotated_hybrid_composition_2::f	F18_rotated_hybrid_composition_2.h	/^	double f(double *x,int length);$/;"	p	class:F18_rotated_hybrid_composition_2	access:public	signature:(double *x,int length)
F18_rotated_hybrid_composition_2::m_M	F18_rotated_hybrid_composition_2.h	/^	double ***m_M;$/;"	m	class:F18_rotated_hybrid_composition_2	access:private
F18_rotated_hybrid_composition_2::m_fmax	F18_rotated_hybrid_composition_2.h	/^	double *m_fmax;$/;"	m	class:F18_rotated_hybrid_composition_2	access:private
F18_rotated_hybrid_composition_2::m_o	F18_rotated_hybrid_composition_2.h	/^	double **m_o;$/;"	m	class:F18_rotated_hybrid_composition_2	access:private
F18_rotated_hybrid_composition_2::m_testPoint	F18_rotated_hybrid_composition_2.h	/^	double *m_testPoint;$/;"	m	class:F18_rotated_hybrid_composition_2	access:private
F18_rotated_hybrid_composition_2::m_testPointM	F18_rotated_hybrid_composition_2.h	/^	double *m_testPointM;$/;"	m	class:F18_rotated_hybrid_composition_2	access:private
F18_rotated_hybrid_composition_2::m_w	F18_rotated_hybrid_composition_2.h	/^	double *m_w;$/;"	m	class:F18_rotated_hybrid_composition_2	access:private
F18_rotated_hybrid_composition_2::m_z	F18_rotated_hybrid_composition_2.h	/^	double **m_z;$/;"	m	class:F18_rotated_hybrid_composition_2	access:private
F18_rotated_hybrid_composition_2::m_zM	F18_rotated_hybrid_composition_2.h	/^	double **m_zM;$/;"	m	class:F18_rotated_hybrid_composition_2	access:private
F18_rotated_hybrid_composition_2::theJob	F18_rotated_hybrid_composition_2.h	/^	MyHCJob18 theJob;$/;"	m	class:F18_rotated_hybrid_composition_2	access:private
F19_rotated_hybrid_composition_2_narrow_basin_global_opt	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.cpp	/^F19_rotated_hybrid_composition_2_narrow_basin_global_opt::F19_rotated_hybrid_composition_2_narrow_basin_global_opt (int dimension, double bias) {$/;"	f	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	signature:(int dimension, double bias)
F19_rotated_hybrid_composition_2_narrow_basin_global_opt	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.cpp	/^F19_rotated_hybrid_composition_2_narrow_basin_global_opt::F19_rotated_hybrid_composition_2_narrow_basin_global_opt (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	signature:(int dimension, double bias, string file_data, string file_m)
F19_rotated_hybrid_composition_2_narrow_basin_global_opt	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	F19_rotated_hybrid_composition_2_narrow_basin_global_opt (int dimension, double bias);$/;"	p	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:public	signature:(int dimension, double bias)
F19_rotated_hybrid_composition_2_narrow_basin_global_opt	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	F19_rotated_hybrid_composition_2_narrow_basin_global_opt (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F19_rotated_hybrid_composition_2_narrow_basin_global_opt	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^class F19_rotated_hybrid_composition_2_narrow_basin_global_opt:public test_func {$/;"	c	inherits:test_func
F19_rotated_hybrid_composition_2_narrow_basin_global_opt::F19_rotated_hybrid_composition_2_narrow_basin_global_opt	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.cpp	/^F19_rotated_hybrid_composition_2_narrow_basin_global_opt::F19_rotated_hybrid_composition_2_narrow_basin_global_opt (int dimension, double bias) {$/;"	f	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	signature:(int dimension, double bias)
F19_rotated_hybrid_composition_2_narrow_basin_global_opt::F19_rotated_hybrid_composition_2_narrow_basin_global_opt	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.cpp	/^F19_rotated_hybrid_composition_2_narrow_basin_global_opt::F19_rotated_hybrid_composition_2_narrow_basin_global_opt (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	signature:(int dimension, double bias, string file_data, string file_m)
F19_rotated_hybrid_composition_2_narrow_basin_global_opt::F19_rotated_hybrid_composition_2_narrow_basin_global_opt	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	F19_rotated_hybrid_composition_2_narrow_basin_global_opt (int dimension, double bias);$/;"	p	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:public	signature:(int dimension, double bias)
F19_rotated_hybrid_composition_2_narrow_basin_global_opt::F19_rotated_hybrid_composition_2_narrow_basin_global_opt	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	F19_rotated_hybrid_composition_2_narrow_basin_global_opt (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F19_rotated_hybrid_composition_2_narrow_basin_global_opt::NUM_FUNC	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:public
F19_rotated_hybrid_composition_2_narrow_basin_global_opt::f	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.cpp	/^double F19_rotated_hybrid_composition_2_narrow_basin_global_opt::f(double *x,int length) {$/;"	f	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	signature:(double *x,int length)
F19_rotated_hybrid_composition_2_narrow_basin_global_opt::f	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	double f(double *x,int length);$/;"	p	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:public	signature:(double *x,int length)
F19_rotated_hybrid_composition_2_narrow_basin_global_opt::m_M	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	double ***m_M;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:private
F19_rotated_hybrid_composition_2_narrow_basin_global_opt::m_fmax	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	double *m_fmax;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:private
F19_rotated_hybrid_composition_2_narrow_basin_global_opt::m_o	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	double **m_o;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:private
F19_rotated_hybrid_composition_2_narrow_basin_global_opt::m_testPoint	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	double *m_testPoint;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:private
F19_rotated_hybrid_composition_2_narrow_basin_global_opt::m_testPointM	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	double *m_testPointM;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:private
F19_rotated_hybrid_composition_2_narrow_basin_global_opt::m_w	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	double *m_w;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:private
F19_rotated_hybrid_composition_2_narrow_basin_global_opt::m_z	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	double **m_z;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:private
F19_rotated_hybrid_composition_2_narrow_basin_global_opt::m_zM	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	double **m_zM;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:private
F19_rotated_hybrid_composition_2_narrow_basin_global_opt::theJob	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	MyHCJob19 theJob;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:private
F2	benchmark.cpp	/^double F2(double x, double y) {$/;"	f	signature:(double x, double y)
F2	benchmark.h	/^	double F2(double x, double y);$/;"	p	signature:(double x, double y)
F20_rotated_hybrid_composition_2_global_opt_bound	F20_rotated_hybrid_composition_2_global_opt_bound.cpp	/^F20_rotated_hybrid_composition_2_global_opt_bound::F20_rotated_hybrid_composition_2_global_opt_bound (int dimension, double bias) {$/;"	f	class:F20_rotated_hybrid_composition_2_global_opt_bound	signature:(int dimension, double bias)
F20_rotated_hybrid_composition_2_global_opt_bound	F20_rotated_hybrid_composition_2_global_opt_bound.cpp	/^F20_rotated_hybrid_composition_2_global_opt_bound::F20_rotated_hybrid_composition_2_global_opt_bound (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F20_rotated_hybrid_composition_2_global_opt_bound	signature:(int dimension, double bias, string file_data, string file_m)
F20_rotated_hybrid_composition_2_global_opt_bound	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	F20_rotated_hybrid_composition_2_global_opt_bound (int dimension, double bias);$/;"	p	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:public	signature:(int dimension, double bias)
F20_rotated_hybrid_composition_2_global_opt_bound	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	F20_rotated_hybrid_composition_2_global_opt_bound (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F20_rotated_hybrid_composition_2_global_opt_bound	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^class F20_rotated_hybrid_composition_2_global_opt_bound:public test_func {$/;"	c	inherits:test_func
F20_rotated_hybrid_composition_2_global_opt_bound::F20_rotated_hybrid_composition_2_global_opt_bound	F20_rotated_hybrid_composition_2_global_opt_bound.cpp	/^F20_rotated_hybrid_composition_2_global_opt_bound::F20_rotated_hybrid_composition_2_global_opt_bound (int dimension, double bias) {$/;"	f	class:F20_rotated_hybrid_composition_2_global_opt_bound	signature:(int dimension, double bias)
F20_rotated_hybrid_composition_2_global_opt_bound::F20_rotated_hybrid_composition_2_global_opt_bound	F20_rotated_hybrid_composition_2_global_opt_bound.cpp	/^F20_rotated_hybrid_composition_2_global_opt_bound::F20_rotated_hybrid_composition_2_global_opt_bound (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F20_rotated_hybrid_composition_2_global_opt_bound	signature:(int dimension, double bias, string file_data, string file_m)
F20_rotated_hybrid_composition_2_global_opt_bound::F20_rotated_hybrid_composition_2_global_opt_bound	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	F20_rotated_hybrid_composition_2_global_opt_bound (int dimension, double bias);$/;"	p	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:public	signature:(int dimension, double bias)
F20_rotated_hybrid_composition_2_global_opt_bound::F20_rotated_hybrid_composition_2_global_opt_bound	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	F20_rotated_hybrid_composition_2_global_opt_bound (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F20_rotated_hybrid_composition_2_global_opt_bound::NUM_FUNC	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:public
F20_rotated_hybrid_composition_2_global_opt_bound::f	F20_rotated_hybrid_composition_2_global_opt_bound.cpp	/^double F20_rotated_hybrid_composition_2_global_opt_bound::f(double *x,int length) {$/;"	f	class:F20_rotated_hybrid_composition_2_global_opt_bound	signature:(double *x,int length)
F20_rotated_hybrid_composition_2_global_opt_bound::f	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double f(double *x,int length);$/;"	p	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:public	signature:(double *x,int length)
F20_rotated_hybrid_composition_2_global_opt_bound::m_M	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double ***m_M;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:private
F20_rotated_hybrid_composition_2_global_opt_bound::m_fmax	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double *m_fmax;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:private
F20_rotated_hybrid_composition_2_global_opt_bound::m_o	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double **m_o;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:private
F20_rotated_hybrid_composition_2_global_opt_bound::m_testPoint	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double *m_testPoint;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:private
F20_rotated_hybrid_composition_2_global_opt_bound::m_testPointM	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double *m_testPointM;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:private
F20_rotated_hybrid_composition_2_global_opt_bound::m_w	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double *m_w;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:private
F20_rotated_hybrid_composition_2_global_opt_bound::m_z	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double **m_z;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:private
F20_rotated_hybrid_composition_2_global_opt_bound::m_zM	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double **m_zM;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:private
F20_rotated_hybrid_composition_2_global_opt_bound::theJob	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	MyHCJob20 theJob;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:private
F21_rotated_hybrid_composition_3	F21_rotated_hybrid_composition_3.cpp	/^F21_rotated_hybrid_composition_3::F21_rotated_hybrid_composition_3 (int dimension, double bias) {$/;"	f	class:F21_rotated_hybrid_composition_3	signature:(int dimension, double bias)
F21_rotated_hybrid_composition_3	F21_rotated_hybrid_composition_3.cpp	/^F21_rotated_hybrid_composition_3::F21_rotated_hybrid_composition_3 (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F21_rotated_hybrid_composition_3	signature:(int dimension, double bias, string file_data, string file_m)
F21_rotated_hybrid_composition_3	F21_rotated_hybrid_composition_3.h	/^	F21_rotated_hybrid_composition_3 (int dimension, double bias);$/;"	p	class:F21_rotated_hybrid_composition_3	access:public	signature:(int dimension, double bias)
F21_rotated_hybrid_composition_3	F21_rotated_hybrid_composition_3.h	/^	F21_rotated_hybrid_composition_3 (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F21_rotated_hybrid_composition_3	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F21_rotated_hybrid_composition_3	F21_rotated_hybrid_composition_3.h	/^class F21_rotated_hybrid_composition_3:public test_func {$/;"	c	inherits:test_func
F21_rotated_hybrid_composition_3::F21_rotated_hybrid_composition_3	F21_rotated_hybrid_composition_3.cpp	/^F21_rotated_hybrid_composition_3::F21_rotated_hybrid_composition_3 (int dimension, double bias) {$/;"	f	class:F21_rotated_hybrid_composition_3	signature:(int dimension, double bias)
F21_rotated_hybrid_composition_3::F21_rotated_hybrid_composition_3	F21_rotated_hybrid_composition_3.cpp	/^F21_rotated_hybrid_composition_3::F21_rotated_hybrid_composition_3 (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F21_rotated_hybrid_composition_3	signature:(int dimension, double bias, string file_data, string file_m)
F21_rotated_hybrid_composition_3::F21_rotated_hybrid_composition_3	F21_rotated_hybrid_composition_3.h	/^	F21_rotated_hybrid_composition_3 (int dimension, double bias);$/;"	p	class:F21_rotated_hybrid_composition_3	access:public	signature:(int dimension, double bias)
F21_rotated_hybrid_composition_3::F21_rotated_hybrid_composition_3	F21_rotated_hybrid_composition_3.h	/^	F21_rotated_hybrid_composition_3 (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F21_rotated_hybrid_composition_3	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F21_rotated_hybrid_composition_3::NUM_FUNC	F21_rotated_hybrid_composition_3.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F21_rotated_hybrid_composition_3	access:public
F21_rotated_hybrid_composition_3::f	F21_rotated_hybrid_composition_3.cpp	/^double F21_rotated_hybrid_composition_3::f(double *x,int length) {$/;"	f	class:F21_rotated_hybrid_composition_3	signature:(double *x,int length)
F21_rotated_hybrid_composition_3::f	F21_rotated_hybrid_composition_3.h	/^	double f(double *x,int length);$/;"	p	class:F21_rotated_hybrid_composition_3	access:public	signature:(double *x,int length)
F21_rotated_hybrid_composition_3::m_M	F21_rotated_hybrid_composition_3.h	/^	double ***m_M;$/;"	m	class:F21_rotated_hybrid_composition_3	access:private
F21_rotated_hybrid_composition_3::m_fmax	F21_rotated_hybrid_composition_3.h	/^	double *m_fmax;$/;"	m	class:F21_rotated_hybrid_composition_3	access:private
F21_rotated_hybrid_composition_3::m_o	F21_rotated_hybrid_composition_3.h	/^	double **m_o;$/;"	m	class:F21_rotated_hybrid_composition_3	access:private
F21_rotated_hybrid_composition_3::m_testPoint	F21_rotated_hybrid_composition_3.h	/^	double *m_testPoint;$/;"	m	class:F21_rotated_hybrid_composition_3	access:private
F21_rotated_hybrid_composition_3::m_testPointM	F21_rotated_hybrid_composition_3.h	/^	double *m_testPointM;$/;"	m	class:F21_rotated_hybrid_composition_3	access:private
F21_rotated_hybrid_composition_3::m_w	F21_rotated_hybrid_composition_3.h	/^	double *m_w;$/;"	m	class:F21_rotated_hybrid_composition_3	access:private
F21_rotated_hybrid_composition_3::m_z	F21_rotated_hybrid_composition_3.h	/^	double **m_z;$/;"	m	class:F21_rotated_hybrid_composition_3	access:private
F21_rotated_hybrid_composition_3::m_zM	F21_rotated_hybrid_composition_3.h	/^	double **m_zM;$/;"	m	class:F21_rotated_hybrid_composition_3	access:private
F21_rotated_hybrid_composition_3::theJob	F21_rotated_hybrid_composition_3.h	/^	MyHCJob21 theJob;$/;"	m	class:F21_rotated_hybrid_composition_3	access:private
F22_rotated_hybrid_composition_3_high_cond_num_matrix	F22_rotated_hybrid_composition_3_high_cond_num_matrix.cpp	/^F22_rotated_hybrid_composition_3_high_cond_num_matrix::F22_rotated_hybrid_composition_3_high_cond_num_matrix (int dimension, double bias) {$/;"	f	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	signature:(int dimension, double bias)
F22_rotated_hybrid_composition_3_high_cond_num_matrix	F22_rotated_hybrid_composition_3_high_cond_num_matrix.cpp	/^F22_rotated_hybrid_composition_3_high_cond_num_matrix::F22_rotated_hybrid_composition_3_high_cond_num_matrix (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	signature:(int dimension, double bias, string file_data, string file_m)
F22_rotated_hybrid_composition_3_high_cond_num_matrix	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	F22_rotated_hybrid_composition_3_high_cond_num_matrix (int dimension, double bias);$/;"	p	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:public	signature:(int dimension, double bias)
F22_rotated_hybrid_composition_3_high_cond_num_matrix	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	F22_rotated_hybrid_composition_3_high_cond_num_matrix (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F22_rotated_hybrid_composition_3_high_cond_num_matrix	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^class F22_rotated_hybrid_composition_3_high_cond_num_matrix:public test_func {$/;"	c	inherits:test_func
F22_rotated_hybrid_composition_3_high_cond_num_matrix::F22_rotated_hybrid_composition_3_high_cond_num_matrix	F22_rotated_hybrid_composition_3_high_cond_num_matrix.cpp	/^F22_rotated_hybrid_composition_3_high_cond_num_matrix::F22_rotated_hybrid_composition_3_high_cond_num_matrix (int dimension, double bias) {$/;"	f	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	signature:(int dimension, double bias)
F22_rotated_hybrid_composition_3_high_cond_num_matrix::F22_rotated_hybrid_composition_3_high_cond_num_matrix	F22_rotated_hybrid_composition_3_high_cond_num_matrix.cpp	/^F22_rotated_hybrid_composition_3_high_cond_num_matrix::F22_rotated_hybrid_composition_3_high_cond_num_matrix (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	signature:(int dimension, double bias, string file_data, string file_m)
F22_rotated_hybrid_composition_3_high_cond_num_matrix::F22_rotated_hybrid_composition_3_high_cond_num_matrix	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	F22_rotated_hybrid_composition_3_high_cond_num_matrix (int dimension, double bias);$/;"	p	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:public	signature:(int dimension, double bias)
F22_rotated_hybrid_composition_3_high_cond_num_matrix::F22_rotated_hybrid_composition_3_high_cond_num_matrix	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	F22_rotated_hybrid_composition_3_high_cond_num_matrix (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F22_rotated_hybrid_composition_3_high_cond_num_matrix::NUM_FUNC	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:public
F22_rotated_hybrid_composition_3_high_cond_num_matrix::f	F22_rotated_hybrid_composition_3_high_cond_num_matrix.cpp	/^double F22_rotated_hybrid_composition_3_high_cond_num_matrix::f(double *x,int length) {$/;"	f	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	signature:(double *x,int length)
F22_rotated_hybrid_composition_3_high_cond_num_matrix::f	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double f(double *x,int length);$/;"	p	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:public	signature:(double *x,int length)
F22_rotated_hybrid_composition_3_high_cond_num_matrix::m_M	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double ***m_M;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:private
F22_rotated_hybrid_composition_3_high_cond_num_matrix::m_fmax	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double *m_fmax;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:private
F22_rotated_hybrid_composition_3_high_cond_num_matrix::m_o	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double **m_o;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:private
F22_rotated_hybrid_composition_3_high_cond_num_matrix::m_testPoint	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double *m_testPoint;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:private
F22_rotated_hybrid_composition_3_high_cond_num_matrix::m_testPointM	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double *m_testPointM;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:private
F22_rotated_hybrid_composition_3_high_cond_num_matrix::m_w	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double *m_w;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:private
F22_rotated_hybrid_composition_3_high_cond_num_matrix::m_z	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double **m_z;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:private
F22_rotated_hybrid_composition_3_high_cond_num_matrix::m_zM	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double **m_zM;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:private
F22_rotated_hybrid_composition_3_high_cond_num_matrix::theJob	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	MyHCJob22 theJob;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:private
F23_noncontinuous_rotated_hybrid_composition_3	F23_noncontinuous_rotated_hybrid_composition_3.cpp	/^F23_noncontinuous_rotated_hybrid_composition_3::F23_noncontinuous_rotated_hybrid_composition_3 (int dimension, double bias) {$/;"	f	class:F23_noncontinuous_rotated_hybrid_composition_3	signature:(int dimension, double bias)
F23_noncontinuous_rotated_hybrid_composition_3	F23_noncontinuous_rotated_hybrid_composition_3.cpp	/^F23_noncontinuous_rotated_hybrid_composition_3::F23_noncontinuous_rotated_hybrid_composition_3 (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F23_noncontinuous_rotated_hybrid_composition_3	signature:(int dimension, double bias, string file_data, string file_m)
F23_noncontinuous_rotated_hybrid_composition_3	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	F23_noncontinuous_rotated_hybrid_composition_3 (int dimension, double bias);$/;"	p	class:F23_noncontinuous_rotated_hybrid_composition_3	access:public	signature:(int dimension, double bias)
F23_noncontinuous_rotated_hybrid_composition_3	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	F23_noncontinuous_rotated_hybrid_composition_3 (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F23_noncontinuous_rotated_hybrid_composition_3	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F23_noncontinuous_rotated_hybrid_composition_3	F23_noncontinuous_rotated_hybrid_composition_3.h	/^class F23_noncontinuous_rotated_hybrid_composition_3:public test_func {$/;"	c	inherits:test_func
F23_noncontinuous_rotated_hybrid_composition_3::F23_noncontinuous_rotated_hybrid_composition_3	F23_noncontinuous_rotated_hybrid_composition_3.cpp	/^F23_noncontinuous_rotated_hybrid_composition_3::F23_noncontinuous_rotated_hybrid_composition_3 (int dimension, double bias) {$/;"	f	class:F23_noncontinuous_rotated_hybrid_composition_3	signature:(int dimension, double bias)
F23_noncontinuous_rotated_hybrid_composition_3::F23_noncontinuous_rotated_hybrid_composition_3	F23_noncontinuous_rotated_hybrid_composition_3.cpp	/^F23_noncontinuous_rotated_hybrid_composition_3::F23_noncontinuous_rotated_hybrid_composition_3 (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F23_noncontinuous_rotated_hybrid_composition_3	signature:(int dimension, double bias, string file_data, string file_m)
F23_noncontinuous_rotated_hybrid_composition_3::F23_noncontinuous_rotated_hybrid_composition_3	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	F23_noncontinuous_rotated_hybrid_composition_3 (int dimension, double bias);$/;"	p	class:F23_noncontinuous_rotated_hybrid_composition_3	access:public	signature:(int dimension, double bias)
F23_noncontinuous_rotated_hybrid_composition_3::F23_noncontinuous_rotated_hybrid_composition_3	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	F23_noncontinuous_rotated_hybrid_composition_3 (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F23_noncontinuous_rotated_hybrid_composition_3	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F23_noncontinuous_rotated_hybrid_composition_3::NUM_FUNC	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:public
F23_noncontinuous_rotated_hybrid_composition_3::f	F23_noncontinuous_rotated_hybrid_composition_3.cpp	/^double F23_noncontinuous_rotated_hybrid_composition_3::f(double *x,int length) {$/;"	f	class:F23_noncontinuous_rotated_hybrid_composition_3	signature:(double *x,int length)
F23_noncontinuous_rotated_hybrid_composition_3::f	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	double f(double *x,int length);$/;"	p	class:F23_noncontinuous_rotated_hybrid_composition_3	access:public	signature:(double *x,int length)
F23_noncontinuous_rotated_hybrid_composition_3::m_M	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	double ***m_M;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:private
F23_noncontinuous_rotated_hybrid_composition_3::m_fmax	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	double *m_fmax;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:private
F23_noncontinuous_rotated_hybrid_composition_3::m_o	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	double **m_o;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:private
F23_noncontinuous_rotated_hybrid_composition_3::m_testPoint	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	double *m_testPoint;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:private
F23_noncontinuous_rotated_hybrid_composition_3::m_testPointM	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	double *m_testPointM;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:private
F23_noncontinuous_rotated_hybrid_composition_3::m_w	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	double *m_w;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:private
F23_noncontinuous_rotated_hybrid_composition_3::m_z	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	double **m_z;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:private
F23_noncontinuous_rotated_hybrid_composition_3::m_zM	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	double **m_zM;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:private
F23_noncontinuous_rotated_hybrid_composition_3::theJob	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	MyHCJob23 theJob;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:private
F24_rotated_hybrid_composition_4	F24_rotated_hybrid_composition_4.cpp	/^F24_rotated_hybrid_composition_4::F24_rotated_hybrid_composition_4 (int dimension, double bias) {$/;"	f	class:F24_rotated_hybrid_composition_4	signature:(int dimension, double bias)
F24_rotated_hybrid_composition_4	F24_rotated_hybrid_composition_4.cpp	/^F24_rotated_hybrid_composition_4::F24_rotated_hybrid_composition_4 (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F24_rotated_hybrid_composition_4	signature:(int dimension, double bias, string file_data, string file_m)
F24_rotated_hybrid_composition_4	F24_rotated_hybrid_composition_4.h	/^	F24_rotated_hybrid_composition_4 (int dimension, double bias);$/;"	p	class:F24_rotated_hybrid_composition_4	access:public	signature:(int dimension, double bias)
F24_rotated_hybrid_composition_4	F24_rotated_hybrid_composition_4.h	/^	F24_rotated_hybrid_composition_4 (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F24_rotated_hybrid_composition_4	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F24_rotated_hybrid_composition_4	F24_rotated_hybrid_composition_4.h	/^class F24_rotated_hybrid_composition_4:public test_func {$/;"	c	inherits:test_func
F24_rotated_hybrid_composition_4::F24_rotated_hybrid_composition_4	F24_rotated_hybrid_composition_4.cpp	/^F24_rotated_hybrid_composition_4::F24_rotated_hybrid_composition_4 (int dimension, double bias) {$/;"	f	class:F24_rotated_hybrid_composition_4	signature:(int dimension, double bias)
F24_rotated_hybrid_composition_4::F24_rotated_hybrid_composition_4	F24_rotated_hybrid_composition_4.cpp	/^F24_rotated_hybrid_composition_4::F24_rotated_hybrid_composition_4 (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F24_rotated_hybrid_composition_4	signature:(int dimension, double bias, string file_data, string file_m)
F24_rotated_hybrid_composition_4::F24_rotated_hybrid_composition_4	F24_rotated_hybrid_composition_4.h	/^	F24_rotated_hybrid_composition_4 (int dimension, double bias);$/;"	p	class:F24_rotated_hybrid_composition_4	access:public	signature:(int dimension, double bias)
F24_rotated_hybrid_composition_4::F24_rotated_hybrid_composition_4	F24_rotated_hybrid_composition_4.h	/^	F24_rotated_hybrid_composition_4 (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F24_rotated_hybrid_composition_4	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F24_rotated_hybrid_composition_4::NUM_FUNC	F24_rotated_hybrid_composition_4.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F24_rotated_hybrid_composition_4	access:public
F24_rotated_hybrid_composition_4::f	F24_rotated_hybrid_composition_4.cpp	/^double F24_rotated_hybrid_composition_4::f(double *x,int length) {$/;"	f	class:F24_rotated_hybrid_composition_4	signature:(double *x,int length)
F24_rotated_hybrid_composition_4::f	F24_rotated_hybrid_composition_4.h	/^	double f(double *x,int length);$/;"	p	class:F24_rotated_hybrid_composition_4	access:public	signature:(double *x,int length)
F24_rotated_hybrid_composition_4::m_M	F24_rotated_hybrid_composition_4.h	/^	double ***m_M;$/;"	m	class:F24_rotated_hybrid_composition_4	access:private
F24_rotated_hybrid_composition_4::m_fmax	F24_rotated_hybrid_composition_4.h	/^	double *m_fmax;$/;"	m	class:F24_rotated_hybrid_composition_4	access:private
F24_rotated_hybrid_composition_4::m_o	F24_rotated_hybrid_composition_4.h	/^	double **m_o;$/;"	m	class:F24_rotated_hybrid_composition_4	access:private
F24_rotated_hybrid_composition_4::m_testPoint	F24_rotated_hybrid_composition_4.h	/^	double *m_testPoint;$/;"	m	class:F24_rotated_hybrid_composition_4	access:private
F24_rotated_hybrid_composition_4::m_testPointM	F24_rotated_hybrid_composition_4.h	/^	double *m_testPointM;$/;"	m	class:F24_rotated_hybrid_composition_4	access:private
F24_rotated_hybrid_composition_4::m_w	F24_rotated_hybrid_composition_4.h	/^	double *m_w;$/;"	m	class:F24_rotated_hybrid_composition_4	access:private
F24_rotated_hybrid_composition_4::m_z	F24_rotated_hybrid_composition_4.h	/^	double **m_z;$/;"	m	class:F24_rotated_hybrid_composition_4	access:private
F24_rotated_hybrid_composition_4::m_zM	F24_rotated_hybrid_composition_4.h	/^	double **m_zM;$/;"	m	class:F24_rotated_hybrid_composition_4	access:private
F24_rotated_hybrid_composition_4::theJob	F24_rotated_hybrid_composition_4.h	/^	MyHCJob24 theJob;$/;"	m	class:F24_rotated_hybrid_composition_4	access:private
F25_rotated_hybrid_composition_4_bound	F25_rotated_hybrid_composition_4_bound.cpp	/^F25_rotated_hybrid_composition_4_bound::F25_rotated_hybrid_composition_4_bound (int dimension, double bias) {$/;"	f	class:F25_rotated_hybrid_composition_4_bound	signature:(int dimension, double bias)
F25_rotated_hybrid_composition_4_bound	F25_rotated_hybrid_composition_4_bound.cpp	/^F25_rotated_hybrid_composition_4_bound::F25_rotated_hybrid_composition_4_bound (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F25_rotated_hybrid_composition_4_bound	signature:(int dimension, double bias, string file_data, string file_m)
F25_rotated_hybrid_composition_4_bound	F25_rotated_hybrid_composition_4_bound.h	/^	F25_rotated_hybrid_composition_4_bound (int dimension, double bias);$/;"	p	class:F25_rotated_hybrid_composition_4_bound	access:public	signature:(int dimension, double bias)
F25_rotated_hybrid_composition_4_bound	F25_rotated_hybrid_composition_4_bound.h	/^	F25_rotated_hybrid_composition_4_bound (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F25_rotated_hybrid_composition_4_bound	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F25_rotated_hybrid_composition_4_bound	F25_rotated_hybrid_composition_4_bound.h	/^class F25_rotated_hybrid_composition_4_bound:public test_func {$/;"	c	inherits:test_func
F25_rotated_hybrid_composition_4_bound::F25_rotated_hybrid_composition_4_bound	F25_rotated_hybrid_composition_4_bound.cpp	/^F25_rotated_hybrid_composition_4_bound::F25_rotated_hybrid_composition_4_bound (int dimension, double bias) {$/;"	f	class:F25_rotated_hybrid_composition_4_bound	signature:(int dimension, double bias)
F25_rotated_hybrid_composition_4_bound::F25_rotated_hybrid_composition_4_bound	F25_rotated_hybrid_composition_4_bound.cpp	/^F25_rotated_hybrid_composition_4_bound::F25_rotated_hybrid_composition_4_bound (int dimension, double bias, string file_data, string file_m) {$/;"	f	class:F25_rotated_hybrid_composition_4_bound	signature:(int dimension, double bias, string file_data, string file_m)
F25_rotated_hybrid_composition_4_bound::F25_rotated_hybrid_composition_4_bound	F25_rotated_hybrid_composition_4_bound.h	/^	F25_rotated_hybrid_composition_4_bound (int dimension, double bias);$/;"	p	class:F25_rotated_hybrid_composition_4_bound	access:public	signature:(int dimension, double bias)
F25_rotated_hybrid_composition_4_bound::F25_rotated_hybrid_composition_4_bound	F25_rotated_hybrid_composition_4_bound.h	/^	F25_rotated_hybrid_composition_4_bound (int dimension, double bias, string file_data, string file_m);$/;"	p	class:F25_rotated_hybrid_composition_4_bound	access:public	signature:(int dimension, double bias, string file_data, string file_m)
F25_rotated_hybrid_composition_4_bound::NUM_FUNC	F25_rotated_hybrid_composition_4_bound.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:public
F25_rotated_hybrid_composition_4_bound::f	F25_rotated_hybrid_composition_4_bound.cpp	/^double F25_rotated_hybrid_composition_4_bound::f(double *x,int length) {$/;"	f	class:F25_rotated_hybrid_composition_4_bound	signature:(double *x,int length)
F25_rotated_hybrid_composition_4_bound::f	F25_rotated_hybrid_composition_4_bound.h	/^	double f(double* x,int length);$/;"	p	class:F25_rotated_hybrid_composition_4_bound	access:public	signature:(double* x,int length)
F25_rotated_hybrid_composition_4_bound::m_M	F25_rotated_hybrid_composition_4_bound.h	/^	double ***m_M;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:private
F25_rotated_hybrid_composition_4_bound::m_fmax	F25_rotated_hybrid_composition_4_bound.h	/^	double *m_fmax;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:private
F25_rotated_hybrid_composition_4_bound::m_o	F25_rotated_hybrid_composition_4_bound.h	/^	double **m_o;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:private
F25_rotated_hybrid_composition_4_bound::m_testPoint	F25_rotated_hybrid_composition_4_bound.h	/^	double *m_testPoint;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:private
F25_rotated_hybrid_composition_4_bound::m_testPointM	F25_rotated_hybrid_composition_4_bound.h	/^	double *m_testPointM;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:private
F25_rotated_hybrid_composition_4_bound::m_w	F25_rotated_hybrid_composition_4_bound.h	/^	double *m_w;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:private
F25_rotated_hybrid_composition_4_bound::m_z	F25_rotated_hybrid_composition_4_bound.h	/^	double **m_z;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:private
F25_rotated_hybrid_composition_4_bound::m_zM	F25_rotated_hybrid_composition_4_bound.h	/^	double **m_zM;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:private
F25_rotated_hybrid_composition_4_bound::theJob	F25_rotated_hybrid_composition_4_bound.h	/^	MyHCJob25 theJob;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:private
F26_8_peaks1	F26_8_peaks1.cpp	/^F26_8_peaks1::F26_8_peaks1(int dimension, double bias)$/;"	f	class:F26_8_peaks1	signature:(int dimension, double bias)
F26_8_peaks1	F26_8_peaks1.h	/^		F26_8_peaks1 (int dimension, double bias);$/;"	p	class:F26_8_peaks1	access:public	signature:(int dimension, double bias)
F26_8_peaks1	F26_8_peaks1.h	/^class F26_8_peaks1:public test_func{$/;"	c	inherits:test_func
F26_8_peaks1::F26_8_peaks1	F26_8_peaks1.cpp	/^F26_8_peaks1::F26_8_peaks1(int dimension, double bias)$/;"	f	class:F26_8_peaks1	signature:(int dimension, double bias)
F26_8_peaks1::F26_8_peaks1	F26_8_peaks1.h	/^		F26_8_peaks1 (int dimension, double bias);$/;"	p	class:F26_8_peaks1	access:public	signature:(int dimension, double bias)
F26_8_peaks1::a	F26_8_peaks1.h	/^		double *a;$/;"	m	class:F26_8_peaks1	access:private
F26_8_peaks1::f	F26_8_peaks1.cpp	/^double F26_8_peaks1::f(double *x,int length)$/;"	f	class:F26_8_peaks1	signature:(double *x,int length)
F26_8_peaks1::f	F26_8_peaks1.h	/^		double f(double *x,int length);$/;"	p	class:F26_8_peaks1	access:public	signature:(double *x,int length)
F27_8_peaks2	F27_8_peaks2.cpp	/^F27_8_peaks2::F27_8_peaks2(int dimension, double bias)$/;"	f	class:F27_8_peaks2	signature:(int dimension, double bias)
F27_8_peaks2	F27_8_peaks2.h	/^		F27_8_peaks2 (int dimension, double bias);$/;"	p	class:F27_8_peaks2	access:public	signature:(int dimension, double bias)
F27_8_peaks2	F27_8_peaks2.h	/^class F27_8_peaks2:public test_func{$/;"	c	inherits:test_func
F27_8_peaks2::F27_8_peaks2	F27_8_peaks2.cpp	/^F27_8_peaks2::F27_8_peaks2(int dimension, double bias)$/;"	f	class:F27_8_peaks2	signature:(int dimension, double bias)
F27_8_peaks2::F27_8_peaks2	F27_8_peaks2.h	/^		F27_8_peaks2 (int dimension, double bias);$/;"	p	class:F27_8_peaks2	access:public	signature:(int dimension, double bias)
F27_8_peaks2::a	F27_8_peaks2.h	/^		double *a;$/;"	m	class:F27_8_peaks2	access:private
F27_8_peaks2::f	F27_8_peaks2.cpp	/^double F27_8_peaks2::f(double *x,int length)$/;"	f	class:F27_8_peaks2	signature:(double *x,int length)
F27_8_peaks2::f	F27_8_peaks2.h	/^		double f(double *x,int length);$/;"	p	class:F27_8_peaks2	access:public	signature:(double *x,int length)
F8	benchmark.cpp	/^double F8(double x) {$/;"	f	signature:(double x)
F8	benchmark.h	/^	double F8(double x);$/;"	p	signature:(double x)
F8F2	benchmark.cpp	/^double F8F2(double *x,int length) {$/;"	f	signature:(double *x,int length)
F8F2	benchmark.h	/^	double F8F2(double *x,int length);$/;"	p	signature:(double *x,int length)
FLAG	Makefile	/^FLAG = -c -g -I\/usr\/include$/;"	m
FUNCTION_NAME1	F01_shifted_sphere.h	/^const string FUNCTION_NAME1="Shifted Sphere Function";$/;"	v
FUNCTION_NAME10	F10_shifted_rotated_rastrigin.h	/^const string FUNCTION_NAME10 = "Shifted Rotated Rastrigin's Function";$/;"	v
FUNCTION_NAME11	F11_shifted_rotated_weierstrass.h	/^const string FUNCTION_NAME11 = "Shifted Rotated Weierstrass Function";$/;"	v
FUNCTION_NAME12	F12_schwefel.h	/^const string FUNCTION_NAME12 = "Schwefel's Problem 2.13";$/;"	v
FUNCTION_NAME13	F13_shifted_expanded_griewank_rosenbrock.h	/^const string FUNCTION_NAME13 = "Shifted Expanded Griewank's plus Rosenbrock's Function";$/;"	v
FUNCTION_NAME14	F14_shifted_rotated_expanded_scaffer.h	/^const string FUNCTION_NAME14 = "Shifted Rotated Expanded Scaffer's F6 Function";$/;"	v
FUNCTION_NAME15	F15_hybrid_composition_1.h	/^const string FUNCTION_NAME15 = "Hybrid Composition Function 1";$/;"	v
FUNCTION_NAME16	F16_rotated_hybrid_composition_1.h	/^const string FUNCTION_NAME16 = "Rotated Hybrid Composition Function 1";$/;"	v
FUNCTION_NAME17	F17_rotated_hybrid_composition_1_noise.h	/^const string FUNCTION_NAME17 = "Rotated Hybrid Composition Function 1 with Noise in Fitness";$/;"	v
FUNCTION_NAME18	F18_rotated_hybrid_composition_2.h	/^const string FUNCTION_NAME18 = "Rotated Hybrid Composition Function 2";$/;"	v
FUNCTION_NAME19	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^const string FUNCTION_NAME19 = "Rotated Hybrid Composition Function 2 with narrow basin global optimum";$/;"	v
FUNCTION_NAME2	F02_shifted_schwefel.h	/^const string FUNCTION_NAME2="Shifted Schwefel's Problem 1.2";$/;"	v
FUNCTION_NAME20	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^const string FUNCTION_NAME20 = "Rotated Hybrid Composition Function 2 with Global Optimimum on the Bounds";$/;"	v
FUNCTION_NAME21	F21_rotated_hybrid_composition_3.h	/^const string FUNCTION_NAME21 = "Rotated Hybrid Composition Function 3";$/;"	v
FUNCTION_NAME22	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^const string FUNCTION_NAME22 = "Rotated Hybrid Composition Function 3 with High Condition Number Matrix";$/;"	v
FUNCTION_NAME23	F23_noncontinuous_rotated_hybrid_composition_3.h	/^const string FUNCTION_NAME23 = "Non-Continuous Rotated Hybrid Composition Function 3";$/;"	v
FUNCTION_NAME24	F24_rotated_hybrid_composition_4.h	/^const string FUNCTION_NAME24 = "Rotated Hybrid Composition Function 4";$/;"	v
FUNCTION_NAME25	F25_rotated_hybrid_composition_4_bound.h	/^const string FUNCTION_NAME25 = "Rotated Hybrid Composition Function 4 without bounds";$/;"	v
FUNCTION_NAME3	F03_shifted_rotated_high_cond_elliptic.h	/^const string FUNCTION_NAME3 = "Shifted Rotated High Conditioned Elliptic Function";$/;"	v
FUNCTION_NAME4	F04_shifted_schwefel_noise.h	/^const string FUNCTION_NAME4 = "Shifted Schwefel's Problem 1.2 with Noise in Fitness";$/;"	v
FUNCTION_NAME5	F05_schwefel_global_opt_bound.h	/^const string FUNCTION_NAME5 = "Schwefel's Problem 2.6 with Global Optimum on Bounds";$/;"	v
FUNCTION_NAME6	F06_shifted_rosenbrock.h	/^const string FUNCTION_NAME6 = "Shifted Rosenbrock's Function";$/;"	v
FUNCTION_NAME7	F07_shifted_rotated_griewank.h	/^const string FUNCTION_NAME7 = "Shifted Rotated Griewank's Function without Bounds";$/;"	v
FUNCTION_NAME8	F08_shifted_rotated_ackley_global_opt_bound.h	/^const string FUNCTION_NAME8 = "Shifted Rotated Ackley's Function with Global Optimum on Bounds";$/;"	v
FUNCTION_NAME9	F09_shifted_rastrigin.h	/^const string FUNCTION_NAME9 = "Shifted Rastrigin's Function";$/;"	v
Fitness	chromosome.hpp	/^		double Fitness;$/;"	m	class:chromosome	access:public
HCJob	HCJob.h	/^	HCJob() {$/;"	f	class:HCJob	access:public	signature:()
HCJob	HCJob.h	/^class HCJob {$/;"	c
HCJob::C	HCJob.h	/^	double C;$/;"	m	class:HCJob	access:public
HCJob::HCJob	HCJob.h	/^	HCJob() {$/;"	f	class:HCJob	access:public	signature:()
HCJob::M	HCJob.h	/^	double ***M;$/;"	m	class:HCJob	access:public
HCJob::basic_func	HCJob.h	/^	virtual double basic_func(int func_no, double *x,int length)=0;$/;"	p	class:HCJob	access:public	signature:(int func_no, double *x,int length)
HCJob::biases	HCJob.h	/^	double *biases;$/;"	m	class:HCJob	access:public
HCJob::fmax	HCJob.h	/^	double *fmax;$/;"	m	class:HCJob	access:public
HCJob::lambda	HCJob.h	/^	double *lambda;$/;"	m	class:HCJob	access:public
HCJob::num_dim	HCJob.h	/^	int num_dim;$/;"	m	class:HCJob	access:public
HCJob::num_func	HCJob.h	/^	int num_func;$/;"	m	class:HCJob	access:public
HCJob::o	HCJob.h	/^	double **o;$/;"	m	class:HCJob	access:public
HCJob::sigma	HCJob.h	/^	double *sigma;$/;"	m	class:HCJob	access:public
HCJob::w	HCJob.h	/^	double *w;$/;"	m	class:HCJob	access:public
HCJob::z	HCJob.h	/^	double **z;$/;"	m	class:HCJob	access:public
HCJob::zM	HCJob.h	/^	double **zM;$/;"	m	class:HCJob	access:public
Kmax	F11_shifted_rotated_weierstrass.h	/^		static const int Kmax = 20;$/;"	m	class:F11_shifted_rotated_weierstrass	access:public
L	subset.hpp	/^		vector<int> L;         \/\/ a subset$/;"	m	class:subset	access:public
LFLAG	Makefile	/^LFLAG = -L\/usr\/lib64 -lgsl -lgslcblas -lm$/;"	m
Length	chromosome.hpp	/^		int    Length;$/;"	m	class:chromosome	access:private
M	HCJob.h	/^	double ***M;$/;"	m	class:HCJob	access:public
MAX_GENERATIONS	parameter.hpp	/^const int MAX_GENERATIONS             = 61;$/;"	v
MAX_SUPPORT_DIM	benchmark.h	/^	static const int MAX_SUPPORT_DIM = 100;$/;"	v
MC	mpm.hpp	/^		double MC() { return mc; }$/;"	f	class:mpm	access:public	signature:()
MC	subset.hpp	/^		double MC() { return mc; }$/;"	f	class:subset	access:public	signature:()
MatingPool	population.hpp	/^		int        *MatingPool;         \/\/ mating pool$/;"	m	class:population	access:private
MaxFit	population.hpp	/^		double     MaxFit;              \/\/ maximum fitness$/;"	m	class:population	access:private
MinFit	population.hpp	/^		double     MinFit;              \/\/ minimum fitness$/;"	m	class:population	access:private
MyHCJob15	F15_hybrid_composition_1.h	/^class MyHCJob15:public HCJob {$/;"	c	inherits:HCJob
MyHCJob15::basic_func	F15_hybrid_composition_1.cpp	/^double MyHCJob15::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob15	signature:(int func_no, double *x,int length)
MyHCJob15::basic_func	F15_hybrid_composition_1.h	/^	double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob15	access:public	signature:(int func_no, double *x,int length)
MyHCJob16	F16_rotated_hybrid_composition_1.h	/^class MyHCJob16:public HCJob {$/;"	c	inherits:HCJob
MyHCJob16::basic_func	F16_rotated_hybrid_composition_1.cpp	/^double MyHCJob16::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob16	signature:(int func_no, double *x,int length)
MyHCJob16::basic_func	F16_rotated_hybrid_composition_1.h	/^	double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob16	access:public	signature:(int func_no, double *x,int length)
MyHCJob17	F17_rotated_hybrid_composition_1_noise.h	/^class MyHCJob17:public HCJob {$/;"	c	inherits:HCJob
MyHCJob17::basic_func	F17_rotated_hybrid_composition_1_noise.cpp	/^double MyHCJob17::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob17	signature:(int func_no, double *x,int length)
MyHCJob17::basic_func	F17_rotated_hybrid_composition_1_noise.h	/^	double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob17	access:public	signature:(int func_no, double *x,int length)
MyHCJob18	F18_rotated_hybrid_composition_2.h	/^class MyHCJob18:public HCJob {$/;"	c	inherits:HCJob
MyHCJob18::basic_func	F18_rotated_hybrid_composition_2.cpp	/^double MyHCJob18::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob18	signature:(int func_no, double *x,int length)
MyHCJob18::basic_func	F18_rotated_hybrid_composition_2.h	/^		double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob18	access:public	signature:(int func_no, double *x,int length)
MyHCJob19	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^class MyHCJob19:public HCJob {$/;"	c	inherits:HCJob
MyHCJob19::basic_func	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.cpp	/^double MyHCJob19::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob19	signature:(int func_no, double *x,int length)
MyHCJob19::basic_func	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^		double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob19	access:public	signature:(int func_no, double *x,int length)
MyHCJob20	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^class MyHCJob20:public HCJob {$/;"	c	inherits:HCJob
MyHCJob20::basic_func	F20_rotated_hybrid_composition_2_global_opt_bound.cpp	/^double MyHCJob20::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob20	signature:(int func_no, double *x,int length)
MyHCJob20::basic_func	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob20	access:public	signature:(int func_no, double *x,int length)
MyHCJob21	F21_rotated_hybrid_composition_3.h	/^class MyHCJob21:public HCJob {$/;"	c	inherits:HCJob
MyHCJob21::basic_func	F21_rotated_hybrid_composition_3.cpp	/^double MyHCJob21::basic_func(int func_no, double* x,int length) {$/;"	f	class:MyHCJob21	signature:(int func_no, double* x,int length)
MyHCJob21::basic_func	F21_rotated_hybrid_composition_3.h	/^		double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob21	access:public	signature:(int func_no, double *x,int length)
MyHCJob22	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^class MyHCJob22:public HCJob {$/;"	c	inherits:HCJob
MyHCJob22::basic_func	F22_rotated_hybrid_composition_3_high_cond_num_matrix.cpp	/^double MyHCJob22::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob22	signature:(int func_no, double *x,int length)
MyHCJob22::basic_func	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob22	access:public	signature:(int func_no, double *x,int length)
MyHCJob23	F23_noncontinuous_rotated_hybrid_composition_3.h	/^class MyHCJob23:public HCJob {$/;"	c	inherits:HCJob
MyHCJob23::basic_func	F23_noncontinuous_rotated_hybrid_composition_3.cpp	/^double MyHCJob23::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob23	signature:(int func_no, double *x,int length)
MyHCJob23::basic_func	F23_noncontinuous_rotated_hybrid_composition_3.h	/^		double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob23	access:public	signature:(int func_no, double *x,int length)
MyHCJob24	F24_rotated_hybrid_composition_4.h	/^class MyHCJob24:public HCJob {$/;"	c	inherits:HCJob
MyHCJob24::basic_func	F24_rotated_hybrid_composition_4.cpp	/^double MyHCJob24::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob24	signature:(int func_no, double *x,int length)
MyHCJob24::basic_func	F24_rotated_hybrid_composition_4.h	/^	double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob24	access:public	signature:(int func_no, double *x,int length)
MyHCJob25	F25_rotated_hybrid_composition_4_bound.h	/^class MyHCJob25:public HCJob {$/;"	c	inherits:HCJob
MyHCJob25::basic_func	F25_rotated_hybrid_composition_4_bound.cpp	/^double MyHCJob25::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob25	signature:(int func_no, double *x,int length)
MyHCJob25::basic_func	F25_rotated_hybrid_composition_4_bound.h	/^		double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob25	access:public	signature:(int func_no, double *x,int length)
NUM_FUNC	F15_hybrid_composition_1.h	/^	const static int NUM_FUNC = 10;$/;"	m	class:F15_hybrid_composition_1	access:private
NUM_FUNC	F16_rotated_hybrid_composition_1.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F16_rotated_hybrid_composition_1	access:public
NUM_FUNC	F17_rotated_hybrid_composition_1_noise.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:public
NUM_FUNC	F18_rotated_hybrid_composition_2.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F18_rotated_hybrid_composition_2	access:public
NUM_FUNC	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:public
NUM_FUNC	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:public
NUM_FUNC	F21_rotated_hybrid_composition_3.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F21_rotated_hybrid_composition_3	access:public
NUM_FUNC	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:public
NUM_FUNC	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:public
NUM_FUNC	F24_rotated_hybrid_composition_4.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F24_rotated_hybrid_composition_4	access:public
NUM_FUNC	F25_rotated_hybrid_composition_4_bound.h	/^	static const int NUM_FUNC = 10;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:public
NUM_TEST_FUNC	benchmark.h	/^	static const int NUM_TEST_FUNC = 25;$/;"	v
OBJS	Makefile	/^OBJS  = main.o \\$/;"	m
PIx2	benchmark.h	/^	static const double PIx2 = M_PI * 2.0;$/;"	v
PopSize	population.hpp	/^		int        PopSize;             \/\/ population size$/;"	m	class:population	access:private
RANDOM	main.cpp	/^randomG RANDOM;$/;"	v
SUS	utility.cpp	/^void SUS(double* prob, int prob_size, int* counts, int counts_size)$/;"	f	signature:(double* prob, int prob_size, int* counts, int counts_size)
SUS	utility.hpp	/^void	 SUS(double* prob, int prob_size, int* counts, int counts_size);$/;"	p	signature:(double* prob, int prob_size, int* counts, int counts_size)
ScafferF6	benchmark.cpp	/^double ScafferF6(double x, double y) {$/;"	f	signature:(double x, double y)
ScafferF6	benchmark.h	/^	double ScafferF6(double x, double y);$/;"	p	signature:(double x, double y)
Stddev	population.hpp	/^		double     Stddev;$/;"	m	class:population	access:private
T	codetable.h	/^	vector<code_type> T;$/;"	m	class:code_table	access:public
_F01_shifted_sphere	F01_shifted_sphere.h	2;"	d
_F02_shifted_schwefel	F02_shifted_schwefel.h	2;"	d
_F03_shifted_rotated_high_cond_elliptic	F03_shifted_rotated_high_cond_elliptic.h	2;"	d
_F04_shifted_schwefel_noise	F04_shifted_schwefel_noise.h	2;"	d
_F05_schwefel_global_opt_bound	F05_schwefel_global_opt_bound.h	2;"	d
_F06_shifted_rosenbrock	F06_shifted_rosenbrock.h	2;"	d
_F07_shifted_rotated_griewank	F07_shifted_rotated_griewank.h	2;"	d
_F08_shifted_rotated_ackley_global_opt_bound	F08_shifted_rotated_ackley_global_opt_bound.h	2;"	d
_F09_shifted_rastrigin	F09_shifted_rastrigin.h	2;"	d
_F10_shifted_rotated_rastrigin	F10_shifted_rotated_rastrigin.h	2;"	d
_F11_shifted_rotated_weierstrass	F11_shifted_rotated_weierstrass.h	2;"	d
_F12_schwefel	F12_schwefel.h	2;"	d
_F13_shifted_expanded_griewank_rosenbrock	F13_shifted_expanded_griewank_rosenbrock.h	2;"	d
_F14_shifted_rotated_expanded_scaffer	F14_shifted_rotated_expanded_scaffer.h	2;"	d
_F15_hybrid_composition_1	F15_hybrid_composition_1.h	2;"	d
_F16_rotated_hybrid_composition_1	F16_rotated_hybrid_composition_1.h	2;"	d
_F17_rotated_hybrid_composition_1_noise	F17_rotated_hybrid_composition_1_noise.h	2;"	d
_F18_rotated_hybrid_composition_2	F18_rotated_hybrid_composition_2.h	2;"	d
_F19_rotated_hybrid_composition_2_narrow_basin_global_opt	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	2;"	d
_F20_rotated_hybrid_composition_2_global_opt_bound	F20_rotated_hybrid_composition_2_global_opt_bound.h	2;"	d
_F21_rotated_hybrid_composition_3	F21_rotated_hybrid_composition_3.h	2;"	d
_F22_rotated_hybrid_composition_3_high_cond_num_matrix	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	2;"	d
_F23_noncontinuous_rotated_hybrid_composition_3	F23_noncontinuous_rotated_hybrid_composition_3.h	2;"	d
_F24_rotated_hybrid_composition_4	F24_rotated_hybrid_composition_4.h	2;"	d
_F25_rotated_hybrid_composition_4_bound	F25_rotated_hybrid_composition_4_bound.h	2;"	d
_F26_8_peaks1	F26_8_peaks1.h	2;"	d
_F27_8_peaks2	F27_8_peaks2.h	2;"	d
_HCJob	HCJob.h	2;"	d
_benchmark	benchmark.h	2;"	d
_cache_hpp	cache.hpp	2;"	d
_chromosome_hpp	chromosome.hpp	2;"	d
_codetable_h	codetable.h	2;"	d
_ecga_hpp	ecga.hpp	2;"	d
_elem_h	elem.h	2;"	d
_gene_hpp	gene.hpp	2;"	d
_mpm_hpp	mpm.hpp	2;"	d
_objfunc_hpp	objfunc.hpp	2;"	d
_parameter_hpp	parameter.hpp	13;"	d
_population_hpp	population.hpp	2;"	d
_random_hpp	random.hpp	2;"	d
_subset_hpp	subset.hpp	2;"	d
_test_func	test_func.h	2;"	d
_utility_hpp	utility.hpp	13;"	d
a	F11_shifted_rotated_weierstrass.h	/^static const double a = 0.5;$/;"	v
a	F26_8_peaks1.h	/^		double *a;$/;"	m	class:F26_8_peaks1	access:private
a	F27_8_peaks2.h	/^		double *a;$/;"	m	class:F27_8_peaks2	access:private
ackley	benchmark.cpp	/^double ackley(double *x,int length) {$/;"	f	signature:(double *x,int length)
ackley	benchmark.h	/^	double ackley(double *x,int length);$/;"	p	signature:(double *x,int length)
add	codetable.cpp	/^int code_table::add(double max,double min)$/;"	f	class:code_table	signature:(double max,double min)
add	codetable.h	/^	int add(double max,double min);$/;"	p	class:code_table	access:public	signature:(double max,double min)
allele	gene.hpp	/^		double allele() { return Allele; }$/;"	f	class:gene	access:public	signature:()
allocate_addr	utility.cpp	/^int allocate_addr(double *prob)		\/\/verified!!$/;"	f	signature:(double *prob)
allocate_addr	utility.hpp	/^int		allocate_addr(double *prob);$/;"	p	signature:(double *prob)
ans	main.cpp	/^double parameter::ans;$/;"	m	class:parameter	file:
ans	parameter.hpp	/^  static double ans;$/;"	m	class:parameter	access:public
avgfit	population.hpp	/^		double avgfit() { return AvgFit; }$/;"	f	class:population	access:public	signature:()
b	F11_shifted_rotated_weierstrass.h	/^static const double b = 3.0;$/;"	v
basic_func	F15_hybrid_composition_1.cpp	/^double MyHCJob15::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob15	signature:(int func_no, double *x,int length)
basic_func	F15_hybrid_composition_1.h	/^	double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob15	access:public	signature:(int func_no, double *x,int length)
basic_func	F16_rotated_hybrid_composition_1.cpp	/^double MyHCJob16::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob16	signature:(int func_no, double *x,int length)
basic_func	F16_rotated_hybrid_composition_1.h	/^	double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob16	access:public	signature:(int func_no, double *x,int length)
basic_func	F17_rotated_hybrid_composition_1_noise.cpp	/^double MyHCJob17::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob17	signature:(int func_no, double *x,int length)
basic_func	F17_rotated_hybrid_composition_1_noise.h	/^	double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob17	access:public	signature:(int func_no, double *x,int length)
basic_func	F18_rotated_hybrid_composition_2.cpp	/^double MyHCJob18::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob18	signature:(int func_no, double *x,int length)
basic_func	F18_rotated_hybrid_composition_2.h	/^		double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob18	access:public	signature:(int func_no, double *x,int length)
basic_func	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.cpp	/^double MyHCJob19::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob19	signature:(int func_no, double *x,int length)
basic_func	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^		double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob19	access:public	signature:(int func_no, double *x,int length)
basic_func	F20_rotated_hybrid_composition_2_global_opt_bound.cpp	/^double MyHCJob20::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob20	signature:(int func_no, double *x,int length)
basic_func	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob20	access:public	signature:(int func_no, double *x,int length)
basic_func	F21_rotated_hybrid_composition_3.cpp	/^double MyHCJob21::basic_func(int func_no, double* x,int length) {$/;"	f	class:MyHCJob21	signature:(int func_no, double* x,int length)
basic_func	F21_rotated_hybrid_composition_3.h	/^		double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob21	access:public	signature:(int func_no, double *x,int length)
basic_func	F22_rotated_hybrid_composition_3_high_cond_num_matrix.cpp	/^double MyHCJob22::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob22	signature:(int func_no, double *x,int length)
basic_func	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob22	access:public	signature:(int func_no, double *x,int length)
basic_func	F23_noncontinuous_rotated_hybrid_composition_3.cpp	/^double MyHCJob23::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob23	signature:(int func_no, double *x,int length)
basic_func	F23_noncontinuous_rotated_hybrid_composition_3.h	/^		double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob23	access:public	signature:(int func_no, double *x,int length)
basic_func	F24_rotated_hybrid_composition_4.cpp	/^double MyHCJob24::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob24	signature:(int func_no, double *x,int length)
basic_func	F24_rotated_hybrid_composition_4.h	/^	double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob24	access:public	signature:(int func_no, double *x,int length)
basic_func	F25_rotated_hybrid_composition_4_bound.cpp	/^double MyHCJob25::basic_func(int func_no, double *x,int length) {$/;"	f	class:MyHCJob25	signature:(int func_no, double *x,int length)
basic_func	F25_rotated_hybrid_composition_4_bound.h	/^		double basic_func(int func_no, double *x,int length);$/;"	p	class:MyHCJob25	access:public	signature:(int func_no, double *x,int length)
basic_func	HCJob.h	/^	virtual double basic_func(int func_no, double *x,int length)=0;$/;"	p	class:HCJob	access:public	signature:(int func_no, double *x,int length)
bernoulli	random.cpp	/^bool randomG::bernoulli( double p )$/;"	f	class:randomG	signature:( double p )
bernoulli	random.hpp	/^		bool   bernoulli( double p );$/;"	p	class:randomG	access:public	signature:( double p )
best	population.hpp	/^		int best() { return Best; }$/;"	f	class:population	access:public	signature:()
bias	test_func.h	/^	double bias() {$/;"	f	class:test_func	access:public	signature:()
biases	HCJob.h	/^	double *biases;$/;"	m	class:HCJob	access:public
cache	cache.cpp	/^cache::cache()$/;"	f	class:cache	signature:()
cache	cache.hpp	/^		cache();$/;"	p	class:cache	access:public	signature:()
cache	cache.hpp	/^class cache$/;"	c
cache::E	cache.hpp	/^		int *E;           \/\/ a collection of empty cache entries$/;"	m	class:cache	access:private
cache::Esize	cache.hpp	/^		int Esize;        \/\/ number of elements of E$/;"	m	class:cache	access:private
cache::cache	cache.cpp	/^cache::cache()$/;"	f	class:cache	signature:()
cache::cache	cache.hpp	/^		cache();$/;"	p	class:cache	access:public	signature:()
cache::compact	cache.cpp	/^void cache::compact()$/;"	f	class:cache	signature:()
cache::compact	cache.hpp	/^		void compact();$/;"	p	class:cache	access:public	signature:()
cache::insert	cache.cpp	/^void cache::insert( int id1, int id2, subset &S, int popsize )$/;"	f	class:cache	signature:( int id1, int id2, subset &S, int popsize )
cache::insert	cache.hpp	/^		void insert( int id1, int id2, subset &S, int popsize );$/;"	p	class:cache	access:public	signature:( int id1, int id2, subset &S, int popsize )
cache::maxSz	cache.hpp	/^		int maxSz;        \/\/ maximum size of the cache ( ell*(ell+1)\/2)$/;"	m	class:cache	access:private
cache::mergedSet	cache.hpp	/^		subset *mergedSet;   \/\/ an array of subsets$/;"	m	class:cache	access:public
cache::operator <<	cache.hpp	/^		friend ostream &operator<< (ostream &out, cache &C);$/;"	p	class:cache	access:friend	signature:(ostream &out, cache &C)
cache::removeEntry	cache.cpp	/^void cache::removeEntry( int id )$/;"	f	class:cache	signature:( int id )
cache::removeEntry	cache.hpp	/^		void removeEntry( int id );$/;"	p	class:cache	access:public	signature:( int id )
cache::replace_X_by_Y	cache.cpp	/^void cache::replace_X_by_Y( int x, int y )$/;"	f	class:cache	signature:( int x, int y )
cache::replace_X_by_Y	cache.hpp	/^		void replace_X_by_Y( int x, int y );$/;"	p	class:cache	access:public	signature:( int x, int y )
cache::size	cache.hpp	/^		long size() { return sz; }$/;"	f	class:cache	access:public	signature:()
cache::subset1_id	cache.hpp	/^		int *subset1_id;     \/\/ mergedSet = subset1 UNION subset2 $/;"	m	class:cache	access:public
cache::subset2_id	cache.hpp	/^		int *subset2_id;     \/\/ ids refer to MPM subsets$/;"	m	class:cache	access:public
cache::sz	cache.hpp	/^		int sz;           \/\/ number of subsets stored in the cache$/;"	m	class:cache	access:private
cache::~cache	cache.cpp	/^cache::~cache()$/;"	f	class:cache	signature:()
cache::~cache	cache.hpp	/^		~cache();$/;"	p	class:cache	access:public	signature:()
chrom_comp	population.cpp	/^int chrom_comp(const void *a,const void *b)$/;"	f	signature:(const void *a,const void *b)
chrom_comp	population.hpp	/^		friend int chrom_comp(const void *a,const void *b);$/;"	p	class:population	access:friend	signature:(const void *a,const void *b)
chromosome	chromosome.cpp	/^chromosome::chromosome( int ell )$/;"	f	class:chromosome	signature:( int ell )
chromosome	chromosome.cpp	/^chromosome::chromosome(const chromosome &chrom)$/;"	f	class:chromosome	signature:(const chromosome &chrom)
chromosome	chromosome.hpp	/^		chromosome( int ell = parameter::lchrom );$/;"	p	class:chromosome	access:public	signature:( int ell = parameter::lchrom )
chromosome	chromosome.hpp	/^		chromosome(const chromosome &chrom);$/;"	p	class:chromosome	access:public	signature:(const chromosome &chrom)
chromosome	chromosome.hpp	/^class chromosome$/;"	c
chromosome::Fitness	chromosome.hpp	/^		double Fitness;$/;"	m	class:chromosome	access:public
chromosome::Length	chromosome.hpp	/^		int    Length;$/;"	m	class:chromosome	access:private
chromosome::chromosome	chromosome.cpp	/^chromosome::chromosome( int ell )$/;"	f	class:chromosome	signature:( int ell )
chromosome::chromosome	chromosome.cpp	/^chromosome::chromosome(const chromosome &chrom)$/;"	f	class:chromosome	signature:(const chromosome &chrom)
chromosome::chromosome	chromosome.hpp	/^		chromosome( int ell = parameter::lchrom );$/;"	p	class:chromosome	access:public	signature:( int ell = parameter::lchrom )
chromosome::chromosome	chromosome.hpp	/^		chromosome(const chromosome &chrom);$/;"	p	class:chromosome	access:public	signature:(const chromosome &chrom)
chromosome::copyGenes	chromosome.cpp	/^void chromosome::copyGenes( chromosome &C, int *locus, int n )$/;"	f	class:chromosome	signature:( chromosome &C, int *locus, int n )
chromosome::copyGenes	chromosome.hpp	/^		void copyGenes( chromosome &C, int *locus, int n );$/;"	p	class:chromosome	access:public	signature:( chromosome &C, int *locus, int n )
chromosome::evaluate	chromosome.cpp	/^void chromosome::evaluate() { Fitness = objfunc(*this); };$/;"	f	class:chromosome	signature:()
chromosome::evaluate	chromosome.hpp	/^		void evaluate();$/;"	p	class:chromosome	access:public	signature:()
chromosome::fitness	chromosome.hpp	/^		double fitness() { return Fitness; }$/;"	f	class:chromosome	access:public	signature:()
chromosome::genes	chromosome.hpp	/^		gene   *genes;$/;"	m	class:chromosome	access:public
chromosome::length	chromosome.hpp	/^		int  length() { return Length; }$/;"	f	class:chromosome	access:public	signature:()
chromosome::operator <<	chromosome.hpp	/^		friend ostream &operator<< (ostream &out, chromosome &chrom);$/;"	p	class:chromosome	access:friend	signature:(ostream &out, chromosome &chrom)
chromosome::operator =	chromosome.cpp	/^chromosome & chromosome::operator=(const chromosome &chrom)$/;"	f	class:chromosome	signature:(const chromosome &chrom)
chromosome::operator =	chromosome.hpp	/^		chromosome & operator=(const chromosome &chrom);$/;"	p	class:chromosome	access:public	signature:(const chromosome &chrom)
chromosome::operator []	chromosome.hpp	/^		gene & operator[](int loci) { return genes[loci]; }$/;"	f	class:chromosome	access:public	signature:(int loci)
chromosome::random	chromosome.cpp	/^void chromosome::random()$/;"	f	class:chromosome	signature:()
chromosome::random	chromosome.hpp	/^		void random();$/;"	p	class:chromosome	access:public	signature:()
chromosome::set_fitness	chromosome.hpp	/^		void set_fitness( double fit ) { Fitness = fit; }$/;"	f	class:chromosome	access:public	signature:( double fit )
chromosome::~chromosome	chromosome.cpp	/^chromosome::~chromosome()$/;"	f	class:chromosome	signature:()
chromosome::~chromosome	chromosome.hpp	/^		~chromosome();$/;"	p	class:chromosome	access:public	signature:()
code	gene.hpp	/^		int code;$/;"	m	class:gene	access:public
code_table	codetable.cpp	/^code_table::code_table(){ T.clear(); }$/;"	f	class:code_table	signature:()
code_table	codetable.h	/^	code_table();$/;"	p	class:code_table	access:public	signature:()
code_table	codetable.h	/^class code_table{$/;"	c
code_table::T	codetable.h	/^	vector<code_type> T;$/;"	m	class:code_table	access:public
code_table::add	codetable.cpp	/^int code_table::add(double max,double min)$/;"	f	class:code_table	signature:(double max,double min)
code_table::add	codetable.h	/^	int add(double max,double min);$/;"	p	class:code_table	access:public	signature:(double max,double min)
code_table::code_table	codetable.cpp	/^code_table::code_table(){ T.clear(); }$/;"	f	class:code_table	signature:()
code_table::code_table	codetable.h	/^	code_table();$/;"	p	class:code_table	access:public	signature:()
code_table::operator =	codetable.cpp	/^code_table & code_table::operator=( code_table & CT)$/;"	f	class:code_table	signature:( code_table & CT)
code_table::operator =	codetable.h	/^	code_table & operator=( code_table & CT);$/;"	p	class:code_table	access:public	signature:( code_table & CT)
code_table::size	codetable.h	/^	int size(){ return T.size(); };$/;"	f	class:code_table	access:public	signature:()
code_table::~code_table	codetable.cpp	/^code_table::~code_table(){ T.clear(); }$/;"	f	class:code_table	signature:()
code_table::~code_table	codetable.h	/^	~code_table();$/;"	p	class:code_table	access:public	signature:()
code_type	codetable.h	/^class code_type{$/;"	c
code_type::max	codetable.h	/^	double max,min;$/;"	m	class:code_type	access:public
code_type::min	codetable.h	/^	double max,min;$/;"	m	class:code_type	access:public
codegen	utility.cpp	/^double codegen(code_type ct)$/;"	f	signature:(code_type ct)
codegen	utility.hpp	/^double  codegen(code_type ct);$/;"	p	signature:(code_type ct)
combinedComplexity	mpm.cpp	/^void mpm::combinedComplexity()$/;"	f	class:mpm	signature:()
combinedComplexity	mpm.hpp	/^		void combinedComplexity();$/;"	p	class:mpm	access:public	signature:()
combinedComplexity	subset.cpp	/^void subset::combinedComplexity( population &pop )$/;"	f	class:subset	signature:( population &pop )
combinedComplexity	subset.hpp	/^		void combinedComplexity( population &pop );$/;"	p	class:subset	access:public	signature:( population &pop )
compact	cache.cpp	/^void cache::compact()$/;"	f	class:cache	signature:()
compact	cache.hpp	/^		void compact();$/;"	p	class:cache	access:public	signature:()
compressedPopulationComplexity	mpm.cpp	/^double mpm::compressedPopulationComplexity()$/;"	f	class:mpm	signature:()
compressedPopulationComplexity	mpm.hpp	/^		double compressedPopulationComplexity();$/;"	p	class:mpm	access:public	signature:()
compressedPopulationComplexity	subset.cpp	/^double subset::compressedPopulationComplexity( population &pop )$/;"	f	class:subset	signature:( population &pop )
compressedPopulationComplexity	subset.hpp	/^		double compressedPopulationComplexity( population &pop );$/;"	p	class:subset	access:public	signature:( population &pop )
compute_freq_counts	subset.cpp	/^void subset::compute_freq_counts( population &pop )$/;"	f	class:subset	signature:( population &pop )
compute_freq_counts	subset.hpp	/^		void compute_freq_counts( population &pop );$/;"	p	class:subset	access:public	signature:( population &pop )
constant	F03_shifted_rotated_high_cond_elliptic.h	/^	double constant;$/;"	m	class:F03_shifted_rotated_high_cond_elliptic	access:private
converged	mpm.hpp	/^		bool converged() { return mc==0; }$/;"	f	class:mpm	access:public	signature:()
converged	population.cpp	/^bool population::converged()$/;"	f	class:population	signature:()
converged	population.hpp	/^		bool converged();$/;"	p	class:population	access:public	signature:()
copyGenes	chromosome.cpp	/^void chromosome::copyGenes( chromosome &C, int *locus, int n )$/;"	f	class:chromosome	signature:( chromosome &C, int *locus, int n )
copyGenes	chromosome.hpp	/^		void copyGenes( chromosome &C, int *locus, int n );$/;"	p	class:chromosome	access:public	signature:( chromosome &C, int *locus, int n )
counts	subset.hpp	/^		int *counts;$/;"	m	class:subset	access:public
cpc	mpm.hpp	/^		double  cpc;  \/\/ compressed population complexity$/;"	m	class:mpm	access:private
cpc	subset.hpp	/^		double cpc;  \/\/ compressed population complexity$/;"	m	class:subset	access:private
decode	utility.cpp	/^int decode(int *schema,int S,int *index)$/;"	f	signature:(int *schema,int S,int *index)
decode	utility.hpp	/^int     decode(int *schema,int S,int *index);$/;"	p	signature:(int *schema,int S,int *index)
decrease_rate	main.cpp	/^double parameter::decrease_rate;$/;"	m	class:parameter	file:
decrease_rate	parameter.hpp	/^  static double decrease_rate;$/;"	m	class:parameter	access:public
dimension	test_func.h	/^	int dimension() {$/;"	f	class:test_func	access:public	signature:()
done	ecga.cpp	/^bool ecga::done( population *pop, int gen )$/;"	f	class:ecga	signature:( population *pop, int gen )
done	ecga.hpp	/^		bool done( population *pop, int gen );$/;"	p	class:ecga	access:private	signature:( population *pop, int gen )
ecga	ecga.hpp	/^		ecga() {}$/;"	f	class:ecga	access:public	signature:()
ecga	ecga.hpp	/^class ecga$/;"	c
ecga::done	ecga.cpp	/^bool ecga::done( population *pop, int gen )$/;"	f	class:ecga	signature:( population *pop, int gen )
ecga::done	ecga.hpp	/^		bool done( population *pop, int gen );$/;"	p	class:ecga	access:private	signature:( population *pop, int gen )
ecga::ecga	ecga.hpp	/^		ecga() {}$/;"	f	class:ecga	access:public	signature:()
ecga::report	ecga.cpp	/^void ecga::report( ofstream &outfile, population *pop, int gen )$/;"	f	class:ecga	signature:( ofstream &outfile, population *pop, int gen )
ecga::report	ecga.hpp	/^		void report( ofstream &outfile, population *pop, int gen );$/;"	p	class:ecga	access:private	signature:( ofstream &outfile, population *pop, int gen )
ecga::run	ecga.cpp	/^void ecga::run( ofstream &outfile, ofstream &outfile2 )$/;"	f	class:ecga	signature:( ofstream &outfile, ofstream &outfile2 )
ecga::run	ecga.hpp	/^		void run( ofstream &outfile, ofstream &outfile2 );$/;"	p	class:ecga	access:public	signature:( ofstream &outfile, ofstream &outfile2 )
ecga::~ecga	ecga.hpp	/^		~ecga() {}$/;"	f	class:ecga	access:public	signature:()
elem	elem.h	/^class elem{$/;"	c
elem::elem_comp	elem.h	/^	friend int elem_comp(const void *a,const void *b)$/;"	f	class:elem	access:friend	signature:(const void *a,const void *b)
elem::num	elem.h	/^	int num;$/;"	m	class:elem	access:public
elem::val	elem.h	/^	double val;$/;"	m	class:elem	access:public
elem_comp	elem.h	/^	friend int elem_comp(const void *a,const void *b)$/;"	f	class:elem	access:friend	signature:(const void *a,const void *b)
elem_comp	population.cpp	/^int elem_comp(const void *a,const void *b);$/;"	p	file:	signature:(const void *a,const void *b)
elemsearch	population.cpp	/^int elemsearch(elem *ary,double val,int s,int e)$/;"	f	signature:(elem *ary,double val,int s,int e)
elemsearch	population.hpp	/^		friend int elemsearch(elem *ary,double val,int s,int e);$/;"	p	class:population	access:friend	signature:(elem *ary,double val,int s,int e)
elliptic	benchmark.cpp	/^double elliptic(double *x,int length) {$/;"	f	signature:(double *x,int length)
elliptic	benchmark.h	/^	double elliptic(double *x,int length);$/;"	p	signature:(double *x,int length)
encode	population.cpp	/^void population::encode(ofstream &out)$/;"	f	class:population	signature:(ofstream &out)
encode	population.hpp	/^		void encode(ofstream &out);$/;"	p	class:population	access:public	signature:(ofstream &out)
encode	utility.cpp	/^void encode(int addr, int *schema, int S, int *index)	\/\/verified!!$/;"	f	signature:(int addr, int *schema, int S, int *index)
encode	utility.hpp	/^void	encode(int addr, int *schema, int S, int *index);$/;"	p	signature:(int addr, int *schema, int S, int *index)
error	utility.cpp	/^void error( char *msg )$/;"	f	signature:( char *msg )
error	utility.hpp	/^void    error( char *msg );$/;"	p	signature:( char *msg )
errorcheck	utility.cpp	/^void errorcheck( char *str, bool condition )$/;"	f	signature:( char *str, bool condition )
errorcheck	utility.hpp	/^void    errorcheck( char *str, bool condition );$/;"	p	signature:( char *str, bool condition )
eva_fun	main.cpp	/^int    parameter::eva_fun;$/;"	m	class:parameter	file:
eva_fun	parameter.hpp	/^  static int eva_fun;$/;"	m	class:parameter	access:public
evaluate	chromosome.cpp	/^void chromosome::evaluate() { Fitness = objfunc(*this); };$/;"	f	class:chromosome	signature:()
evaluate	chromosome.hpp	/^		void evaluate();$/;"	p	class:chromosome	access:public	signature:()
evaluate	population.cpp	/^void population::evaluate()$/;"	f	class:population	signature:()
evaluate	population.hpp	/^		void evaluate();   $/;"	p	class:population	access:public	signature:()
exponential	random.cpp	/^double randomG::exponential( double mu )$/;"	f	class:randomG	signature:( double mu )
exponential	random.hpp	/^		double exponential( double mu );$/;"	p	class:randomG	access:public	signature:( double mu )
f	F01_shifted_sphere.cpp	/^double F01_shifted_sphere::f(double *x,int length)$/;"	f	class:F01_shifted_sphere	signature:(double *x,int length)
f	F01_shifted_sphere.h	/^		double f(double *x,int length);$/;"	p	class:F01_shifted_sphere	access:public	signature:(double *x,int length)
f	F02_shifted_schwefel.cpp	/^double F02_shifted_schwefel::f(double *x,int length) {$/;"	f	class:F02_shifted_schwefel	signature:(double *x,int length)
f	F02_shifted_schwefel.h	/^	double f(double *x,int length);$/;"	p	class:F02_shifted_schwefel	access:public	signature:(double *x,int length)
f	F03_shifted_rotated_high_cond_elliptic.cpp	/^double F03_shifted_rotated_high_cond_elliptic::f(double *x,int length) {$/;"	f	class:F03_shifted_rotated_high_cond_elliptic	signature:(double *x,int length)
f	F03_shifted_rotated_high_cond_elliptic.h	/^	double f(double *x,int length);$/;"	p	class:F03_shifted_rotated_high_cond_elliptic	access:public	signature:(double *x,int length)
f	F04_shifted_schwefel_noise.cpp	/^double F04_shifted_schwefel_noise::f(double *x,int length) {$/;"	f	class:F04_shifted_schwefel_noise	signature:(double *x,int length)
f	F04_shifted_schwefel_noise.h	/^	double f(double *x,int length);$/;"	p	class:F04_shifted_schwefel_noise	access:public	signature:(double *x,int length)
f	F05_schwefel_global_opt_bound.cpp	/^double F05_schwefel_global_opt_bound::f(double *x,int length) {$/;"	f	class:F05_schwefel_global_opt_bound	signature:(double *x,int length)
f	F05_schwefel_global_opt_bound.h	/^	double f(double *x,int length);$/;"	p	class:F05_schwefel_global_opt_bound	access:public	signature:(double *x,int length)
f	F06_shifted_rosenbrock.cpp	/^double F06_shifted_rosenbrock::f(double *x,int length) {$/;"	f	class:F06_shifted_rosenbrock	signature:(double *x,int length)
f	F06_shifted_rosenbrock.h	/^	double f(double *x,int length);$/;"	p	class:F06_shifted_rosenbrock	access:public	signature:(double *x,int length)
f	F07_shifted_rotated_griewank.cpp	/^double F07_shifted_rotated_griewank::f(double *x,int length) {$/;"	f	class:F07_shifted_rotated_griewank	signature:(double *x,int length)
f	F07_shifted_rotated_griewank.h	/^	double f(double *x,int length);$/;"	p	class:F07_shifted_rotated_griewank	access:public	signature:(double *x,int length)
f	F08_shifted_rotated_ackley_global_opt_bound.cpp	/^double F08_shifted_rotated_ackley_global_opt_bound::f(double *x,int length) {$/;"	f	class:F08_shifted_rotated_ackley_global_opt_bound	signature:(double *x,int length)
f	F08_shifted_rotated_ackley_global_opt_bound.h	/^	double f(double *x,int length);$/;"	p	class:F08_shifted_rotated_ackley_global_opt_bound	access:public	signature:(double *x,int length)
f	F09_shifted_rastrigin.cpp	/^double F09_shifted_rastrigin::f(double *x,int length) {$/;"	f	class:F09_shifted_rastrigin	signature:(double *x,int length)
f	F09_shifted_rastrigin.h	/^	double f(double *x,int length);$/;"	p	class:F09_shifted_rastrigin	access:public	signature:(double *x,int length)
f	F10_shifted_rotated_rastrigin.cpp	/^double F10_shifted_rotated_rastrigin::f(double *x,int length) {$/;"	f	class:F10_shifted_rotated_rastrigin	signature:(double *x,int length)
f	F10_shifted_rotated_rastrigin.h	/^	double f(double* x,int length);$/;"	p	class:F10_shifted_rotated_rastrigin	access:public	signature:(double* x,int length)
f	F11_shifted_rotated_weierstrass.cpp	/^double F11_shifted_rotated_weierstrass::f(double *x,int length) {$/;"	f	class:F11_shifted_rotated_weierstrass	signature:(double *x,int length)
f	F11_shifted_rotated_weierstrass.h	/^		double f(double *x,int length);$/;"	p	class:F11_shifted_rotated_weierstrass	access:public	signature:(double *x,int length)
f	F12_schwefel.cpp	/^double F12_schwefel::f(double *x,int length) {$/;"	f	class:F12_schwefel	signature:(double *x,int length)
f	F12_schwefel.h	/^	double f(double *x,int length);$/;"	p	class:F12_schwefel	access:public	signature:(double *x,int length)
f	F13_shifted_expanded_griewank_rosenbrock.cpp	/^double F13_shifted_expanded_griewank_rosenbrock::f(double *x,int length) {$/;"	f	class:F13_shifted_expanded_griewank_rosenbrock	signature:(double *x,int length)
f	F13_shifted_expanded_griewank_rosenbrock.h	/^	double f(double *x,int length);$/;"	p	class:F13_shifted_expanded_griewank_rosenbrock	access:public	signature:(double *x,int length)
f	F14_shifted_rotated_expanded_scaffer.cpp	/^double F14_shifted_rotated_expanded_scaffer::f(double *x,int length) {$/;"	f	class:F14_shifted_rotated_expanded_scaffer	signature:(double *x,int length)
f	F14_shifted_rotated_expanded_scaffer.h	/^	double f(double *x,int length);$/;"	p	class:F14_shifted_rotated_expanded_scaffer	access:public	signature:(double *x,int length)
f	F15_hybrid_composition_1.cpp	/^double F15_hybrid_composition_1::f(double *x,int length) {$/;"	f	class:F15_hybrid_composition_1	signature:(double *x,int length)
f	F15_hybrid_composition_1.h	/^	double f(double *x,int length);$/;"	p	class:F15_hybrid_composition_1	access:public	signature:(double *x,int length)
f	F16_rotated_hybrid_composition_1.cpp	/^double F16_rotated_hybrid_composition_1::f(double *x,int length) {$/;"	f	class:F16_rotated_hybrid_composition_1	signature:(double *x,int length)
f	F16_rotated_hybrid_composition_1.h	/^	double f(double *x,int length);$/;"	p	class:F16_rotated_hybrid_composition_1	access:public	signature:(double *x,int length)
f	F17_rotated_hybrid_composition_1_noise.cpp	/^double F17_rotated_hybrid_composition_1_noise::f(double *x,int length) {$/;"	f	class:F17_rotated_hybrid_composition_1_noise	signature:(double *x,int length)
f	F17_rotated_hybrid_composition_1_noise.h	/^	double f(double *x,int length);$/;"	p	class:F17_rotated_hybrid_composition_1_noise	access:public	signature:(double *x,int length)
f	F18_rotated_hybrid_composition_2.cpp	/^double F18_rotated_hybrid_composition_2::f(double *x,int length) {$/;"	f	class:F18_rotated_hybrid_composition_2	signature:(double *x,int length)
f	F18_rotated_hybrid_composition_2.h	/^	double f(double *x,int length);$/;"	p	class:F18_rotated_hybrid_composition_2	access:public	signature:(double *x,int length)
f	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.cpp	/^double F19_rotated_hybrid_composition_2_narrow_basin_global_opt::f(double *x,int length) {$/;"	f	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	signature:(double *x,int length)
f	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	double f(double *x,int length);$/;"	p	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:public	signature:(double *x,int length)
f	F20_rotated_hybrid_composition_2_global_opt_bound.cpp	/^double F20_rotated_hybrid_composition_2_global_opt_bound::f(double *x,int length) {$/;"	f	class:F20_rotated_hybrid_composition_2_global_opt_bound	signature:(double *x,int length)
f	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double f(double *x,int length);$/;"	p	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:public	signature:(double *x,int length)
f	F21_rotated_hybrid_composition_3.cpp	/^double F21_rotated_hybrid_composition_3::f(double *x,int length) {$/;"	f	class:F21_rotated_hybrid_composition_3	signature:(double *x,int length)
f	F21_rotated_hybrid_composition_3.h	/^	double f(double *x,int length);$/;"	p	class:F21_rotated_hybrid_composition_3	access:public	signature:(double *x,int length)
f	F22_rotated_hybrid_composition_3_high_cond_num_matrix.cpp	/^double F22_rotated_hybrid_composition_3_high_cond_num_matrix::f(double *x,int length) {$/;"	f	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	signature:(double *x,int length)
f	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double f(double *x,int length);$/;"	p	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:public	signature:(double *x,int length)
f	F23_noncontinuous_rotated_hybrid_composition_3.cpp	/^double F23_noncontinuous_rotated_hybrid_composition_3::f(double *x,int length) {$/;"	f	class:F23_noncontinuous_rotated_hybrid_composition_3	signature:(double *x,int length)
f	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	double f(double *x,int length);$/;"	p	class:F23_noncontinuous_rotated_hybrid_composition_3	access:public	signature:(double *x,int length)
f	F24_rotated_hybrid_composition_4.cpp	/^double F24_rotated_hybrid_composition_4::f(double *x,int length) {$/;"	f	class:F24_rotated_hybrid_composition_4	signature:(double *x,int length)
f	F24_rotated_hybrid_composition_4.h	/^	double f(double *x,int length);$/;"	p	class:F24_rotated_hybrid_composition_4	access:public	signature:(double *x,int length)
f	F25_rotated_hybrid_composition_4_bound.cpp	/^double F25_rotated_hybrid_composition_4_bound::f(double *x,int length) {$/;"	f	class:F25_rotated_hybrid_composition_4_bound	signature:(double *x,int length)
f	F25_rotated_hybrid_composition_4_bound.h	/^	double f(double* x,int length);$/;"	p	class:F25_rotated_hybrid_composition_4_bound	access:public	signature:(double* x,int length)
f	F26_8_peaks1.cpp	/^double F26_8_peaks1::f(double *x,int length)$/;"	f	class:F26_8_peaks1	signature:(double *x,int length)
f	F26_8_peaks1.h	/^		double f(double *x,int length);$/;"	p	class:F26_8_peaks1	access:public	signature:(double *x,int length)
f	F27_8_peaks2.cpp	/^double F27_8_peaks2::f(double *x,int length)$/;"	f	class:F27_8_peaks2	signature:(double *x,int length)
f	F27_8_peaks2.h	/^		double f(double *x,int length);$/;"	p	class:F27_8_peaks2	access:public	signature:(double *x,int length)
f	test_func.h	/^	virtual double f(double *x,int length)=0;$/;"	p	class:test_func	access:public	signature:(double *x,int length)
find_stop_criteria	main.cpp	/^int find_stop_criteria( char *s )$/;"	f	signature:( char *s )
fitness	chromosome.hpp	/^		double fitness() { return Fitness; }$/;"	f	class:chromosome	access:public	signature:()
flip	random.hpp	/^		bool   flip( double p ) { return bernoulli(p); }$/;"	f	class:randomG	access:public	signature:( double p )
fmax	HCJob.h	/^	double *fmax;$/;"	m	class:HCJob	access:public
gene	gene.hpp	/^		gene( const double v ) { Allele = v; }$/;"	f	class:gene	access:public	signature:( const double v )
gene	gene.hpp	/^		gene( const gene &g ) { Allele = g.Allele; }$/;"	f	class:gene	access:public	signature:( const gene &g )
gene	gene.hpp	/^		gene() {}$/;"	f	class:gene	access:public	signature:()
gene	gene.hpp	/^class gene  $/;"	c
gene::Allele	gene.hpp	/^		double Allele;$/;"	m	class:gene	access:public
gene::allele	gene.hpp	/^		double allele() { return Allele; }$/;"	f	class:gene	access:public	signature:()
gene::code	gene.hpp	/^		int code;$/;"	m	class:gene	access:public
gene::gene	gene.hpp	/^		gene( const double v ) { Allele = v; }$/;"	f	class:gene	access:public	signature:( const double v )
gene::gene	gene.hpp	/^		gene( const gene &g ) { Allele = g.Allele; }$/;"	f	class:gene	access:public	signature:( const gene &g )
gene::gene	gene.hpp	/^		gene() {}$/;"	f	class:gene	access:public	signature:()
gene::operator !=	gene.hpp	/^		int operator!=(const double v)   { return Allele != v; }$/;"	f	class:gene	access:public	signature:(const double v)
gene::operator !=	gene.hpp	/^		int operator!=(const gene &g) { return Allele != g.Allele; }$/;"	f	class:gene	access:public	signature:(const gene &g)
gene::operator <<	gene.hpp	/^		friend ostream &operator<< (ostream &out, const gene &g);$/;"	p	class:gene	access:friend	signature:(ostream &out, const gene &g)
gene::operator =	gene.cpp	/^gene & gene::operator=(const double v)$/;"	f	class:gene	signature:(const double v)
gene::operator =	gene.cpp	/^gene & gene::operator=(const gene &g)$/;"	f	class:gene	signature:(const gene &g)
gene::operator =	gene.hpp	/^		gene & operator=(const double v );$/;"	p	class:gene	access:public	signature:(const double v )
gene::operator =	gene.hpp	/^		gene & operator=(const gene &g);$/;"	p	class:gene	access:public	signature:(const gene &g)
gene::operator ==	gene.hpp	/^		int operator==(const double v)   { return Allele == v; }$/;"	f	class:gene	access:public	signature:(const double v)
gene::operator ==	gene.hpp	/^		int operator==(const gene &g) { return Allele == g.Allele; }$/;"	f	class:gene	access:public	signature:(const gene &g)
gene::random	gene.cpp	/^void gene::random()$/;"	f	class:gene	signature:()
gene::random	gene.hpp	/^		void random();$/;"	p	class:gene	access:public	signature:()
gene::~gene	gene.hpp	/^		~gene() {}$/;"	f	class:gene	access:public	signature:()
generate	mpm.cpp	/^void mpm::generate( population *oldpop, population *newpop )$/;"	f	class:mpm	signature:( population *oldpop, population *newpop )
generate	mpm.hpp	/^		void generate( population *oldpop, population *newpop );$/;"	p	class:mpm	access:public	signature:( population *oldpop, population *newpop )
genes	chromosome.hpp	/^		gene   *genes;$/;"	m	class:chromosome	access:public
geometric	random.cpp	/^long randomG::geometric( double p )$/;"	f	class:randomG	signature:( double p )
geometric	random.hpp	/^		long   geometric( double p );$/;"	p	class:randomG	access:public	signature:( double p )
griewank	benchmark.cpp	/^double griewank(double *x,int length) {$/;"	f	signature:(double *x,int length)
griewank	benchmark.h	/^	double griewank(double *x,int length);$/;"	p	signature:(double *x,int length)
hybrid_composition	benchmark.cpp	/^double hybrid_composition(double *x, HCJob &job,int length) {$/;"	f	signature:(double *x, HCJob &job,int length)
hybrid_composition	benchmark.h	/^	double hybrid_composition(double *x, HCJob &job,int length);$/;"	p	signature:(double *x, HCJob &job,int length)
initial	benchmark.cpp	/^void initial() {$/;"	f	signature:()
initial	benchmark.h	/^	void initial();$/;"	p	signature:()
insert	cache.cpp	/^void cache::insert( int id1, int id2, subset &S, int popsize )$/;"	f	class:cache	signature:( int id1, int id2, subset &S, int popsize )
insert	cache.hpp	/^		void insert( int id1, int id2, subset &S, int popsize );$/;"	p	class:cache	access:public	signature:( int id1, int id2, subset &S, int popsize )
insert	mpm.cpp	/^void mpm::insert( subset &S )$/;"	f	class:mpm	signature:( subset &S )
insert	mpm.hpp	/^		void insert( subset &S );$/;"	p	class:mpm	access:public	signature:( subset &S )
insert	subset.hpp	/^		void insert( int elem ) { L.push_back( elem ); }$/;"	f	class:subset	access:public	signature:( int elem )
interval_f	benchmark.cpp	/^double interval_f(double x, double y, double z)  \/\/\/for building required problems more easily $/;"	f	signature:(double x, double y, double z)
interval_f	benchmark.h	/^	double interval_f(double x, double y, double z);$/;"	p	signature:(double x, double y, double z)
lambda	HCJob.h	/^	double *lambda;$/;"	m	class:HCJob	access:public
lchrom	main.cpp	/^int    parameter::lchrom;$/;"	m	class:parameter	file:
lchrom	parameter.hpp	/^  static int    lchrom;            \/\/ chromosome length$/;"	m	class:parameter	access:public
learn_MPM	main.cpp	/^bool   parameter::learn_MPM;   $/;"	m	class:parameter	file:
learn_MPM	parameter.hpp	/^  static bool   learn_MPM;         \/\/ on = learns linkage, off = compact GA$/;"	m	class:parameter	access:public
length	chromosome.hpp	/^		int  length() { return Length; }$/;"	f	class:chromosome	access:public	signature:()
loadColumnVector	benchmark.cpp	/^void loadColumnVector(ifstream &brSrc, int rows, double *column) {$/;"	f	signature:(ifstream &brSrc, int rows, double *column)
loadColumnVector	benchmark.h	/^	void loadColumnVector(ifstream &brSrc, int rows, double *column);$/;"	p	signature:(ifstream &brSrc, int rows, double *column)
loadColumnVectorFromFile	benchmark.cpp	/^void loadColumnVectorFromFile(string file, int rows, double *column) {$/;"	f	signature:(string file, int rows, double *column)
loadColumnVectorFromFile	benchmark.h	/^	void loadColumnVectorFromFile(string file, int rows, double *column);$/;"	p	signature:(string file, int rows, double *column)
loadMatrix	benchmark.cpp	/^void loadMatrix(ifstream &brSrc, int rows, int columns, double **matrix) {$/;"	f	signature:(ifstream &brSrc, int rows, int columns, double **matrix)
loadMatrix	benchmark.h	/^	void loadMatrix(ifstream &brSrc, int rows, int columns, double **matrix);$/;"	p	signature:(ifstream &brSrc, int rows, int columns, double **matrix)
loadMatrixFromFile	benchmark.cpp	/^void loadMatrixFromFile(string file, int rows, int columns, double **matrix) {$/;"	f	signature:(string file, int rows, int columns, double **matrix)
loadMatrixFromFile	benchmark.h	/^	void loadMatrixFromFile(string file, int rows, int columns, double **matrix);$/;"	p	signature:(string file, int rows, int columns, double **matrix)
loadNMatrixFromFile	benchmark.cpp	/^void loadNMatrixFromFile(string file, int N, int rows, int columns, double ***matrix) {$/;"	f	signature:(string file, int N, int rows, int columns, double ***matrix)
loadNMatrixFromFile	benchmark.h	/^	void loadNMatrixFromFile(string file, int N, int rows, int columns, double ***matrix);$/;"	p	signature:(string file, int N, int rows, int columns, double ***matrix)
loadRowVector	benchmark.cpp	/^void loadRowVector(ifstream &brSrc, int columns, double *row){$/;"	f	signature:(ifstream &brSrc, int columns, double *row)
loadRowVector	benchmark.h	/^	void loadRowVector(ifstream &brSrc, int columns, double *row);$/;"	p	signature:(ifstream &brSrc, int columns, double *row)
loadRowVectorFromFile	benchmark.cpp	/^void loadRowVectorFromFile(string file, int columns, double *row) { $/;"	f	signature:(string file, int columns, double *row)
loadRowVectorFromFile	benchmark.h	/^	void loadRowVectorFromFile(string file, int columns, double *row);$/;"	p	signature:(string file, int columns, double *row)
loadTestDataFromFile	benchmark.cpp	/^void loadTestDataFromFile(string file, int num_test_points, int test_dimension, double **x, double *f) {$/;"	f	signature:(string file, int num_test_points, int test_dimension, double **x, double *f)
loadTestDataFromFile	benchmark.h	/^	void loadTestDataFromFile(string file, int num_test_points, int test_dimension, double **x, double *f);$/;"	p	signature:(string file, int num_test_points, int test_dimension, double **x, double *f)
log	utility.cpp	/^double log( double x, double b )$/;"	f	signature:( double x, double b )
log	utility.hpp	/^double  log( double x, double b );$/;"	p	signature:( double x, double b )
low_bound	main.cpp	/^double parameter::low_bound;$/;"	m	class:parameter	file:
low_bound	parameter.hpp	/^  static double low_bound;$/;"	m	class:parameter	access:public
lsearch	population.cpp	/^void population::lsearch()$/;"	f	class:population	signature:()
lsearch	population.hpp	/^		void lsearch();$/;"	p	class:population	access:public	signature:()
m_A	F05_schwefel_global_opt_bound.h	/^	double **m_A;$/;"	m	class:F05_schwefel_global_opt_bound	access:private
m_A	F12_schwefel.h	/^	double *m_A;$/;"	m	class:F12_schwefel	access:private
m_B	F05_schwefel_global_opt_bound.h	/^	double *m_B;$/;"	m	class:F05_schwefel_global_opt_bound	access:private
m_B	F12_schwefel.h	/^	double *m_B;$/;"	m	class:F12_schwefel	access:private
m_M	F15_hybrid_composition_1.h	/^	double ***m_M;$/;"	m	class:F15_hybrid_composition_1	access:private
m_M	F16_rotated_hybrid_composition_1.h	/^	double ***m_M;$/;"	m	class:F16_rotated_hybrid_composition_1	access:private
m_M	F17_rotated_hybrid_composition_1_noise.h	/^	double ***m_M;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:private
m_M	F18_rotated_hybrid_composition_2.h	/^	double ***m_M;$/;"	m	class:F18_rotated_hybrid_composition_2	access:private
m_M	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	double ***m_M;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:private
m_M	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double ***m_M;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:private
m_M	F21_rotated_hybrid_composition_3.h	/^	double ***m_M;$/;"	m	class:F21_rotated_hybrid_composition_3	access:private
m_M	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double ***m_M;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:private
m_M	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	double ***m_M;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:private
m_M	F24_rotated_hybrid_composition_4.h	/^	double ***m_M;$/;"	m	class:F24_rotated_hybrid_composition_4	access:private
m_M	F25_rotated_hybrid_composition_4_bound.h	/^	double ***m_M;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:private
m_a	F12_schwefel.h	/^	double **m_a;$/;"	m	class:F12_schwefel	access:private
m_b	F12_schwefel.h	/^	double **m_b;$/;"	m	class:F12_schwefel	access:private
m_bias	test_func.h	/^	double	m_bias;$/;"	m	class:test_func	access:protected
m_biases	F01_shifted_sphere.h	/^		double *m_biases;$/;"	m	class:F01_shifted_sphere	access:public
m_biases	benchmark.h	/^	static double *m_biases;$/;"	v
m_dimension	test_func.h	/^	int	m_dimension;$/;"	m	class:test_func	access:protected
m_fmax	F15_hybrid_composition_1.h	/^	double *m_fmax;$/;"	m	class:F15_hybrid_composition_1	access:private
m_fmax	F16_rotated_hybrid_composition_1.h	/^	double *m_fmax;$/;"	m	class:F16_rotated_hybrid_composition_1	access:private
m_fmax	F17_rotated_hybrid_composition_1_noise.h	/^	double *m_fmax;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:private
m_fmax	F18_rotated_hybrid_composition_2.h	/^	double *m_fmax;$/;"	m	class:F18_rotated_hybrid_composition_2	access:private
m_fmax	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	double *m_fmax;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:private
m_fmax	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double *m_fmax;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:private
m_fmax	F21_rotated_hybrid_composition_3.h	/^	double *m_fmax;$/;"	m	class:F21_rotated_hybrid_composition_3	access:private
m_fmax	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double *m_fmax;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:private
m_fmax	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	double *m_fmax;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:private
m_fmax	F24_rotated_hybrid_composition_4.h	/^	double *m_fmax;$/;"	m	class:F24_rotated_hybrid_composition_4	access:private
m_fmax	F25_rotated_hybrid_composition_4_bound.h	/^	double *m_fmax;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:private
m_func_biases15	F15_hybrid_composition_1.h	/^static double m_func_biases15[] = {$/;"	v
m_func_biases16	F16_rotated_hybrid_composition_1.h	/^static double m_func_biases16[] = {$/;"	v
m_func_biases17	F17_rotated_hybrid_composition_1_noise.h	/^static double m_func_biases17[] = {$/;"	v
m_func_biases18	F18_rotated_hybrid_composition_2.h	/^static double m_func_biases18[] = {$/;"	v
m_func_biases19	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^static double m_func_biases19[] = {$/;"	v
m_func_biases20	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^static double m_func_biases20[] = {$/;"	v
m_func_biases21	F21_rotated_hybrid_composition_3.h	/^static double m_func_biases21[] = {$/;"	v
m_func_biases22	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^static double m_func_biases22[] = {$/;"	v
m_func_biases23	F23_noncontinuous_rotated_hybrid_composition_3.h	/^static double m_func_biases23[] = {$/;"	v
m_func_biases24	F24_rotated_hybrid_composition_4.h	/^static double m_func_biases24[] = {$/;"	v
m_func_biases25	F25_rotated_hybrid_composition_4_bound.h	/^static double m_func_biases25[] = {$/;"	v
m_func_name	test_func.h	/^	string	m_func_name;$/;"	m	class:test_func	access:protected
m_iSqrt	F01_shifted_sphere.h	/^		double *m_iSqrt;$/;"	m	class:F01_shifted_sphere	access:public
m_iSqrt	benchmark.h	/^	static double *m_iSqrt;$/;"	v
m_lambda15	F15_hybrid_composition_1.h	/^static double m_lambda15[] = {$/;"	v
m_lambda16	F16_rotated_hybrid_composition_1.h	/^static double m_lambda16[] = {$/;"	v
m_lambda17	F17_rotated_hybrid_composition_1_noise.h	/^static double m_lambda17[] = {$/;"	v
m_lambda18	F18_rotated_hybrid_composition_2.h	/^static double m_lambda18[] = {$/;"	v
m_lambda19	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^static double m_lambda19[] = {$/;"	v
m_lambda20	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^static double m_lambda20[] = {$/;"	v
m_lambda21	F21_rotated_hybrid_composition_3.h	/^static double m_lambda21[] = {$/;"	v
m_lambda22	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^static double m_lambda22[] = {$/;"	v
m_lambda23	F23_noncontinuous_rotated_hybrid_composition_3.h	/^static double m_lambda23[] = {$/;"	v
m_lambda24	F24_rotated_hybrid_composition_4.h	/^static double m_lambda24[] = {$/;"	v
m_lambda25	F25_rotated_hybrid_composition_4_bound.h	/^static double m_lambda25[] = {$/;"	v
m_matrix	F03_shifted_rotated_high_cond_elliptic.h	/^	double **m_matrix;$/;"	m	class:F03_shifted_rotated_high_cond_elliptic	access:private
m_matrix	F07_shifted_rotated_griewank.h	/^	double **m_matrix;$/;"	m	class:F07_shifted_rotated_griewank	access:private
m_matrix	F08_shifted_rotated_ackley_global_opt_bound.h	/^	double **m_matrix;$/;"	m	class:F08_shifted_rotated_ackley_global_opt_bound	access:private
m_matrix	F10_shifted_rotated_rastrigin.h	/^	double **m_matrix;$/;"	m	class:F10_shifted_rotated_rastrigin	access:private
m_matrix	F11_shifted_rotated_weierstrass.h	/^		double **m_matrix;$/;"	m	class:F11_shifted_rotated_weierstrass	access:private
m_matrix	F14_shifted_rotated_expanded_scaffer.h	/^	double **m_matrix;$/;"	m	class:F14_shifted_rotated_expanded_scaffer	access:private
m_o	F01_shifted_sphere.h	/^		double *m_o;$/;"	m	class:F01_shifted_sphere	access:private
m_o	F02_shifted_schwefel.h	/^	double *m_o;$/;"	m	class:F02_shifted_schwefel	access:private
m_o	F03_shifted_rotated_high_cond_elliptic.h	/^	double *m_o;$/;"	m	class:F03_shifted_rotated_high_cond_elliptic	access:private
m_o	F04_shifted_schwefel_noise.h	/^	double *m_o;$/;"	m	class:F04_shifted_schwefel_noise	access:private
m_o	F05_schwefel_global_opt_bound.h	/^	double *m_o;$/;"	m	class:F05_schwefel_global_opt_bound	access:private
m_o	F06_shifted_rosenbrock.h	/^	double *m_o;$/;"	m	class:F06_shifted_rosenbrock	access:private
m_o	F07_shifted_rotated_griewank.h	/^	double *m_o;$/;"	m	class:F07_shifted_rotated_griewank	access:private
m_o	F08_shifted_rotated_ackley_global_opt_bound.h	/^	double *m_o;$/;"	m	class:F08_shifted_rotated_ackley_global_opt_bound	access:private
m_o	F09_shifted_rastrigin.h	/^	double *m_o;$/;"	m	class:F09_shifted_rastrigin	access:private
m_o	F10_shifted_rotated_rastrigin.h	/^	double *m_o;$/;"	m	class:F10_shifted_rotated_rastrigin	access:private
m_o	F11_shifted_rotated_weierstrass.h	/^		double *m_o;$/;"	m	class:F11_shifted_rotated_weierstrass	access:private
m_o	F12_schwefel.h	/^	double *m_o;$/;"	m	class:F12_schwefel	access:private
m_o	F13_shifted_expanded_griewank_rosenbrock.h	/^	double *m_o;$/;"	m	class:F13_shifted_expanded_griewank_rosenbrock	access:private
m_o	F14_shifted_rotated_expanded_scaffer.h	/^	double *m_o;$/;"	m	class:F14_shifted_rotated_expanded_scaffer	access:private
m_o	F15_hybrid_composition_1.h	/^	double **m_o;$/;"	m	class:F15_hybrid_composition_1	access:private
m_o	F16_rotated_hybrid_composition_1.h	/^	double **m_o;$/;"	m	class:F16_rotated_hybrid_composition_1	access:private
m_o	F17_rotated_hybrid_composition_1_noise.h	/^	double **m_o;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:private
m_o	F18_rotated_hybrid_composition_2.h	/^	double **m_o;$/;"	m	class:F18_rotated_hybrid_composition_2	access:private
m_o	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	double **m_o;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:private
m_o	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double **m_o;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:private
m_o	F21_rotated_hybrid_composition_3.h	/^	double **m_o;$/;"	m	class:F21_rotated_hybrid_composition_3	access:private
m_o	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double **m_o;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:private
m_o	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	double **m_o;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:private
m_o	F24_rotated_hybrid_composition_4.h	/^	double **m_o;$/;"	m	class:F24_rotated_hybrid_composition_4	access:private
m_o	F25_rotated_hybrid_composition_4_bound.h	/^	double **m_o;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:private
m_sigma15	F15_hybrid_composition_1.h	/^static double m_sigma15[] = {$/;"	v
m_sigma16	F16_rotated_hybrid_composition_1.h	/^static double m_sigma16[] = {$/;"	v
m_sigma17	F17_rotated_hybrid_composition_1_noise.h	/^static double m_sigma17[] = {$/;"	v
m_sigma18	F18_rotated_hybrid_composition_2.h	/^static double m_sigma18[] = {$/;"	v
m_sigma19	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^static double m_sigma19[] = {$/;"	v
m_sigma20	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^static double m_sigma20[] = {$/;"	v
m_sigma21	F21_rotated_hybrid_composition_3.h	/^static double m_sigma21[] = {$/;"	v
m_sigma22	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^static double m_sigma22[] = {$/;"	v
m_sigma23	F23_noncontinuous_rotated_hybrid_composition_3.h	/^static double m_sigma23[] = {$/;"	v
m_sigma24	F24_rotated_hybrid_composition_4.h	/^static double m_sigma24[] = {$/;"	v
m_sigma25	F25_rotated_hybrid_composition_4_bound.h	/^static double m_sigma25[] = {$/;"	v
m_testPoint	F15_hybrid_composition_1.h	/^	double *m_testPoint;$/;"	m	class:F15_hybrid_composition_1	access:private
m_testPoint	F16_rotated_hybrid_composition_1.h	/^	double *m_testPoint;$/;"	m	class:F16_rotated_hybrid_composition_1	access:private
m_testPoint	F17_rotated_hybrid_composition_1_noise.h	/^	double *m_testPoint;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:private
m_testPoint	F18_rotated_hybrid_composition_2.h	/^	double *m_testPoint;$/;"	m	class:F18_rotated_hybrid_composition_2	access:private
m_testPoint	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	double *m_testPoint;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:private
m_testPoint	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double *m_testPoint;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:private
m_testPoint	F21_rotated_hybrid_composition_3.h	/^	double *m_testPoint;$/;"	m	class:F21_rotated_hybrid_composition_3	access:private
m_testPoint	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double *m_testPoint;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:private
m_testPoint	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	double *m_testPoint;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:private
m_testPoint	F24_rotated_hybrid_composition_4.h	/^	double *m_testPoint;$/;"	m	class:F24_rotated_hybrid_composition_4	access:private
m_testPoint	F25_rotated_hybrid_composition_4_bound.h	/^	double *m_testPoint;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:private
m_testPointM	F15_hybrid_composition_1.h	/^	double *m_testPointM;$/;"	m	class:F15_hybrid_composition_1	access:private
m_testPointM	F16_rotated_hybrid_composition_1.h	/^	double *m_testPointM;$/;"	m	class:F16_rotated_hybrid_composition_1	access:private
m_testPointM	F17_rotated_hybrid_composition_1_noise.h	/^	double *m_testPointM;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:private
m_testPointM	F18_rotated_hybrid_composition_2.h	/^	double *m_testPointM;$/;"	m	class:F18_rotated_hybrid_composition_2	access:private
m_testPointM	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	double *m_testPointM;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:private
m_testPointM	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double *m_testPointM;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:private
m_testPointM	F21_rotated_hybrid_composition_3.h	/^	double *m_testPointM;$/;"	m	class:F21_rotated_hybrid_composition_3	access:private
m_testPointM	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double *m_testPointM;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:private
m_testPointM	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	double *m_testPointM;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:private
m_testPointM	F24_rotated_hybrid_composition_4.h	/^	double *m_testPointM;$/;"	m	class:F24_rotated_hybrid_composition_4	access:private
m_testPointM	F25_rotated_hybrid_composition_4_bound.h	/^	double *m_testPointM;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:private
m_w	F15_hybrid_composition_1.h	/^	double *m_w;$/;"	m	class:F15_hybrid_composition_1	access:private
m_w	F16_rotated_hybrid_composition_1.h	/^	double *m_w;$/;"	m	class:F16_rotated_hybrid_composition_1	access:private
m_w	F17_rotated_hybrid_composition_1_noise.h	/^	double *m_w;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:private
m_w	F18_rotated_hybrid_composition_2.h	/^	double *m_w;$/;"	m	class:F18_rotated_hybrid_composition_2	access:private
m_w	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	double *m_w;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:private
m_w	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double *m_w;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:private
m_w	F21_rotated_hybrid_composition_3.h	/^	double *m_w;$/;"	m	class:F21_rotated_hybrid_composition_3	access:private
m_w	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double *m_w;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:private
m_w	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	double *m_w;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:private
m_w	F24_rotated_hybrid_composition_4.h	/^	double *m_w;$/;"	m	class:F24_rotated_hybrid_composition_4	access:private
m_w	F25_rotated_hybrid_composition_4_bound.h	/^	double *m_w;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:private
m_z	F01_shifted_sphere.h	/^		double *m_z;$/;"	m	class:F01_shifted_sphere	access:private
m_z	F02_shifted_schwefel.h	/^	double *m_z;$/;"	m	class:F02_shifted_schwefel	access:private
m_z	F03_shifted_rotated_high_cond_elliptic.h	/^	double *m_z;$/;"	m	class:F03_shifted_rotated_high_cond_elliptic	access:private
m_z	F04_shifted_schwefel_noise.h	/^	double *m_z;$/;"	m	class:F04_shifted_schwefel_noise	access:private
m_z	F05_schwefel_global_opt_bound.h	/^	double *m_z;$/;"	m	class:F05_schwefel_global_opt_bound	access:private
m_z	F06_shifted_rosenbrock.h	/^	double *m_z;$/;"	m	class:F06_shifted_rosenbrock	access:private
m_z	F07_shifted_rotated_griewank.h	/^	double *m_z;$/;"	m	class:F07_shifted_rotated_griewank	access:private
m_z	F08_shifted_rotated_ackley_global_opt_bound.h	/^	double *m_z;$/;"	m	class:F08_shifted_rotated_ackley_global_opt_bound	access:private
m_z	F09_shifted_rastrigin.h	/^	double *m_z;$/;"	m	class:F09_shifted_rastrigin	access:private
m_z	F10_shifted_rotated_rastrigin.h	/^	double *m_z;$/;"	m	class:F10_shifted_rotated_rastrigin	access:private
m_z	F11_shifted_rotated_weierstrass.h	/^		double *m_z;$/;"	m	class:F11_shifted_rotated_weierstrass	access:private
m_z	F13_shifted_expanded_griewank_rosenbrock.h	/^	double *m_z;$/;"	m	class:F13_shifted_expanded_griewank_rosenbrock	access:private
m_z	F14_shifted_rotated_expanded_scaffer.h	/^	double *m_z;$/;"	m	class:F14_shifted_rotated_expanded_scaffer	access:private
m_z	F15_hybrid_composition_1.h	/^	double **m_z;$/;"	m	class:F15_hybrid_composition_1	access:private
m_z	F16_rotated_hybrid_composition_1.h	/^	double **m_z;$/;"	m	class:F16_rotated_hybrid_composition_1	access:private
m_z	F17_rotated_hybrid_composition_1_noise.h	/^	double **m_z;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:private
m_z	F18_rotated_hybrid_composition_2.h	/^	double **m_z;$/;"	m	class:F18_rotated_hybrid_composition_2	access:private
m_z	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	double **m_z;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:private
m_z	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double **m_z;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:private
m_z	F21_rotated_hybrid_composition_3.h	/^	double **m_z;$/;"	m	class:F21_rotated_hybrid_composition_3	access:private
m_z	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double **m_z;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:private
m_z	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	double **m_z;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:private
m_z	F24_rotated_hybrid_composition_4.h	/^	double **m_z;$/;"	m	class:F24_rotated_hybrid_composition_4	access:private
m_z	F25_rotated_hybrid_composition_4_bound.h	/^	double **m_z;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:private
m_zM	F03_shifted_rotated_high_cond_elliptic.h	/^	double *m_zM;$/;"	m	class:F03_shifted_rotated_high_cond_elliptic	access:private
m_zM	F07_shifted_rotated_griewank.h	/^	double *m_zM;$/;"	m	class:F07_shifted_rotated_griewank	access:private
m_zM	F08_shifted_rotated_ackley_global_opt_bound.h	/^	double *m_zM;$/;"	m	class:F08_shifted_rotated_ackley_global_opt_bound	access:private
m_zM	F10_shifted_rotated_rastrigin.h	/^	double *m_zM;$/;"	m	class:F10_shifted_rotated_rastrigin	access:private
m_zM	F11_shifted_rotated_weierstrass.h	/^		double *m_zM;$/;"	m	class:F11_shifted_rotated_weierstrass	access:private
m_zM	F14_shifted_rotated_expanded_scaffer.h	/^	double *m_zM;$/;"	m	class:F14_shifted_rotated_expanded_scaffer	access:private
m_zM	F15_hybrid_composition_1.h	/^	double **m_zM;$/;"	m	class:F15_hybrid_composition_1	access:private
m_zM	F16_rotated_hybrid_composition_1.h	/^	double **m_zM;$/;"	m	class:F16_rotated_hybrid_composition_1	access:private
m_zM	F17_rotated_hybrid_composition_1_noise.h	/^	double **m_zM;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:private
m_zM	F18_rotated_hybrid_composition_2.h	/^	double **m_zM;$/;"	m	class:F18_rotated_hybrid_composition_2	access:private
m_zM	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	double **m_zM;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:private
m_zM	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	double **m_zM;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:private
m_zM	F21_rotated_hybrid_composition_3.h	/^	double **m_zM;$/;"	m	class:F21_rotated_hybrid_composition_3	access:private
m_zM	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	double **m_zM;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:private
m_zM	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	double **m_zM;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:private
m_zM	F24_rotated_hybrid_composition_4.h	/^	double **m_zM;$/;"	m	class:F24_rotated_hybrid_composition_4	access:private
m_zM	F25_rotated_hybrid_composition_4_bound.h	/^	double **m_zM;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:private
main	main.cpp	/^int main( int argc, char *argv[] )$/;"	f	signature:( int argc, char *argv[] )
makeshuffle	utility.cpp	/^void makeshuffle( int *shufflearray, const int n )$/;"	f	signature:( int *shufflearray, const int n )
makeshuffle	utility.hpp	/^void    makeshuffle( int *shufflearray, const int n );$/;"	p	signature:( int *shufflearray, const int n )
max	codetable.h	/^	double max,min;$/;"	m	class:code_type	access:public
max	utility.cpp	/^int max( int x, int y )$/;"	f	signature:( int x, int y )
max	utility.hpp	/^int     max( int x, int y );$/;"	p	signature:( int x, int y )
maxSets	mpm.hpp	/^		int     maxSets;      \/\/ maximum number of sets in the cache$/;"	m	class:mpm	access:private
maxSz	cache.hpp	/^		int maxSz;        \/\/ maximum size of the cache ( ell*(ell+1)\/2)$/;"	m	class:cache	access:private
max_model	main.cpp	/^double parameter::max_model;$/;"	m	class:parameter	file:
max_model	parameter.hpp	/^  static double max_model;$/;"	m	class:parameter	access:public
maxfit	population.hpp	/^		double maxfit() { return MaxFit; }$/;"	f	class:population	access:public	signature:()
mc	mpm.hpp	/^		double  mc;   \/\/ model complexity$/;"	m	class:mpm	access:private
mc	subset.hpp	/^		double mc;   \/\/ model complexity$/;"	m	class:subset	access:private
merge	mpm.cpp	/^void mpm::merge( int i, int j, subset &S )$/;"	f	class:mpm	signature:( int i, int j, subset &S )
merge	mpm.hpp	/^		void merge( int i, int j, subset &S );$/;"	p	class:mpm	access:public	signature:( int i, int j, subset &S )
merge	subset.cpp	/^void subset::merge( subset &S1, subset &S2 )$/;"	f	class:subset	signature:( subset &S1, subset &S2 )
merge	subset.hpp	/^		void merge( subset &S1, subset &S2 );$/;"	p	class:subset	access:public	signature:( subset &S1, subset &S2 )
mergedSet	cache.hpp	/^		subset *mergedSet;   \/\/ an array of subsets$/;"	m	class:cache	access:public
min	codetable.h	/^	double max,min;$/;"	m	class:code_type	access:public
min	utility.cpp	/^int min( int x, int y )$/;"	f	signature:( int x, int y )
min	utility.hpp	/^double  min( double x );$/;"	p	signature:( double x )
min	utility.hpp	/^int     min( int x, int y );$/;"	p	signature:( int x, int y )
minfit	population.hpp	/^		double minfit() { return MinFit; }$/;"	f	class:population	access:public	signature:()
model	mpm.cpp	/^void mpm::model( population *pop, ofstream &outfile )$/;"	f	class:mpm	signature:( population *pop, ofstream &outfile )
model	mpm.hpp	/^		void model( population *pop, ofstream &outfile );$/;"	p	class:mpm	access:public	signature:( population *pop, ofstream &outfile )
modelComplexity	mpm.cpp	/^double mpm::modelComplexity()$/;"	f	class:mpm	signature:()
modelComplexity	mpm.hpp	/^		double modelComplexity();$/;"	p	class:mpm	access:public	signature:()
modelComplexity	subset.cpp	/^double subset::modelComplexity( int popsize )$/;"	f	class:subset	signature:( int popsize )
modelComplexity	subset.hpp	/^		double modelComplexity( int popsize );$/;"	p	class:subset	access:public	signature:( int popsize )
mpm	mpm.cpp	/^mpm::mpm( int n_sets )$/;"	f	class:mpm	signature:( int n_sets )
mpm	mpm.hpp	/^		mpm( int n_sets );$/;"	p	class:mpm	access:public	signature:( int n_sets )
mpm	mpm.hpp	/^class mpm$/;"	c
mpm::CC	mpm.hpp	/^		double CC() { return mc + cpc; }$/;"	f	class:mpm	access:public	signature:()
mpm::CPC	mpm.hpp	/^		double CPC() { return cpc; }$/;"	f	class:mpm	access:public	signature:()
mpm::MC	mpm.hpp	/^		double MC() { return mc; }$/;"	f	class:mpm	access:public	signature:()
mpm::combinedComplexity	mpm.cpp	/^void mpm::combinedComplexity()$/;"	f	class:mpm	signature:()
mpm::combinedComplexity	mpm.hpp	/^		void combinedComplexity();$/;"	p	class:mpm	access:public	signature:()
mpm::compressedPopulationComplexity	mpm.cpp	/^double mpm::compressedPopulationComplexity()$/;"	f	class:mpm	signature:()
mpm::compressedPopulationComplexity	mpm.hpp	/^		double compressedPopulationComplexity();$/;"	p	class:mpm	access:public	signature:()
mpm::converged	mpm.hpp	/^		bool converged() { return mc==0; }$/;"	f	class:mpm	access:public	signature:()
mpm::cpc	mpm.hpp	/^		double  cpc;  \/\/ compressed population complexity$/;"	m	class:mpm	access:private
mpm::generate	mpm.cpp	/^void mpm::generate( population *oldpop, population *newpop )$/;"	f	class:mpm	signature:( population *oldpop, population *newpop )
mpm::generate	mpm.hpp	/^		void generate( population *oldpop, population *newpop );$/;"	p	class:mpm	access:public	signature:( population *oldpop, population *newpop )
mpm::insert	mpm.cpp	/^void mpm::insert( subset &S )$/;"	f	class:mpm	signature:( subset &S )
mpm::insert	mpm.hpp	/^		void insert( subset &S );$/;"	p	class:mpm	access:public	signature:( subset &S )
mpm::maxSets	mpm.hpp	/^		int     maxSets;      \/\/ maximum number of sets in the cache$/;"	m	class:mpm	access:private
mpm::mc	mpm.hpp	/^		double  mc;   \/\/ model complexity$/;"	m	class:mpm	access:private
mpm::merge	mpm.cpp	/^void mpm::merge( int i, int j, subset &S )$/;"	f	class:mpm	signature:( int i, int j, subset &S )
mpm::merge	mpm.hpp	/^		void merge( int i, int j, subset &S );$/;"	p	class:mpm	access:public	signature:( int i, int j, subset &S )
mpm::model	mpm.cpp	/^void mpm::model( population *pop, ofstream &outfile )$/;"	f	class:mpm	signature:( population *pop, ofstream &outfile )
mpm::model	mpm.hpp	/^		void model( population *pop, ofstream &outfile );$/;"	p	class:mpm	access:public	signature:( population *pop, ofstream &outfile )
mpm::modelComplexity	mpm.cpp	/^double mpm::modelComplexity()$/;"	f	class:mpm	signature:()
mpm::modelComplexity	mpm.hpp	/^		double modelComplexity();$/;"	p	class:mpm	access:public	signature:()
mpm::mpm	mpm.cpp	/^mpm::mpm( int n_sets )$/;"	f	class:mpm	signature:( int n_sets )
mpm::mpm	mpm.hpp	/^		mpm( int n_sets );$/;"	p	class:mpm	access:public	signature:( int n_sets )
mpm::n_subsets	mpm.hpp	/^		int     n_subsets;    \/\/ number of subsets$/;"	m	class:mpm	access:private
mpm::num_subsets	mpm.hpp	/^		int num_subsets() { return n_subsets; }$/;"	f	class:mpm	access:public	signature:()
mpm::operator <<	mpm.hpp	/^		friend ostream &operator<< (ostream &out, mpm &MPM);$/;"	p	class:mpm	access:friend	signature:(ostream &out, mpm &MPM)
mpm::operator []	mpm.hpp	/^		subset & operator[](const int i) const { return subsets[i]; }$/;"	f	class:mpm	access:public	signature:(const int i) const
mpm::remove	mpm.cpp	/^void mpm::remove( int j )$/;"	f	class:mpm	signature:( int j )
mpm::remove	mpm.hpp	/^		void remove( int i );$/;"	p	class:mpm	access:public	signature:( int i )
mpm::subsets	mpm.hpp	/^		subset  *subsets;     \/\/ the subsets$/;"	m	class:mpm	access:private
mpm::~mpm	mpm.cpp	/^mpm::~mpm()$/;"	f	class:mpm	signature:()
mpm::~mpm	mpm.hpp	/^		~mpm();$/;"	p	class:mpm	access:public	signature:()
myRound	benchmark.cpp	/^double myRound(double x) {$/;"	f	signature:(double x)
myRound	benchmark.h	/^	double myRound(double x);$/;"	p	signature:(double x)
myXRound	benchmark.cpp	/^double myXRound(double x) {$/;"	f	signature:(double x)
myXRound	benchmark.cpp	/^double myXRound(double x, double o) {$/;"	f	signature:(double x, double o)
myXRound	benchmark.h	/^	double myXRound(double x);$/;"	p	signature:(double x)
myXRound	benchmark.h	/^	double myXRound(double x, double o);$/;"	p	signature:(double x, double o)
my_df	objfunc.hpp	/^void my_df(const gsl_vector *v,void *params,gsl_vector *df);$/;"	p	signature:(const gsl_vector *v,void *params,gsl_vector *df)
my_f	objfunc.cpp	/^double my_f(const gsl_vector *v,void *params)$/;"	f	signature:(const gsl_vector *v,void *params)
my_f	objfunc.hpp	/^double my_f(const gsl_vector *v,void *params);$/;"	p	signature:(const gsl_vector *v,void *params)
my_fdf	objfunc.hpp	/^void my_fdf(const gsl_vector *v,void *params,double *f,gsl_vector *df);$/;"	p	signature:(const gsl_vector *v,void *params,double *f,gsl_vector *df)
n_subsets	mpm.hpp	/^		int     n_subsets;    \/\/ number of subsets$/;"	m	class:mpm	access:private
name	test_func.h	/^	string name() {$/;"	f	class:test_func	access:public	signature:()
normal	random.cpp	/^double randomG::normal( double mean, double variance )$/;"	f	class:randomG	signature:( double mean, double variance )
normal	random.hpp	/^		double normal( double mean, double variance );$/;"	p	class:randomG	access:public	signature:( double mean, double variance )
normal01	random.cpp	/^double randomG::normal01()$/;"	f	class:randomG	signature:()
normal01	random.hpp	/^		double normal01();$/;"	p	class:randomG	access:public	signature:()
num	elem.h	/^	int num;$/;"	m	class:elem	access:public
numCounts	subset.hpp	/^		int numCounts() { return num_counts; }$/;"	f	class:subset	access:public	signature:()
num_counts	subset.hpp	/^		int num_counts;$/;"	m	class:subset	access:private
num_dim	HCJob.h	/^	int num_dim;$/;"	m	class:HCJob	access:public
num_fun	main.cpp	/^int    parameter::num_fun;$/;"	m	class:parameter	file:
num_fun	parameter.hpp	/^  static int num_fun;$/;"	m	class:parameter	access:public
num_func	HCJob.h	/^	int num_func;$/;"	m	class:HCJob	access:public
num_subsets	mpm.hpp	/^		int num_subsets() { return n_subsets; }$/;"	f	class:mpm	access:public	signature:()
o	HCJob.h	/^	double **o;$/;"	m	class:HCJob	access:public
objective_func	objfunc.cpp	/^double objective_func( double *x, int lchrom )$/;"	f	signature:( double *x, int lchrom )
objective_func	objfunc.hpp	/^double objective_func( double *chrom, int lchrom );$/;"	p	signature:( double *chrom, int lchrom )
objfunc	objfunc.cpp	/^double objfunc( chromosome &x )$/;"	f	signature:( chromosome &x )
objfunc	objfunc.hpp	/^double objfunc( chromosome &x );$/;"	p	signature:( chromosome &x )
operator !=	gene.hpp	/^		int operator!=(const double v)   { return Allele != v; }$/;"	f	class:gene	access:public	signature:(const double v)
operator !=	gene.hpp	/^		int operator!=(const gene &g) { return Allele != g.Allele; }$/;"	f	class:gene	access:public	signature:(const gene &g)
operator <<	cache.cpp	/^ostream &operator<< (ostream &out, cache &C)$/;"	f	signature:(ostream &out, cache &C)
operator <<	cache.hpp	/^		friend ostream &operator<< (ostream &out, cache &C);$/;"	p	class:cache	access:friend	signature:(ostream &out, cache &C)
operator <<	chromosome.cpp	/^ostream &operator<< (ostream &out, chromosome &chrom)$/;"	f	signature:(ostream &out, chromosome &chrom)
operator <<	chromosome.hpp	/^		friend ostream &operator<< (ostream &out, chromosome &chrom);$/;"	p	class:chromosome	access:friend	signature:(ostream &out, chromosome &chrom)
operator <<	gene.cpp	/^ostream &operator<< (ostream &out, const gene &g)$/;"	f	signature:(ostream &out, const gene &g)
operator <<	gene.hpp	/^		friend ostream &operator<< (ostream &out, const gene &g);$/;"	p	class:gene	access:friend	signature:(ostream &out, const gene &g)
operator <<	mpm.cpp	/^ostream &operator<< (ostream &out, mpm &MPM)$/;"	f	signature:(ostream &out, mpm &MPM)
operator <<	mpm.hpp	/^		friend ostream &operator<< (ostream &out, mpm &MPM);$/;"	p	class:mpm	access:friend	signature:(ostream &out, mpm &MPM)
operator <<	population.cpp	/^ostream &operator<< (ostream &out, population &pop)$/;"	f	signature:(ostream &out, population &pop)
operator <<	population.hpp	/^		friend ostream &operator<< ( ostream &out, population &pop );$/;"	p	class:population	access:friend	signature:( ostream &out, population &pop )
operator <<	subset.cpp	/^ostream &operator<< (ostream &out, subset &S)$/;"	f	signature:(ostream &out, subset &S)
operator <<	subset.hpp	/^		friend ostream &operator<< (ostream &out, subset &S);$/;"	p	class:subset	access:friend	signature:(ostream &out, subset &S)
operator =	chromosome.cpp	/^chromosome & chromosome::operator=(const chromosome &chrom)$/;"	f	class:chromosome	signature:(const chromosome &chrom)
operator =	chromosome.hpp	/^		chromosome & operator=(const chromosome &chrom);$/;"	p	class:chromosome	access:public	signature:(const chromosome &chrom)
operator =	codetable.cpp	/^code_table & code_table::operator=( code_table & CT)$/;"	f	class:code_table	signature:( code_table & CT)
operator =	codetable.h	/^	code_table & operator=( code_table & CT);$/;"	p	class:code_table	access:public	signature:( code_table & CT)
operator =	gene.cpp	/^gene & gene::operator=(const double v)$/;"	f	class:gene	signature:(const double v)
operator =	gene.cpp	/^gene & gene::operator=(const gene &g)$/;"	f	class:gene	signature:(const gene &g)
operator =	gene.hpp	/^		gene & operator=(const double v );$/;"	p	class:gene	access:public	signature:(const double v )
operator =	gene.hpp	/^		gene & operator=(const gene &g);$/;"	p	class:gene	access:public	signature:(const gene &g)
operator =	population.cpp	/^population & population::operator=( population &pop )$/;"	f	class:population	signature:( population &pop )
operator =	population.hpp	/^		population & operator=( population &pop );$/;"	p	class:population	access:public	signature:( population &pop )
operator =	subset.cpp	/^subset & subset::operator=(subset &S)$/;"	f	class:subset	signature:(subset &S)
operator =	subset.hpp	/^		subset & operator=(subset &S);$/;"	p	class:subset	access:public	signature:(subset &S)
operator ==	gene.hpp	/^		int operator==(const double v)   { return Allele == v; }$/;"	f	class:gene	access:public	signature:(const double v)
operator ==	gene.hpp	/^		int operator==(const gene &g) { return Allele == g.Allele; }$/;"	f	class:gene	access:public	signature:(const gene &g)
operator []	chromosome.hpp	/^		gene & operator[](int loci) { return genes[loci]; }$/;"	f	class:chromosome	access:public	signature:(int loci)
operator []	mpm.hpp	/^		subset & operator[](const int i) const { return subsets[i]; }$/;"	f	class:mpm	access:public	signature:(const int i) const
operator []	population.cpp	/^chromosome & population::operator[](int index)$/;"	f	class:population	signature:(int index)
operator []	population.hpp	/^		chromosome & operator[]( int index );$/;"	p	class:population	access:public	signature:( int index )
parameter	parameter.hpp	/^class parameter    $/;"	c
parameter::ans	main.cpp	/^double parameter::ans;$/;"	m	class:parameter	file:
parameter::ans	parameter.hpp	/^  static double ans;$/;"	m	class:parameter	access:public
parameter::decrease_rate	main.cpp	/^double parameter::decrease_rate;$/;"	m	class:parameter	file:
parameter::decrease_rate	parameter.hpp	/^  static double decrease_rate;$/;"	m	class:parameter	access:public
parameter::eva_fun	main.cpp	/^int    parameter::eva_fun;$/;"	m	class:parameter	file:
parameter::eva_fun	parameter.hpp	/^  static int eva_fun;$/;"	m	class:parameter	access:public
parameter::lchrom	main.cpp	/^int    parameter::lchrom;$/;"	m	class:parameter	file:
parameter::lchrom	parameter.hpp	/^  static int    lchrom;            \/\/ chromosome length$/;"	m	class:parameter	access:public
parameter::learn_MPM	main.cpp	/^bool   parameter::learn_MPM;   $/;"	m	class:parameter	file:
parameter::learn_MPM	parameter.hpp	/^  static bool   learn_MPM;         \/\/ on = learns linkage, off = compact GA$/;"	m	class:parameter	access:public
parameter::low_bound	main.cpp	/^double parameter::low_bound;$/;"	m	class:parameter	file:
parameter::low_bound	parameter.hpp	/^  static double low_bound;$/;"	m	class:parameter	access:public
parameter::max_model	main.cpp	/^double parameter::max_model;$/;"	m	class:parameter	file:
parameter::max_model	parameter.hpp	/^  static double max_model;$/;"	m	class:parameter	access:public
parameter::num_fun	main.cpp	/^int    parameter::num_fun;$/;"	m	class:parameter	file:
parameter::num_fun	parameter.hpp	/^  static int num_fun;$/;"	m	class:parameter	access:public
parameter::pcross	main.cpp	/^double parameter::pcross;$/;"	m	class:parameter	file:
parameter::pcross	parameter.hpp	/^  static double pcross;$/;"	m	class:parameter	access:public
parameter::popsize	main.cpp	/^int    parameter::popsize;$/;"	m	class:parameter	file:
parameter::popsize	parameter.hpp	/^  static int    popsize;           \/\/ population size$/;"	m	class:parameter	access:public
parameter::report_MPM	main.cpp	/^bool   parameter::report_MPM;$/;"	m	class:parameter	file:
parameter::report_MPM	parameter.hpp	/^  static bool   report_MPM;$/;"	m	class:parameter	access:public
parameter::report_err	main.cpp	/^bool   parameter::report_err;$/;"	m	class:parameter	file:
parameter::report_err	parameter.hpp	/^  static bool   report_err;$/;"	m	class:parameter	access:public
parameter::report_fitness	main.cpp	/^bool   parameter::report_fitness;$/;"	m	class:parameter	file:
parameter::report_fitness	parameter.hpp	/^  static bool   report_fitness;$/;"	m	class:parameter	access:public
parameter::report_pop	main.cpp	/^bool   parameter::report_pop;$/;"	m	class:parameter	file:
parameter::report_pop	parameter.hpp	/^  static bool   report_pop;$/;"	m	class:parameter	access:public
parameter::report_string	main.cpp	/^bool   parameter::report_string;$/;"	m	class:parameter	file:
parameter::report_string	parameter.hpp	/^  static bool   report_string;$/;"	m	class:parameter	access:public
parameter::seed	main.cpp	/^long   parameter::seed;$/;"	m	class:parameter	file:
parameter::seed	parameter.hpp	/^  static long   seed;              \/\/ seed for random number generator$/;"	m	class:parameter	access:public
parameter::split_rate	main.cpp	/^double parameter::split_rate;$/;"	m	class:parameter	file:
parameter::split_rate	parameter.hpp	/^  static double split_rate;$/;"	m	class:parameter	access:public
parameter::stop_criteria	main.cpp	/^int    parameter::stop_criteria;     $/;"	m	class:parameter	file:
parameter::stop_criteria	parameter.hpp	/^  static int    stop_criteria;     \/\/ stopping criteria for the algorithm$/;"	m	class:parameter	access:public
parameter::stop_criteria_arg	main.cpp	/^double parameter::stop_criteria_arg; $/;"	m	class:parameter	file:
parameter::stop_criteria_arg	parameter.hpp	/^  static double stop_criteria_arg; \/\/ stop criteria argument (ex: maxgens= x)$/;"	m	class:parameter	access:public
parameter::tournament_size	main.cpp	/^int    parameter::tournament_size;    $/;"	m	class:parameter	file:
parameter::tournament_size	parameter.hpp	/^  static int    tournament_size;   \/\/ tournament size$/;"	m	class:parameter	access:public
parameter::up_bound	main.cpp	/^double parameter::up_bound;$/;"	m	class:parameter	file:
parameter::up_bound	parameter.hpp	/^  static double up_bound;$/;"	m	class:parameter	access:public
pcross	main.cpp	/^double parameter::pcross;$/;"	m	class:parameter	file:
pcross	parameter.hpp	/^  static double pcross;$/;"	m	class:parameter	access:public
popsize	main.cpp	/^int    parameter::popsize;$/;"	m	class:parameter	file:
popsize	parameter.hpp	/^  static int    popsize;           \/\/ population size$/;"	m	class:parameter	access:public
popsize	population.hpp	/^		int popsize(){ return PopSize; }$/;"	f	class:population	access:public	signature:()
population	population.cpp	/^population::population( int popsize )$/;"	f	class:population	signature:( int popsize )
population	population.cpp	/^population::population( population &pop )$/;"	f	class:population	signature:( population &pop )
population	population.hpp	/^		population( int popsize );$/;"	p	class:population	access:public	signature:( int popsize )
population	population.hpp	/^		population( population &pop );$/;"	p	class:population	access:public	signature:( population &pop )
population	population.hpp	/^class population$/;"	c
population::AvgFit	population.hpp	/^		double     AvgFit;              \/\/ average fitness    $/;"	m	class:population	access:private
population::Best	population.hpp	/^		int        Best;                \/\/ index of best individual$/;"	m	class:population	access:private
population::Chromosomes	population.hpp	/^		chromosome *Chromosomes;        \/\/ individuals$/;"	m	class:population	access:private
population::Ctable	population.hpp	/^		code_table *Ctable;$/;"	m	class:population	access:public
population::MatingPool	population.hpp	/^		int        *MatingPool;         \/\/ mating pool$/;"	m	class:population	access:private
population::MaxFit	population.hpp	/^		double     MaxFit;              \/\/ maximum fitness$/;"	m	class:population	access:private
population::MinFit	population.hpp	/^		double     MinFit;              \/\/ minimum fitness$/;"	m	class:population	access:private
population::PopSize	population.hpp	/^		int        PopSize;             \/\/ population size$/;"	m	class:population	access:private
population::Stddev	population.hpp	/^		double     Stddev;$/;"	m	class:population	access:private
population::avgfit	population.hpp	/^		double avgfit() { return AvgFit; }$/;"	f	class:population	access:public	signature:()
population::best	population.hpp	/^		int best() { return Best; }$/;"	f	class:population	access:public	signature:()
population::chrom_comp	population.hpp	/^		friend int chrom_comp(const void *a,const void *b);$/;"	p	class:population	access:friend	signature:(const void *a,const void *b)
population::converged	population.cpp	/^bool population::converged()$/;"	f	class:population	signature:()
population::converged	population.hpp	/^		bool converged();$/;"	p	class:population	access:public	signature:()
population::elemsearch	population.hpp	/^		friend int elemsearch(elem *ary,double val,int s,int e);$/;"	p	class:population	access:friend	signature:(elem *ary,double val,int s,int e)
population::encode	population.cpp	/^void population::encode(ofstream &out)$/;"	f	class:population	signature:(ofstream &out)
population::encode	population.hpp	/^		void encode(ofstream &out);$/;"	p	class:population	access:public	signature:(ofstream &out)
population::evaluate	population.cpp	/^void population::evaluate()$/;"	f	class:population	signature:()
population::evaluate	population.hpp	/^		void evaluate();   $/;"	p	class:population	access:public	signature:()
population::lsearch	population.cpp	/^void population::lsearch()$/;"	f	class:population	signature:()
population::lsearch	population.hpp	/^		void lsearch();$/;"	p	class:population	access:public	signature:()
population::maxfit	population.hpp	/^		double maxfit() { return MaxFit; }$/;"	f	class:population	access:public	signature:()
population::minfit	population.hpp	/^		double minfit() { return MinFit; }$/;"	f	class:population	access:public	signature:()
population::operator <<	population.hpp	/^		friend ostream &operator<< ( ostream &out, population &pop );$/;"	p	class:population	access:friend	signature:( ostream &out, population &pop )
population::operator =	population.cpp	/^population & population::operator=( population &pop )$/;"	f	class:population	signature:( population &pop )
population::operator =	population.hpp	/^		population & operator=( population &pop );$/;"	p	class:population	access:public	signature:( population &pop )
population::operator []	population.cpp	/^chromosome & population::operator[](int index)$/;"	f	class:population	signature:(int index)
population::operator []	population.hpp	/^		chromosome & operator[]( int index );$/;"	p	class:population	access:public	signature:( int index )
population::popsize	population.hpp	/^		int popsize(){ return PopSize; }$/;"	f	class:population	access:public	signature:()
population::population	population.cpp	/^population::population( int popsize )$/;"	f	class:population	signature:( int popsize )
population::population	population.cpp	/^population::population( population &pop )$/;"	f	class:population	signature:( population &pop )
population::population	population.hpp	/^		population( int popsize );$/;"	p	class:population	access:public	signature:( int popsize )
population::population	population.hpp	/^		population( population &pop );$/;"	p	class:population	access:public	signature:( population &pop )
population::random	population.cpp	/^void population::random()$/;"	f	class:population	signature:()
population::random	population.hpp	/^		void random();$/;"	p	class:population	access:public	signature:()
population::rec_encode	population.cpp	/^void population::rec_encode(code_table &CT,elem *ary,double max,double min,int split_num,int dim,int s,int e)$/;"	f	class:population	signature:(code_table &CT,elem *ary,double max,double min,int split_num,int dim,int s,int e)
population::rec_encode	population.hpp	/^		void rec_encode(code_table &CT,elem *ary,double max,double min,int split_num,int dim,int s,int e);$/;"	p	class:population	access:public	signature:(code_table &CT,elem *ary,double max,double min,int split_num,int dim,int s,int e)
population::return_total_size	population.cpp	/^int population::return_total_size()$/;"	f	class:population	signature:()
population::return_total_size	population.hpp	/^		int return_total_size();$/;"	p	class:population	access:public	signature:()
population::sc_allele_conv	population.hpp	/^		friend bool sc_allele_conv( population &pop, int gen );$/;"	p	class:population	access:friend	signature:( population &pop, int gen )
population::sc_maxgen	population.hpp	/^		friend bool sc_maxgen( population &pop, int gen );$/;"	p	class:population	access:friend	signature:( population &pop, int gen )
population::searchbest	population.cpp	/^void population::searchbest()$/;"	f	class:population	signature:()
population::searchbest	population.hpp	/^		void searchbest();$/;"	p	class:population	access:public	signature:()
population::selection	population.cpp	/^void population::selection( population *newpop )$/;"	f	class:population	signature:( population *newpop )
population::selection	population.hpp	/^		void selection( population *newpop );$/;"	p	class:population	access:public	signature:( population *newpop )
population::sort	population.cpp	/^void population::sort()$/;"	f	class:population	signature:()
population::sort	population.hpp	/^		void sort();$/;"	p	class:population	access:public	signature:()
population::statistics	population.cpp	/^void population::statistics()$/;"	f	class:population	signature:()
population::statistics	population.hpp	/^		void statistics();$/;"	p	class:population	access:public	signature:()
population::tournament_winner	population.cpp	/^int population::tournament_winner( int *shuffle, int &pick, int tournsize )$/;"	f	class:population	signature:( int *shuffle, int &pick, int tournsize )
population::tournament_winner	population.hpp	/^		int        tournament_winner( int *shufflearray, int &pick, int s );$/;"	p	class:population	access:private	signature:( int *shufflearray, int &pick, int s )
population::truncational_selection	population.cpp	/^void population::truncational_selection( population *newpop )$/;"	f	class:population	signature:( population *newpop )
population::truncational_selection	population.hpp	/^		void truncational_selection( population *newpop );$/;"	p	class:population	access:public	signature:( population *newpop )
population::tselect_without_replacement	population.hpp	/^		friend void tselect_without_replacement( population &pop );  $/;"	p	class:population	access:friend	signature:( population &pop )
population::~population	population.cpp	/^population::~population()$/;"	f	class:population	signature:()
population::~population	population.hpp	/^		~population();$/;"	p	class:population	access:public	signature:()
pre_tselect_without_replacement	population.cpp	/^void pre_tselect_without_replacement( int *array, int &pick, int popsize )$/;"	f	signature:( int *array, int &pick, int popsize )
r	random.hpp	/^		gsl_rng *r;$/;"	m	class:randomG	access:private
random	chromosome.cpp	/^void chromosome::random()$/;"	f	class:chromosome	signature:()
random	chromosome.hpp	/^		void random();$/;"	p	class:chromosome	access:public	signature:()
random	gene.cpp	/^void gene::random()$/;"	f	class:gene	signature:()
random	gene.hpp	/^		void random();$/;"	p	class:gene	access:public	signature:()
random	population.cpp	/^void population::random()$/;"	f	class:population	signature:()
random	population.hpp	/^		void random();$/;"	p	class:population	access:public	signature:()
randomG	random.hpp	/^		randomG() $/;"	f	class:randomG	access:public	signature:()
randomG	random.hpp	/^class randomG$/;"	c
randomG::bernoulli	random.cpp	/^bool randomG::bernoulli( double p )$/;"	f	class:randomG	signature:( double p )
randomG::bernoulli	random.hpp	/^		bool   bernoulli( double p );$/;"	p	class:randomG	access:public	signature:( double p )
randomG::exponential	random.cpp	/^double randomG::exponential( double mu )$/;"	f	class:randomG	signature:( double mu )
randomG::exponential	random.hpp	/^		double exponential( double mu );$/;"	p	class:randomG	access:public	signature:( double mu )
randomG::flip	random.hpp	/^		bool   flip( double p ) { return bernoulli(p); }$/;"	f	class:randomG	access:public	signature:( double p )
randomG::geometric	random.cpp	/^long randomG::geometric( double p )$/;"	f	class:randomG	signature:( double p )
randomG::geometric	random.hpp	/^		long   geometric( double p );$/;"	p	class:randomG	access:public	signature:( double p )
randomG::normal	random.cpp	/^double randomG::normal( double mean, double variance )$/;"	f	class:randomG	signature:( double mean, double variance )
randomG::normal	random.hpp	/^		double normal( double mean, double variance );$/;"	p	class:randomG	access:public	signature:( double mean, double variance )
randomG::normal01	random.cpp	/^double randomG::normal01()$/;"	f	class:randomG	signature:()
randomG::normal01	random.hpp	/^		double normal01();$/;"	p	class:randomG	access:public	signature:()
randomG::r	random.hpp	/^		gsl_rng *r;$/;"	m	class:randomG	access:private
randomG::randomG	random.hpp	/^		randomG() $/;"	f	class:randomG	access:public	signature:()
randomG::randomize	random.cpp	/^void randomG::randomize( long seed )$/;"	f	class:randomG	signature:( long seed )
randomG::randomize	random.hpp	/^		void randomize( long seed );$/;"	p	class:randomG	access:public	signature:( long seed )
randomG::uniform	random.cpp	/^double randomG::uniform( double a, double b )$/;"	f	class:randomG	signature:( double a, double b )
randomG::uniform	random.cpp	/^int randomG::uniform( int a, int b )$/;"	f	class:randomG	signature:( int a, int b )
randomG::uniform	random.hpp	/^		double uniform( double a, double b );$/;"	p	class:randomG	access:public	signature:( double a, double b )
randomG::uniform	random.hpp	/^		int    uniform( int a, int b );$/;"	p	class:randomG	access:public	signature:( int a, int b )
randomG::uniform01	random.cpp	/^double randomG::uniform01()$/;"	f	class:randomG	signature:()
randomG::uniform01	random.hpp	/^		double uniform01();$/;"	p	class:randomG	access:public	signature:()
randomG::~randomG	random.hpp	/^		~randomG() { gsl_rng_free(r); }$/;"	f	class:randomG	access:public	signature:()
random_	benchmark.cpp	/^randomG random_;$/;"	v
randomize	random.cpp	/^void randomG::randomize( long seed )$/;"	f	class:randomG	signature:( long seed )
randomize	random.hpp	/^		void randomize( long seed );$/;"	p	class:randomG	access:public	signature:( long seed )
rastrigin	benchmark.cpp	/^double rastrigin(double *x,int length) {$/;"	f	signature:(double *x,int length)
rastrigin	benchmark.h	/^	double rastrigin(double *x,int length);$/;"	p	signature:(double *x,int length)
rastriginNonCont	benchmark.cpp	/^double rastriginNonCont(double *x,int length) {$/;"	f	signature:(double *x,int length)
rastriginNonCont	benchmark.h	/^	double rastriginNonCont(double *x,int length);$/;"	p	signature:(double *x,int length)
read_parameters	main.cpp	/^void read_parameters( ifstream &in )$/;"	f	signature:( ifstream &in )
rec_encode	population.cpp	/^void population::rec_encode(code_table &CT,elem *ary,double max,double min,int split_num,int dim,int s,int e)$/;"	f	class:population	signature:(code_table &CT,elem *ary,double max,double min,int split_num,int dim,int s,int e)
rec_encode	population.hpp	/^		void rec_encode(code_table &CT,elem *ary,double max,double min,int split_num,int dim,int s,int e);$/;"	p	class:population	access:public	signature:(code_table &CT,elem *ary,double max,double min,int split_num,int dim,int s,int e)
remove	mpm.cpp	/^void mpm::remove( int j )$/;"	f	class:mpm	signature:( int j )
remove	mpm.hpp	/^		void remove( int i );$/;"	p	class:mpm	access:public	signature:( int i )
removeEntry	cache.cpp	/^void cache::removeEntry( int id )$/;"	f	class:cache	signature:( int id )
removeEntry	cache.hpp	/^		void removeEntry( int id );$/;"	p	class:cache	access:public	signature:( int id )
replace_X_by_Y	cache.cpp	/^void cache::replace_X_by_Y( int x, int y )$/;"	f	class:cache	signature:( int x, int y )
replace_X_by_Y	cache.hpp	/^		void replace_X_by_Y( int x, int y );$/;"	p	class:cache	access:public	signature:( int x, int y )
report	ecga.cpp	/^void ecga::report( ofstream &outfile, population *pop, int gen )$/;"	f	class:ecga	signature:( ofstream &outfile, population *pop, int gen )
report	ecga.hpp	/^		void report( ofstream &outfile, population *pop, int gen );$/;"	p	class:ecga	access:private	signature:( ofstream &outfile, population *pop, int gen )
report_MPM	main.cpp	/^bool   parameter::report_MPM;$/;"	m	class:parameter	file:
report_MPM	parameter.hpp	/^  static bool   report_MPM;$/;"	m	class:parameter	access:public
report_err	main.cpp	/^bool   parameter::report_err;$/;"	m	class:parameter	file:
report_err	parameter.hpp	/^  static bool   report_err;$/;"	m	class:parameter	access:public
report_fitness	main.cpp	/^bool   parameter::report_fitness;$/;"	m	class:parameter	file:
report_fitness	parameter.hpp	/^  static bool   report_fitness;$/;"	m	class:parameter	access:public
report_pop	main.cpp	/^bool   parameter::report_pop;$/;"	m	class:parameter	file:
report_pop	parameter.hpp	/^  static bool   report_pop;$/;"	m	class:parameter	access:public
report_string	main.cpp	/^bool   parameter::report_string;$/;"	m	class:parameter	file:
report_string	parameter.hpp	/^  static bool   report_string;$/;"	m	class:parameter	access:public
return_total_size	population.cpp	/^int population::return_total_size()$/;"	f	class:population	signature:()
return_total_size	population.hpp	/^		int return_total_size();$/;"	p	class:population	access:public	signature:()
rosenbrock	benchmark.cpp	/^double rosenbrock(double *x,int length) {$/;"	f	signature:(double *x,int length)
rosenbrock	benchmark.h	/^	double rosenbrock(double *x,int length);$/;"	p	signature:(double *x,int length)
rotate	benchmark.cpp	/^void rotate(double *results, double *x, double **matrix,int length) {$/;"	f	signature:(double *results, double *x, double **matrix,int length)
rotate	benchmark.h	/^	void rotate(double *results, double *x, double **matrix,int length);$/;"	p	signature:(double *results, double *x, double **matrix,int length)
round	benchmark.cpp	/^double round(double x){		\/\/only for positive value x $/;"	f	signature:(double x)
run	ecga.cpp	/^void ecga::run( ofstream &outfile, ofstream &outfile2 )$/;"	f	class:ecga	signature:( ofstream &outfile, ofstream &outfile2 )
run	ecga.hpp	/^		void run( ofstream &outfile, ofstream &outfile2 );$/;"	p	class:ecga	access:public	signature:( ofstream &outfile, ofstream &outfile2 )
runTest	benchmark.cpp	/^void runTest() {$/;"	f	signature:()
runTest	benchmark.cpp	/^void runTest(int func_num) {$/;"	f	signature:(int func_num)
runTest	benchmark.h	/^	void runTest();$/;"	p	signature:()
runTest	benchmark.h	/^	void runTest(int func_num);$/;"	p	signature:(int func_num)
sc_allele_conv	population.cpp	/^bool sc_allele_conv( population &pop, int dummy )$/;"	f	signature:( population &pop, int dummy )
sc_allele_conv	population.hpp	/^		friend bool sc_allele_conv( population &pop, int gen );$/;"	p	class:population	access:friend	signature:( population &pop, int gen )
sc_maxgen	population.cpp	/^bool sc_maxgen( population &pop, int gen )$/;"	f	signature:( population &pop, int gen )
sc_maxgen	population.hpp	/^		friend bool sc_maxgen( population &pop, int gen );$/;"	p	class:population	access:friend	signature:( population &pop, int gen )
schwefel_102	benchmark.cpp	/^double schwefel_102(double *x,int length) {$/;"	f	signature:(double *x,int length)
schwefel_102	benchmark.h	/^	double schwefel_102(double *x,int length);$/;"	p	signature:(double *x,int length)
searchbest	population.cpp	/^void population::searchbest()$/;"	f	class:population	signature:()
searchbest	population.hpp	/^		void searchbest();$/;"	p	class:population	access:public	signature:()
seed	main.cpp	/^long   parameter::seed;$/;"	m	class:parameter	file:
seed	parameter.hpp	/^  static long   seed;              \/\/ seed for random number generator$/;"	m	class:parameter	access:public
selection	population.cpp	/^void population::selection( population *newpop )$/;"	f	class:population	signature:( population *newpop )
selection	population.hpp	/^		void selection( population *newpop );$/;"	p	class:population	access:public	signature:( population *newpop )
set_fitness	chromosome.hpp	/^		void set_fitness( double fit ) { Fitness = fit; }$/;"	f	class:chromosome	access:public	signature:( double fit )
shift	benchmark.cpp	/^void shift(double *results, double *x, double *o,int length) {$/;"	f	signature:(double *results, double *x, double *o,int length)
shift	benchmark.h	/^	void shift(double *results, double *x, double *o,int length);$/;"	p	signature:(double *results, double *x, double *o,int length)
sigma	HCJob.h	/^	double *sigma;$/;"	m	class:HCJob	access:public
signbit	benchmark.cpp	/^bool signbit(double x){$/;"	f	signature:(double x)
size	cache.hpp	/^		long size() { return sz; }$/;"	f	class:cache	access:public	signature:()
size	codetable.h	/^	int size(){ return T.size(); };$/;"	f	class:code_table	access:public	signature:()
size	subset.hpp	/^		int size() { return L.size(); }$/;"	f	class:subset	access:public	signature:()
sort	population.cpp	/^void population::sort()$/;"	f	class:population	signature:()
sort	population.hpp	/^		void sort();$/;"	p	class:population	access:public	signature:()
space_for_counts	subset.cpp	/^void subset::space_for_counts( population &pop )$/;"	f	class:subset	signature:( population &pop )
space_for_counts	subset.hpp	/^		void space_for_counts( population &pop );$/;"	p	class:subset	access:public	signature:( population &pop )
sphere	benchmark.cpp	/^double sphere(double *x,int length) {$/;"	f	signature:(double *x,int length)
sphere	benchmark.h	/^	double sphere(double *x,int length);$/;"	p	signature:(double *x,int length)
sphere_noise	benchmark.cpp	/^double sphere_noise(double *x,int length) {$/;"	f	signature:(double *x,int length)
sphere_noise	benchmark.h	/^	double sphere_noise(double *x,int length);$/;"	p	signature:(double *x,int length)
split_rate	main.cpp	/^double parameter::split_rate;$/;"	m	class:parameter	file:
split_rate	parameter.hpp	/^  static double split_rate;$/;"	m	class:parameter	access:public
sqr	utility.cpp	/^double sqr( double x )$/;"	f	signature:( double x )
sqr	utility.hpp	/^double  sqr( double x );$/;"	p	signature:( double x )
statistics	population.cpp	/^void population::statistics()$/;"	f	class:population	signature:()
statistics	population.hpp	/^		void statistics();$/;"	p	class:population	access:public	signature:()
stop_criteria	main.cpp	/^int    parameter::stop_criteria;     $/;"	m	class:parameter	file:
stop_criteria	parameter.hpp	/^  static int    stop_criteria;     \/\/ stopping criteria for the algorithm$/;"	m	class:parameter	access:public
stop_criteria_arg	main.cpp	/^double parameter::stop_criteria_arg; $/;"	m	class:parameter	file:
stop_criteria_arg	parameter.hpp	/^  static double stop_criteria_arg; \/\/ stop criteria argument (ex: maxgens= x)$/;"	m	class:parameter	access:public
subset	subset.cpp	/^subset::subset()$/;"	f	class:subset	signature:()
subset	subset.hpp	/^		subset();$/;"	p	class:subset	access:public	signature:()
subset	subset.hpp	/^class subset$/;"	c
subset1_id	cache.hpp	/^		int *subset1_id;     \/\/ mergedSet = subset1 UNION subset2 $/;"	m	class:cache	access:public
subset2_id	cache.hpp	/^		int *subset2_id;     \/\/ ids refer to MPM subsets$/;"	m	class:cache	access:public
subset::CC	subset.hpp	/^		double CC() { return mc + cpc; }$/;"	f	class:subset	access:public	signature:()
subset::CPC	subset.hpp	/^		double CPC() { return cpc; }$/;"	f	class:subset	access:public	signature:()
subset::L	subset.hpp	/^		vector<int> L;         \/\/ a subset$/;"	m	class:subset	access:public
subset::MC	subset.hpp	/^		double MC() { return mc; }$/;"	f	class:subset	access:public	signature:()
subset::combinedComplexity	subset.cpp	/^void subset::combinedComplexity( population &pop )$/;"	f	class:subset	signature:( population &pop )
subset::combinedComplexity	subset.hpp	/^		void combinedComplexity( population &pop );$/;"	p	class:subset	access:public	signature:( population &pop )
subset::compressedPopulationComplexity	subset.cpp	/^double subset::compressedPopulationComplexity( population &pop )$/;"	f	class:subset	signature:( population &pop )
subset::compressedPopulationComplexity	subset.hpp	/^		double compressedPopulationComplexity( population &pop );$/;"	p	class:subset	access:public	signature:( population &pop )
subset::compute_freq_counts	subset.cpp	/^void subset::compute_freq_counts( population &pop )$/;"	f	class:subset	signature:( population &pop )
subset::compute_freq_counts	subset.hpp	/^		void compute_freq_counts( population &pop );$/;"	p	class:subset	access:public	signature:( population &pop )
subset::counts	subset.hpp	/^		int *counts;$/;"	m	class:subset	access:public
subset::cpc	subset.hpp	/^		double cpc;  \/\/ compressed population complexity$/;"	m	class:subset	access:private
subset::insert	subset.hpp	/^		void insert( int elem ) { L.push_back( elem ); }$/;"	f	class:subset	access:public	signature:( int elem )
subset::mc	subset.hpp	/^		double mc;   \/\/ model complexity$/;"	m	class:subset	access:private
subset::merge	subset.cpp	/^void subset::merge( subset &S1, subset &S2 )$/;"	f	class:subset	signature:( subset &S1, subset &S2 )
subset::merge	subset.hpp	/^		void merge( subset &S1, subset &S2 );$/;"	p	class:subset	access:public	signature:( subset &S1, subset &S2 )
subset::modelComplexity	subset.cpp	/^double subset::modelComplexity( int popsize )$/;"	f	class:subset	signature:( int popsize )
subset::modelComplexity	subset.hpp	/^		double modelComplexity( int popsize );$/;"	p	class:subset	access:public	signature:( int popsize )
subset::numCounts	subset.hpp	/^		int numCounts() { return num_counts; }$/;"	f	class:subset	access:public	signature:()
subset::num_counts	subset.hpp	/^		int num_counts;$/;"	m	class:subset	access:private
subset::operator <<	subset.hpp	/^		friend ostream &operator<< (ostream &out, subset &S);$/;"	p	class:subset	access:friend	signature:(ostream &out, subset &S)
subset::operator =	subset.cpp	/^subset & subset::operator=(subset &S)$/;"	f	class:subset	signature:(subset &S)
subset::operator =	subset.hpp	/^		subset & operator=(subset &S);$/;"	p	class:subset	access:public	signature:(subset &S)
subset::size	subset.hpp	/^		int size() { return L.size(); }$/;"	f	class:subset	access:public	signature:()
subset::space_for_counts	subset.cpp	/^void subset::space_for_counts( population &pop )$/;"	f	class:subset	signature:( population &pop )
subset::space_for_counts	subset.hpp	/^		void space_for_counts( population &pop );$/;"	p	class:subset	access:public	signature:( population &pop )
subset::subset	subset.cpp	/^subset::subset()$/;"	f	class:subset	signature:()
subset::subset	subset.hpp	/^		subset();$/;"	p	class:subset	access:public	signature:()
subset::~subset	subset.cpp	/^subset::~subset()$/;"	f	class:subset	signature:()
subset::~subset	subset.hpp	/^		~subset();$/;"	p	class:subset	access:public	signature:()
subsets	mpm.hpp	/^		subset  *subsets;     \/\/ the subsets$/;"	m	class:mpm	access:private
sz	cache.hpp	/^		int sz;           \/\/ number of subsets stored in the cache$/;"	m	class:cache	access:private
testFunctionFactory	benchmark.cpp	/^test_func* testFunctionFactory(int func_num, int dimension) {$/;"	f	signature:(int func_num, int dimension)
testFunctionFactory	benchmark.h	/^	test_func* testFunctionFactory(int func_num, int dimension);$/;"	p	signature:(int func_num, int dimension)
test_func	test_func.h	/^class test_func {$/;"	c
test_func::bias	test_func.h	/^	double bias() {$/;"	f	class:test_func	access:public	signature:()
test_func::dimension	test_func.h	/^	int dimension() {$/;"	f	class:test_func	access:public	signature:()
test_func::f	test_func.h	/^	virtual double f(double *x,int length)=0;$/;"	p	class:test_func	access:public	signature:(double *x,int length)
test_func::m_bias	test_func.h	/^	double	m_bias;$/;"	m	class:test_func	access:protected
test_func::m_dimension	test_func.h	/^	int	m_dimension;$/;"	m	class:test_func	access:protected
test_func::m_func_name	test_func.h	/^	string	m_func_name;$/;"	m	class:test_func	access:protected
test_func::name	test_func.h	/^	string name() {$/;"	f	class:test_func	access:public	signature:()
test_func_class_names	benchmark.h	/^const string test_func_class_names[25] = {$/;"	v
testfun	main.cpp	/^test_func *testfun;$/;"	v
theJob	F15_hybrid_composition_1.h	/^	MyHCJob15 theJob;$/;"	m	class:F15_hybrid_composition_1	access:private
theJob	F16_rotated_hybrid_composition_1.h	/^	MyHCJob16 theJob;$/;"	m	class:F16_rotated_hybrid_composition_1	access:private
theJob	F17_rotated_hybrid_composition_1_noise.h	/^	MyHCJob17 theJob;$/;"	m	class:F17_rotated_hybrid_composition_1_noise	access:private
theJob	F18_rotated_hybrid_composition_2.h	/^	MyHCJob18 theJob;$/;"	m	class:F18_rotated_hybrid_composition_2	access:private
theJob	F19_rotated_hybrid_composition_2_narrow_basin_global_opt.h	/^	MyHCJob19 theJob;$/;"	m	class:F19_rotated_hybrid_composition_2_narrow_basin_global_opt	access:private
theJob	F20_rotated_hybrid_composition_2_global_opt_bound.h	/^	MyHCJob20 theJob;$/;"	m	class:F20_rotated_hybrid_composition_2_global_opt_bound	access:private
theJob	F21_rotated_hybrid_composition_3.h	/^	MyHCJob21 theJob;$/;"	m	class:F21_rotated_hybrid_composition_3	access:private
theJob	F22_rotated_hybrid_composition_3_high_cond_num_matrix.h	/^	MyHCJob22 theJob;$/;"	m	class:F22_rotated_hybrid_composition_3_high_cond_num_matrix	access:private
theJob	F23_noncontinuous_rotated_hybrid_composition_3.h	/^	MyHCJob23 theJob;$/;"	m	class:F23_noncontinuous_rotated_hybrid_composition_3	access:private
theJob	F24_rotated_hybrid_composition_4.h	/^	MyHCJob24 theJob;$/;"	m	class:F24_rotated_hybrid_composition_4	access:private
theJob	F25_rotated_hybrid_composition_4_bound.h	/^	MyHCJob25 theJob;$/;"	m	class:F25_rotated_hybrid_composition_4_bound	access:private
tournament_size	main.cpp	/^int    parameter::tournament_size;    $/;"	m	class:parameter	file:
tournament_size	parameter.hpp	/^  static int    tournament_size;   \/\/ tournament size$/;"	m	class:parameter	access:public
tournament_winner	population.cpp	/^int population::tournament_winner( int *shuffle, int &pick, int tournsize )$/;"	f	class:population	signature:( int *shuffle, int &pick, int tournsize )
tournament_winner	population.hpp	/^		int        tournament_winner( int *shufflearray, int &pick, int s );$/;"	p	class:population	access:private	signature:( int *shufflearray, int &pick, int s )
truncational_selection	population.cpp	/^void population::truncational_selection( population *newpop )$/;"	f	class:population	signature:( population *newpop )
truncational_selection	population.hpp	/^		void truncational_selection( population *newpop );$/;"	p	class:population	access:public	signature:( population *newpop )
tselect_without_replacement	population.cpp	/^void tselect_without_replacement( population &pop )$/;"	f	signature:( population &pop )
tselect_without_replacement	population.hpp	/^		friend void tselect_without_replacement( population &pop );  $/;"	p	class:population	access:friend	signature:( population &pop )
uniform	random.cpp	/^double randomG::uniform( double a, double b )$/;"	f	class:randomG	signature:( double a, double b )
uniform	random.cpp	/^int randomG::uniform( int a, int b )$/;"	f	class:randomG	signature:( int a, int b )
uniform	random.hpp	/^		double uniform( double a, double b );$/;"	p	class:randomG	access:public	signature:( double a, double b )
uniform	random.hpp	/^		int    uniform( int a, int b );$/;"	p	class:randomG	access:public	signature:( int a, int b )
uniform01	random.cpp	/^double randomG::uniform01()$/;"	f	class:randomG	signature:()
uniform01	random.hpp	/^		double uniform01();$/;"	p	class:randomG	access:public	signature:()
uniformity_scattering	utility.cpp	/^void uniformity_scattering(double* prob, int prob_size, int* counts, int counts_size)$/;"	f	signature:(double* prob, int prob_size, int* counts, int counts_size)
uniformity_scattering	utility.hpp	/^void	 uniformity_scattering(double* prob, int prob_size, int* counts, int counts_size);$/;"	p	signature:(double* prob, int prob_size, int* counts, int counts_size)
up_bound	main.cpp	/^double parameter::up_bound;$/;"	m	class:parameter	file:
up_bound	parameter.hpp	/^  static double up_bound;$/;"	m	class:parameter	access:public
val	elem.h	/^	double val;$/;"	m	class:elem	access:public
w	HCJob.h	/^	double *w;$/;"	m	class:HCJob	access:public
weierstrass	benchmark.cpp	/^double weierstrass(double *x, double a, double b, int Kmax,int length) {$/;"	f	signature:(double *x, double a, double b, int Kmax,int length)
weierstrass	benchmark.cpp	/^double weierstrass(double *x,int length) {$/;"	f	signature:(double *x,int length)
weierstrass	benchmark.h	/^	double weierstrass(double *x, double a, double b, int Kmax,int length);$/;"	p	signature:(double *x, double a, double b, int Kmax,int length)
weierstrass	benchmark.h	/^	double weierstrass(double *x,int length);$/;"	p	signature:(double *x,int length)
xA	benchmark.cpp	/^void xA(double *result, double *x, double **A,int length) {$/;"	f	signature:(double *result, double *x, double **A,int length)
xA	benchmark.h	/^	void xA(double *result, double *x, double **A,int length);$/;"	p	signature:(double *result, double *x, double **A,int length)
xy	benchmark.cpp	/^double xy(double *x, double *y,int length) {$/;"	f	signature:(double *x, double *y,int length)
xy	benchmark.h	/^	double xy(double *x, double *y,int length);$/;"	p	signature:(double *x, double *y,int length)
z	HCJob.h	/^	double **z;$/;"	m	class:HCJob	access:public
zM	HCJob.h	/^	double **zM;$/;"	m	class:HCJob	access:public
~cache	cache.cpp	/^cache::~cache()$/;"	f	class:cache	signature:()
~cache	cache.hpp	/^		~cache();$/;"	p	class:cache	access:public	signature:()
~chromosome	chromosome.cpp	/^chromosome::~chromosome()$/;"	f	class:chromosome	signature:()
~chromosome	chromosome.hpp	/^		~chromosome();$/;"	p	class:chromosome	access:public	signature:()
~code_table	codetable.cpp	/^code_table::~code_table(){ T.clear(); }$/;"	f	class:code_table	signature:()
~code_table	codetable.h	/^	~code_table();$/;"	p	class:code_table	access:public	signature:()
~ecga	ecga.hpp	/^		~ecga() {}$/;"	f	class:ecga	access:public	signature:()
~gene	gene.hpp	/^		~gene() {}$/;"	f	class:gene	access:public	signature:()
~mpm	mpm.cpp	/^mpm::~mpm()$/;"	f	class:mpm	signature:()
~mpm	mpm.hpp	/^		~mpm();$/;"	p	class:mpm	access:public	signature:()
~population	population.cpp	/^population::~population()$/;"	f	class:population	signature:()
~population	population.hpp	/^		~population();$/;"	p	class:population	access:public	signature:()
~randomG	random.hpp	/^		~randomG() { gsl_rng_free(r); }$/;"	f	class:randomG	access:public	signature:()
~subset	subset.cpp	/^subset::~subset()$/;"	f	class:subset	signature:()
~subset	subset.hpp	/^		~subset();$/;"	p	class:subset	access:public	signature:()
